using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace RaidCalculator
{
    
    public partial class CalculatorRaid : Form
    {
       public CalculatorRaid()
        {
            InitializeComponent();
        }

        private void cb_HeroName_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] stat = new string[12];
            //Массивы героев
            //Демоны
            string[] Kaimer = { "Демоны", "Легендарный", "Поддержка", "Магия", "18990", "1046", "1266", "103", "15", "50", "40", "0" };
            string[] Izlimor = { "Демоны", "Легендарный", "Здоровье", "Магия", "21975", "771", "1343", "103", "15", "50", "50", "0" };
            string[] Drexstar = { "Демоны", "Легендарный", "Защита", "Сила", "18990", "914", "1398", "97", "15", "50", "50", "10" };
            string[] Kandrafon = { "Демоны", "Легендарный", "Атака", "Сила", "17505", "1509", "903", "96", "15", "63", "30", "0" };
            string[] Mortu = { "Демоны", "Легендарный", "Здоровье", "Дух", "23130", "1145", "892", "94", "15", "63", "40", "0" };
            string[] Shazar = { "Демоны", "Легендарный", "Атака", "Дух", "15690", "1343", "1189", "101", "15", "63", "30", "0" };
            string[] Lilith = { "Демоны", "Легендарный", "Поддержка", "Дух", "22470", "793", "1288", "103", "15", "50", "50", "0" };
            string[] Krutraxa = { "Демоны", "Легендарный", "Атака", "Тьма", "18330", "1498", "859", "99", "15", "63", "40", "0" };
            string[] Initve = { "Демоны", "Легендарный", "Атака", "Тьма", "14370", "1729", "892", "99", "15", "63", "30", "10" };
            string[] Alura = { "Демоны", "Эпический", "Атака", "Магия", "14040", "1575", "793", "96", "15", "60", "30", "0" };
            string[] Tortura = { "Демоны", "Эпический", "Атака", "Магия", "12720", "1597", "859", "96", "15", "60", "30", "0" };
            string[] Erinia = { "Демоны", "Эпический", "Атака", "Сила", "13050", "1553", "881", "103", "15", "50", "30", "0" };
            string[] Dushegub = { "Демоны", "Эпический", "Атака", "Сила", "17340", "1299", "848", "97", "15", "60", "30", "0" };
            string[] Nazana = { "Демоны", "Эпический", "Здоровье", "Сила", "21480", "859", "1013", "103", "15", "50", "45", "0" };
            string[] Baronessa = { "Демоны", "Эпический", "Защита", "Сила", "17670", "914", "1211", "95", "15", "50", "45", "0" };
            string[] Taniks = { "Демоны", "Эпический", "Поддержка", "Сила", "17010", "1189", "980", "100", "15", "50", "30", "0" };
            string[] Inferno = { "Демоны", "Эпический", "Атака", "Дух", "17670", "1476", "650", "97", "15", "60", "30", "0" };
            string[] Paidma = { "Демоны", "Эпический", "Защита", "Тьма", "17670", "826", "1299", "101", "15", "50", "45", "0" };
            string[] Vizia = { "Демоны", "Эпический", "Защита", "Тьма", "15360", "925", "1354", "93", "15", "50", "45", "0" };
            string[] Diavolisa = { "Демоны", "Редкий", "Поддержка", "Магия", "18660", "1002", "782", "110", "15", "50", "30", "0" };
            string[] Gubitel = { "Демоны", "Редкий", "Атака", "Магия", "13875", "1156", "947", "96", "15", "57", "30", "0" };
            string[] Zerber = { "Демоны", "Редкий", "Атака", "Магия", "13050", "1398", "760", "93", "15", "57", "30", "0" };
            string[] Adskiypes = { "Демоны", "Редкий", "Атака", "Дух", "14370", "1223", "837", "99", "15", "57", "30", "0" };
            string[] Markisa = { "Демоны", "Редкий", "Защита", "Дух", "17175", "870", "1013", "89", "15", "50", "30", "10" };
            string[] Ifrit = { "Демоны", "Редкий", "Здоровье", "Тьма", "18825", "815", "958", "95", "15", "50", "40", "0" };
            string[] Markis = { "Демоны", "Редкий", "Защита", "Тьма", "16845", "892", "1013", "97", "15", "50", "40", "0" };
            string[] Lutopes = { "Демоны", "Редкий", "Защита", "Тьма", "14865", "958", "1079", "92", "15", "50", "40", "0" };
            string[] malbransh = { "Демоны", "Редкий", "Атака", "Тьма", "14865", "1321", "716", "111", "15", "50", "30", "0" };
            string[] Lemur = { "Демоны", "Необычный", "Здоровье", "Магия", "18165", "639", "903", "93", "15", "50", "30", "0" };
            string[] Inkub = { "Демоны", "Необычный", "Атака", "Сила", "11235", "1145", "859", "95", "15", "50", "30", "0" };
            string[] Yamniypes = { "Демоны", "Необычный", "Здоровье", "Сила", "15690", "826", "881", "91", "15", "50", "30", "0" };
            string[] Bes = { "Демоны", "Необычный", "Защита", "Дух", "13545", "881", "969", "86", "15", "50", "30", "0" };
            string[] Skverna = { "Демоны", "Необычный", "Поддержка", "Дух", "13875", "925", "903", "91", "15", "50", "30", "0" };


            //Баннереты
            string[] LordShemfort = { "Баннереты", "Легендарный", "Здоровье", "Магия", "22305", "1079", "1013", "97", "15", "50", "40", "20" };
            string[] Setalia = { "Баннереты", "Легендарный", "Поддержка ", "Магия", "18000 ", "1024 ", "1354 ", "108 ", "15 ", "50 ", "30 ", "0 " };
            string[] Kilian = { "Баннереты", "Легендарный", "Атака ", "Магия", "13215 ", "1432 ", "1266 ", "98 ", "15 ", "63 ", "30 ", "10 " };
            string[] CherniyRyzar = { "Баннереты", "Легендарный", "Здоровье", "Сила", "22470 ", "914 ", "1167 ", "100 ", "15 ", "57 ", "50 ", "0 " };
            string[] Minaya = { "Баннереты", "Легендарный", "Поддержка", "Сила", "21645 ", "1002 ", "1134 ", "111 ", "15 ", "50 ", "40 ", "0 " };
            string[] Lougan = { "Баннереты", "Легендарный", "Здоровье", "Дух", "22140 ", "1013 ", "1090 ", "103 ", "15 ", "63 ", "40 ", "0 " };
            string[] Septimus = { "Баннереты", "Легендарный", "Атака", "Дух", "13710 ", "1674 ", "991 ", "102 ", "15 ", "63 ", "30 ", "0 " };
            string[] Rihtoff = { "Баннереты", "Легендарный", "Атака", "Дух", "18825 ", "1398 ", "925 ", "95 ", "15 ", "63 ", "30 ", "0 " };
            string[] Raylin = { "Баннереты", "Легендарный", "Поддержка", "Тьма", "22310 ", "1156 ", "1068 ", "104 ", "15 ", "50 ", "50 ", "0 " };
            string[] Baron = { "Баннереты", "Легендарный", "Атака", "Тьма", "15030 ", "1575 ", "1002 ", "90 ", "15 ", "63 ", "40 ", "0 " };
            string[] Hordin = { "Баннереты", "Эпический", "Атака", "Магия", "16845 ", "1321 ", "859 ", "95 ", "15 ", "60 ", "30 ", "0 " };
            string[] legioner = { "Баннереты", "Эпический", "Атака", "Магия", "15030 ", "1354 ", "947 ", "96 ", "15 ", "60 ", "30 ", "0 " };
            string[] Prisyajnik = { "Баннереты", "Эпический", "Защита", "Сила", "18330 ", "782 ", "1299 ", "88 ", "15 ", "50 ", "40 ", "0 " };
            string[] Sineshal = { "Баннереты", "Эпический", "Защита", "Сила", "19980 ", "705 ", "1266 ", "105 ", "15 ", "50 ", "45 ", "0 " };
            string[] kondotier = { "Баннереты", "Эпический", "Атака", "Дух", "18660 ", "1387 ", "672 ", "96 ", "15 ", "50 ", "30 ", "15 " };
            string[] Manyak = { "Баннереты", "Эпический", "Атака", "Дух", "13215", "1398", "1024", "97", "15", "60", "30", "0" };
            string[] SohatiyRyzar = { "Баннереты", "Эпический", "Поддержка", "Дух ", "22970 ", "859 ", "1046 ", "107 ", "15 ", "50 ", "30 ", "0 " };
            string[] Roana = { "Баннереты", "Эпический", "Атака", "Тьма", "16845 ", "1487 ", "694 ", "108 ", "15 ", "60 ", "30 ", "0 " };
            string[] Azur = { "Баннереты", "Эпический", "Здоровье", "Тьма", "19320 ", "958 ", "1057 ", "97 ", "15 ", "50 ", "45 ", "0 " };
            string[] Ratnik = { "Баннереты", "Эпический", "Поддержка", "Тьма", "20145 ", "1013 ", "947 ", "106 ", "15 ", "50 ", "30 ", "0 " };
            string[] Arbaletshik = { "Баннереты", "Редкий", "Атака", "Магия", "13875 ", "1167 ", "936 ", "95 ", "15 ", "57 ", "30 ", "0 " };
            string[] Valeri = { "Баннереты", "Редкий", "Поддержка", "Магия", "15855 ", "969 ", "1002 ", "98 ", "15 ", "50 ", "30 ", "0 " };
            string[] Grandmaster = { "Баннереты", "Редкий", "Здоровье", "Магия", "16185 ", "982 ", "1057 ", "100 ", "15 ", "50 ", "40 ", "0 " };
            string[] Mirmidonez = { "Баннереты", "Редкий", "Защита", "Магия", "15030 ", "804 ", "1222 ", "99 ", "15 ", "50 ", "30 ", "10 " };
            string[] Zashitnisa = { "Баннереты", "Редкий", "Защита", "Сила", "16350 ", "771 ", "1167 ", "102 ", "15 ", "50 ", "40 ", "0 " };
            string[] Kamerger = { "Баннереты", "Редкий", "Атака", "Сила", "12720 ", "1277 ", "903 ", "92 ", "15 ", "57 ", "30 ", "0 " };
            string[] Bombardir = { "Баннереты", "Редкий", "Атака", "Сила", "12555 ", "1310 ", "881 ", "98 ", "15 ", "50 ", "30 ", "10 " };
            string[] Kvestor = { "Баннереты", "Редкий", "Атака", "Сила", "13215", "1288", "859", "95", "15", "57", "30", "0" };
            string[] Katafrackt = { "Баннереты", "Редкий", "Здоровье", "Дух", "18330 ", "991 ", "815 ", "97 ", "15 ", "50 ", "40 ", "0 " };
            string[] Zavoevatel = { "Баннереты", "Редкий", "Атака", "Дух", "12225 ", "1421 ", "793 ", "99 ", "15 ", "57 ", "30 ", "0 " };
            string[] Alebardshik = { "Баннереты", "Редкий", "Атака", "Дух", "12060 ", "1178 ", "1046 ", "97 ", "15 ", "57 ", "30 ", "0 " };
            string[] Shevalie = { "Баннереты", "Редкий", "Защита", "Тьма", "16680 ", "804 ", "1112 ", "98 ", "15 ", "50 ", "30 ", "0 " };
            string[] Avangard = { "Баннереты", "Редкий", "Защита", "Тьма", "14700 ", "958 ", "1090 ", "96 ", "15 ", "50 ", "40 ", "0 " };
            string[] Marshal = { "Баннереты", "Редкий", "Здоровье", "Тьма", "20640 ", "870 ", "782 ", "90 ", "15 ", "50 ", "40 ", "0 " };
            string[] Luchnisa = { "Баннереты", "Необычный", "Атака", "Магия", "13050 ", "1156 ", "727 ", "97 ", "15 ", "50 ", "30 ", "0 " };
            string[] Ratoborez = { "Баннереты", "Необычный", "Здоровье", "Магия", "18000 ", "738 ", "815 ", "87 ", "15 ", "50 ", "30 ", "0 " };
            string[] Molvshiza = { "Баннереты", "Необычный", "Поддержка", "Магия", "14535 ", "958 ", "826 ", "96 ", "15 ", "50 ", "30 ", "0 " };
            string[] Duelyant = { "Баннереты", "Необычный", "Атака", "Сила", "11400 ", "1200 ", "793 ", "101 ", "15 ", "50 ", "30 ", "0 " };
            string[] Komandir = { "Баннереты", "Необычный", "Поддержка", "Сила", "15690 ", "936 ", "771 ", "101 ", "15 ", "50 ", "30 ", "0 " };
            string[] Skvayr = { "Баннереты", "Необычный", "Защита", "Сила", "15690 ", "760 ", "947 ", "96 ", "15 ", "50 ", "30 ", "0 " };
            string[] OgnenniyKlinok = { "Баннереты", "Необычный", "Атака", "Дух ", "10080 ", "1178 ", "903 ", "95 ", "15 ", "50 ", "30 ", "0 " };
            string[] Frontovik = { "Баннереты", "Необычный", "Защита ", "Дух", "12885 ", "595 ", "1299 ", "93 ", "15 ", "50 ", "30 ", "0 " };
            string[] Mechnik = { "Баннереты", "Обычный", "Атака ", "Магия", "8100 ", "958 ", "705 ", "100 ", "15 ", "50 ", "30 ", "0 " };
            string[] Pikiner = { "Баннереты", "Обычный", "Защита ", "Магия", "11235 ", "595 ", "859 ", "96 ", "15 ", "50 ", "30 ", "0 " };
            string[] Toporshik = { "Баннереты", "Обычный", "Здоровье ", "Сила", "15030 ", "507 ", "694 ", "92 ", "15 ", "50 ", "30 ", "0 " };
            string[] Razboynik = { "Баннереты", "Обычный", "Атака ", "Дух", "8595 ", "980 ", "650 ", "98 ", "15 ", "50 ", "30 ", "0 " };


            //Высшие эльфы
            string[] Elenaril = { "Высшие эльфы", "Легендарный", "Атака", "Магия", "14535", "1387", "1222", "96", "15", "63", "30", "0" };
            string[] Shirimaina = { "Высшие эльфы", "Легендарный", "Поддержка", "Сила", "19980", "1167", "1079", "104", "15", "50", "40", "0" };
            string[] BasilevsRoanas = { "Высшие эльфы", "Легендарный", "Атака", "Сила", "15525", "1542", "1002", "101", "15", "63", "30", "10" };
            string[] Lissandra = { "Высшие эльфы", "Легендарный", "Поддержка", "Дух", "21480", "969", "1178", "110", "15", "50", "30", "10" };
            string[] Sokolnichii = { "Высшие эльфы", "Легендарный", "Атака", "Дух", "16350", "1553", "936", "105", "15", "63", "30", "0" };
            string[] Yannika = { "Высшие эльфы", "Легендарный", "Атака", "Дух", "15525", "1487", "1057", "100", "15", "63", "30", "10" };
            string[] Itos = { "Высшие эльфы", "Легендарный", "Атака", "Тьма", "18825", "1608", "716", "99", "15", "63", "30", "10" };
            string[] Belanor = { "Высшие эльфы", "Легендарный", "Атака", "Тьма", "15195", "1520", "1046", "105", "15", "63", "30", "10" };
            string[] Arbitr = { "Высшие эльфы", "Легендарный", "Поддержка", "Тьма", "21135", "1068", "1101", "110", "15", "50", "30", "10" };
            string[] Elitniigvardeec = { "Высшие эльфы", "Эпический", "Атака", "Магия", "15030", "1531", "771", "93", "15", "60", "30", "0" };
            string[] Tairel = { "Высшие эльфы", "Эпический", "Защита", "Магия", "16185", "881", "1343", "95", "15", "50", "45", "0" };
            string[] Tenassil = { "Высшие эльфы", "Эпический", "Поддержка", "Сила", "17835", "991", "1123", "105", "15", "50", "30", "0" };
            string[] Lyuciya = { "Высшие эльфы", "Эпический", "Атака", "Сила", "14370", "1277", "1068", "93", "15", "50", "30", "20" };
            string[] Vergis = { "Высшие эльфы", "Эпический", "Защита", "Дух", "16020", "925", "1310", "98", "15", "50", "45", "0" };
            string[] Zlatostrel = { "Высшие эльфы", "Эпический", "Атака", "Дух", "14700", "1432", "892", "92", "15", "60", "30", "0" };
            string[] Perezvon = { "Высшие эльфы", "Эпический", "Атака", "Дух", "14700", "1498", "826", "101", "15", "60", "30", "0" };
            string[] Vedunya = { "Высшие эльфы", "Эпический", "Поддержка", "Тьма", "18000", "980", "1123", "100", "15", "50", "30", "0" };
            string[] Adamant = { "Высшие эльфы", "Эпический", "Атака", "Тьма", "13545", "1509", "892", "94", "15", "60", "30", "0" };
            string[] Lekar = { "Высшие эльфы", "Редкий", "Поддержка", "Магия", "17175", "881", "1002", "106", "15", "50", "30", "0" };
            string[] Mstitelnica = { "Высшие эльфы", "Редкий", "Атака", "Магия", "12225", "1398", "815", "104", "15", "57", "30", "0" };
            string[] Elein = { "Высшие эльфы", "Редкий", "Атака", "Магия", "14370", "1233", "837", "107", "15", "57", "30", "0" };
            string[] Zakonnica = { "Высшие эльфы", "Редкий", "Атака", "Магия", "13545", "1255", "870", "94", "15", "57", "30", "0" };
            string[] Princessa = { "Высшие эльфы", "Редкий", "Атака", "Сила", "12390", "1167", "1035", "94", "15", "57", "30", "0" };
            string[] Magistr = { "Высшие эльфы", "Редкий", "Поддержка", "Сила", "18000", "892", "936", "101", "15", "50", "30", "0" };
            string[] Rapira = { "Высшие эльфы", "Редкий", "Атака", "Сила", "15360", "1211", "793", "100", "15", "50", "30", "10" };
            string[] Gireya = { "Высшие эльфы", "Редкий", "Атака", "Дух", "12060", "1476", "749", "101", "15", "57", "30", "0" };
            string[] Stravnica = { "Высшие эльфы", "Редкий", "Защита", "Тьма", "15360", "881", "1123", "84", "15", "50", "30", "10" };
            string[] Strajnicamoschei = { "Высшие эльфы", "Редкий", "Поддержка", "Тьма", "18165", "859", "958", "103", "15", "50", "30", "0" };
            string[] Aristokrat = { "Высшие эльфы", "Необычный", "Атака", "Магия", "11070", "1211", "804", "96", "15", "50", "30", "0" };
            string[] Eger = { "Высшие эльфы", "Необычный", "Атака", "Дух", "14370", "1200", "595", "100", "15", "50", "30", "0" };
            string[] Strajnica = { "Высшие эльфы", "Необычный", "Атака", "Дух", "13215", "1156", "716", "92", "15", "50", "30", "0" };


            //Священный орден
            string[] Roshkar = { "Священный орден", "Легендарный", "Здоровье", "Магия", "24780", "947", "980", "100", "15", "50", "50", "0" };
            string[] Errol = { "Священный орден", "Легендарный", "Атака", "Сила", "16020", "1674", "837", "104", "15", "63", "30", "0" };
            string[] Abbatisa = { "Священный орден", "Легендарный", "Атака", "Сила", "14040", "1564", "1079", "96", "15", "63", "30", "10" };
            string[] Prepodobnaya = { "Священный орден", "Легендарный", "Защита", "Дух", "20145", "826", "1409", "93", "15", "50", "50", "10" };
            string[] Kupidus = { "Священный орден", "Легендарный", "Атака", "Дух", "18825", "1520", "804", "107", "15", "63", "30", "10" };
            string[] Nikolas = { "Священный орден", "Легендарный", "Здоровье", "Тьма", "22800", "936", "1123", "105", "15", "50", "50", "0" };
            string[] Venera = { "Священный орден", "Легендарный", "Поддержка", "Тьма", "22635", "1090", "980", "112", "15", "50", "30", "20" };
            string[] Kanonissa = { "Священный орден", "Эпический", "Защита", "Магия", "17670", "804", "1321", "89", "15", "50", "45", "0" };
            string[] Adriel = { "Священный орден", "Эпический", "Поддержка", "Магия", "18330", "1101", "980", "98", "15", "50", "30", "15" };
            string[] Houp = { "Священный орден", "Эпический", "Здоровье", "Магия", "21315", "1079", "804", "104", "15", "50", "45", "0" };
            string[] Snegocvet = { "Священный орден", "Эпический", "Поддержка", "Магия", "20310", "870", "1079", "110", "15", "50", "30", "0" };
            string[] Talliya = { "Священный орден", "Эпический", "Атака", "Магия", "12390", "1343", "1134", "98", "15", "60", "30", "0" };
            string[] Yuliana = { "Священный орден", "Эпический", "Атака", "Магия", "15360", "1398", "881", "103", "15", "60", "30", "0" };
            string[] Aotar = { "Священный орден", "Эпический", "Атака", "Сила", "14535", "1509", "826", "92", "15", "60", "30", "0" };
            string[] Relikvar = { "Священный орден", "Эпический", "Атака", "Сила", "14370", "1365", "980", "90", "15", "60", "30", "0" };
            string[] Missioner = { "Священный орден", "Эпический", "Здоровье", "Сила", "19485", "969", "1035", "96", "15", "50", "45", "0" };
            string[] Romero = { "Священный орден", "Эпический", "Защита", "Сила", "18000", "804", "1299", "99", "15", "50", "45", "0" };
            string[] LediEtessa = { "Священный орден", "Эпический", "Атака", "Сила", "13215", "1387", "1035", "99", "15", "60", "30", "0" };
            string[] Bushi = { "Священный орден", "Эпический", "Атака", "Дух", "15690", "1476", "782", "90", "15", "60", "30", "0" };
            string[] Fenaks = { "Священный орден", "Эпический", "Атака", "Дух", "13875", "1454", "925", "96", "15", "60", "30", "0" };
            string[] Psalmist = { "Священный орден", "Эпический", "Поддержка", "Дух", "18990", "1024", "1013", "103", "15", "50", "30", "0" };
            string[] Kardinal = { "Священный орден", "Эпический", "Поддержка", "Тьма", "17340", "1002", "1145", "104", "15", "50", "30", "0" };
            string[] Gromoboi = { "Священный орден", "Эпический", "Защита", "Тьма", "16350", "738", "1476", "97", "15", "50", "45", "0" };
            string[] Etel = { "Священный орден", "Редкий", "Атака", "Магия", "13545", "1189", "936", "104", "15", "57", "30", "0" };
            string[] Svidetel = { "Священный орден", "Редкий", "Поддержка", "Магия", "14865", "1134", "903", "103", "15", "50", "30", "0" };
            string[] Gospitaler = { "Священный орден", "Редкий", "Поддержка", "Магия", "17175", "1035", "848", "101", "15", "50", "30", "0" };
            string[] Kapellan = { "Священный орден", "Редкий", "Поддержка", "Сила", "15855", "1079", "892", "102", "15", "50", "30", "0" };
            string[] Lamellyar = { "Священный орден", "Редкий", "Здоровье", "Сила", "19650", "837", "881", "93", "15", "50", "40", "0" };
            string[] Hramovnik = { "Священный орден", "Редкий", "Защита", "Дух", "15855", "881", "1090", "92", "15", "50", "40", "0" };
            string[] Klirik = { "Священный орден", "Редкий", "Защита", "Дух", "14865", "793", "1244", "93", "15", "50", "40", "0" };
            string[] BoevayaJrica = { "Священный орден", "Редкий", "Поддержка", "Дух", "18165", "683", "1134", "97", "15", "50", "30", "0" }; ;
            string[] Vershitel = { "Священный орден", "Редкий", "Атака", "Дух", "11895", "1398", "837", "104", "15", "57", "30", "0" };
            string[] BelayaDeva = { "Священный орден", "Редкий", "Атака", "Дух", "11730", "1343", "903", "87", "15", "57", "30", "0" };
            string[] Igumenya = { "Священный орден", "Редкий", "Поддержка", "Дух", "16350", "991", "947", "103", "15", "50", "30", "0" };
            string[] Ispovednica = { "Священный орден", "Редкий", "Атака", "Тьма", "12060", "1409", "815", "98", "15", "57", "30", "0" };
            string[] Yusticiar = { "Священный орден", "Редкий", "Защита", "Тьма", "14700", "914", "1134", "93", "15", "50", "40", "0" };
            string[] Gonec = { "Священный орден", "Редкий", "Атака", "Тьма", "13545", "1376", "749", "96", "15", "57", "30", "0" };
            string[] Solyaris = { "Священный орден", "Редкий", "Атака", "Сила", "13545", "1244", "881", "92", "15", "57", "30", "0" };
            string[] Purgator = { "Священный орден", "Редкий", "Атака", "Магия", "13380", "1409", "727", "94", "15", "57", "30", "0" };
            string[] Kat = { "Священный орден", "Редкий", "Атака", "Дух", "10740", "1354", "958", "100", "15", "57", "30", "0" };
            string[] Velmozha = { "Священный орден", "Редкий", "Атака", "Сила", "12885", "1255", "914", "97", "15", "57", "30", "0" };
            string[] StrazhSvyatyh = { "Священный орден", "Редкий", "Защита", "Дух", "15360", "804", "1200", "97", "15", "50", "40", "0" };
            string[] Drakonis = { "Священный орден", "Редкий", "Здоровье", "Тьма", "17835", "914", "925", "100", "15", "50", "30", "0" };
            string[] Skaut = { "Священный орден", "Необычный", "Атака", "Магия", "10575", "1255", "793", "93", "15", "50", "30", "0" };
            string[] SestraBitvi = { "Священный орден", "Необычный", "Атака", "Магия", "14205", "1090", "716", "101", "15", "50", "30", "0" };
            string[] MonahIzgoi = { "Священный орден", "Необычный", "Атака", "Сила", "12225", "1244", "694", "96", "15", "50", "30", "0" };
            string[] Serjant = { "Священный орден", "Необычный", "Атака", "Сила", "12555", "1112", "804", "92", "15", "50", "30", "0" };
            string[] Mironosica = { "Священный орден", "Необычный", "Поддержка", "Сила", "13380", "947", "914", "102", "15", "50", "30", "0" };
            string[] Piligrim = { "Священный орден", "Необычный", "Поддержка", "Сила", "14865", "793", "969", "98", "15", "50", "30", "0" };
            string[] Mechenosec = { "Священный орден", "Необычный", "Атака", "Сила", "12390", "1123", "804", "92", "15", "57", "30", "0" };
            string[] Povstanec = { "Священный орден", "Необычный", "Атака", "Дух", "13215", "1178", "694", "102", "15", "50", "30", "0" };
            string[] Saracin = { "Священный орден", "Необычный", "Здоровье", "Дух", "17505", "760", "826", "98", "15", "50", "30", "0" };
            string[] Orujenosec = { "Священный орден", "Необычный", "Защита", "Дух", "15195", "793", "947", "92", "15", "50", "30", "0" };
            string[] Iomen = { "Священный орден", "Обычный", "Атака", "Магия", "9090", "903", "694", "97", "15", "50", "30", "0" }; ;
            string[] DevaBitvi = { "Священный орден", "Обычный", "Атака", "Сила", "10410", "870", "639", "98", "15", "50", "30", "0" };
            string[] Pastor = { "Священный орден", "Обычный", "Здоровье", "Сила", "10080", "837", "694", "96", "15", "50", "30", "0" };
            string[] Kneht = { "Священный орден", "Обычный", "Защита", "Дух", "12225", "650", "738", "98", "15", "50", "30", "0" };
            string[] Poslushnik = { "Священный орден", "Обычный", "Атака", "Дух", "10245", "892", "628", "83", "15", "50", "30", "0" };


            //Варвары
            //Легендарные
            string[] Altan = { "Варвары", "Легендарный", "Защита", "Магия", "20145", "837", "1398", "102", "15", "57", "50", "0" };
            string[] SkilaOkrilennaya = { "Варвары", " Легендарный", "Защита", "Магия", "19980", "859", "1387", "95", "15", "63", "40", "0" };
            string[] Kantra = { "Варвары", "Легендарный", "Защита", "Сила", "18330", "815", "1542", "99", "15", "50", "40", "20" };
            string[] Skarg = { "Варвары ", "Легендарный", "Атака", "Сила", "16185", "1630", "870", "105", "15", "63", "30", "0" };
            string[] Valkiriya = { "Варвары", "Легендарный", "Защита", "Дух", "17835", "793", "1597", "104", "15", "50", "50", "0" };
            string[] Turvold = { "Варвары", "Легендарный", "Атака", "Тьма", "17505", "1498", "914", "93", "15", "63", "40", "0" };
            string[] UrsugaOtvazhnaya = { "Варвары", "Легендарный", "Здоровье", "Тьма", "23460", "485", "1531", "108", "15", "50", "50", "0" };
            //Эпические
            string[] BarotKrovavyj = { "Варвары", "Эпический", "Здоровье", "Сила", "20475", "826", "1112", "98", "15", "50", "45", "0" };
            string[] Aina = { "Варвары", "Эпический", "Атака", "Магия", "15855", "1487", "760", "105", "15", "60", "30", "0" };
            string[] Etun = { "Варвары", "Эпический", "Здоровье", "Магия", "16680", "991", "1200", "93", "15", "50", "45", "0" };
            string[] Sikara = { "Варвары", "Эпический", "Поддержка", "Магия", "19485", "804", "1200", "101", "15", "50", "30", "15" };
            string[] Atur = { "Варвары", "Эпический", "Здоровье", "Магия", "19980", "826", "1145", "96", "15", "50", "45", "0" };
            string[] Alika = { "Варвары", "Эпический", "Атака", "Сила", "15855", "1354", "892", "101", "15", "60", "30", "0" };
            string[] Teshada = { "Варвары", "Эпический", "Защита", "Сила", "16350", "826", "1387", "96", "15", "50", "45", "0" };
            string[] Kelliya = { "Варвары", "Эпический", "Атака", "Сила", "12855", "1597", "848", "106", "15", "57", "30", "0" };
            string[] Maiv = { "Варвары", "Эпический", "Атака", "Сила", "15195", "1354", "936", "100", "15", "60", "30", "0" };
            string[] LazurnayaLedi = { "Варвары", "Эпический", "Здоровье", "Дух", "19815", "1013", "969", "92", "15", "50", "45", "0" };
            string[] Hatun = { "Варвары", "Эпический", "Поддержка", "Дух", "16350", "1024", "1189", "104", "15", "50", "30", "0" };
            string[] Valla = { "Варвары", "Эпический", "Защита", "Дух", "16845", "771", "1409", "99", "15", "60", "30", "0" };
            string[] Suvaya = { "Варвары", "Эпический", "Атака", "Тьма", "14040", "1343", "1024", "96", "15", "60", "30", "0" };
            string[] NebesnayaCharovnica = { "Варвары", "Эпический", "Поддержка", "Тьма", "18330", "958", "1123", "102", "15", "50", "30", "0" };
            //Редкие
            string[] Hozyajkadyun = { "Варвары", "Редкий", "Атака", "Магия", "14865", "1354", "683", "97", "15", "57", "30", "0" };
            string[] Yazichnica = { "Варвары", "Редкий", "Поддержка", "Магия", "19320", "892", "848", "100", "15", "50", "30", "0" };
            string[] Stareishina = { "Варвары", "Редкий", "Защита", "Магия", "14865", "914", "1123", "92", "15", "50", "40", "0" };
            string[] Nomada = { "Варвары", "Редкий", "Поддержка", "Магия", "13875", "1145", "958", "103", "15", "50", "30", "0" };
            string[] Ordinec = { "Варвары", "Редкий", "Здоровье", "Сила", "18825", "914", "859", "86", "15", "50", "30", "10" };
            string[] Voitelnica = { "Варвары", "Редкий", "Атака", "Сила", "14700", "1321", "727", "97", "15", "57", "30", "10" };
            string[] Zveroboi = { "Варвары", "Редкий", "Атака", "Сила", "15690", "1243", "749", "90", "15", "57", "30", "0" };
            string[] Mechenii = { "Варвары", "Редкий", "Поддержка", "Сила", "15855", "793", "1178", "91", "15", "50", "30", "0" };
            string[] Berserk = { "Варвары", "Редкий", "Атака", "Дух", "14535", "1266", "793", "98", "15", "57", "30", "0" };
            string[] Kochevnica = { "Варвары", "Редкий", "Здоровье", "Дух", "19650", "892", "826", "89", "15", "50", "40", "0" };
            string[] MastericaLukov = { "Варвары", "Редкий", "Атака", "Дух", "13545", "1225", "870", "96", "15", "57", "30", "0" };
            string[] Vsadnica = { "Варвары", "Редкий", "Атака", "Тьма", "15360", "1211", "793", "94", "15", "50", "30", "0" };
            string[] Buivol = { "Варвары", "Редкий", "Атака", "Тьма", "12225", "1167", "1046", "98", "15", "57", "30", "0" };
            string[] Zlobostrel = { "Варвары", "Редкий", "Атака", "Тьма", "12720", "1211", "969", "98", "15", "57", "30", "0" };
            string[] Obryadchica = { "Варвары", "Необычный", "Атака", "Магия", "13545", "1068", "782", "96", "15", "50", "30", "0" };
            string[] Dezertir = { "Варвары", "Необычный", "Атака", "Магия", "10080", "1112", "969", "96", "15", "50", "30", "0" };
            string[] DobitchicaSkalpov = { "Варвары", "Необычный", "Атака", "Магия", "14535", "980", "804", "97", "15", "50", "30", "0" };
            string[] Medium = { "Варвары", "Необычный", "Поддержка", "Сила", "10740", "1288", "749", "90", "15", "50", "30", "0" };
            string[] Dikar = { "Варвары", "Необычный", "Здоровье", "Сила", "16185", "892", "782", "93", "15", "50", "30", "0" };
            string[] Chujezemec = { "Варвары", "Необычный", "Атака", "Дух", "9255", "1299", "837", "96", "15", "50", "30", "0" };
            string[] Schitonosec = { "Варвары", "Необычный", "Защита", "Дух", "15360", "705", "1024", "89", "15", "50", "30", "0" };
            string[] Razvedchik = { "Варвары", "Необычный", "Атака", "Дух", "12390", "1112", "815", "99", "15", "50", "30", "0" };
            string[] Skitalica = { "Варвары", "Необычный", "Защита", "Дух", "14370", "870", "925", "96", "15", "50", "30", "0" };
            string[] Legit = { "Варвары", "Необычный", "Защита", "Дух", "13380", "617", "1244", "100", "15", "50", "30", "0" };
            string[] Gromila = { "Варвары", "Обычный", "Защита", "Дух", "11565", "462", "969", "91", "15", "50", "30", "0" };

            //Орды нежити           
            //Легендарные
            string[] Saito = { "Орды нежити", "Легендарный", "Атака", "Магия", "16185", "1321", "1178", "102", "15", "63", "30", "0" };
            string[] KorolGraal = { "Орды нежити", "Легендарный", "Поддержка", "Магия", "19320", "1145", "1145", "107", "15", "50", "30", "10" };
            string[] RotosSmyatennii = { "Орды нежити", "Легендарный", "Атака", "Магия", "11895", "1520", "1266", "90", "15", "63", "40", "0" };
            string[] Elegius = { "Орды нежити", "Легендарный", "Поддержка", "Магия", "22305", "881", "1211", "106", "15", "50", "30", "20" };
            string[] Skartosis = { "Орды нежити", "Легендарный", "Поддержка", "Сила", "20145", "859", "1376", "109", "15", "50", "40", "0" };
            string[] BadEl_Kazar = { "Орды нежити", "Легендарный", "Поддержка", "Сила", "20145", "1079", "1156", "102", "15", "50", "40", "20" };
            string[] Krovopiica = { "Орды нежити", "Легендарный", "Атака", "Сила", "18990", "1465", "848", "90", "15", "63", "40", "0" };
            string[] MaShalled = { "Орды нежити", "Легендарный", "Атака", "Дух", "17835", "1454", "936", "103", "15", "63", "30", "0" };
            string[] Netril = { "Орды нежити", "Легендарный", "Атака", "Дух", "17010", "1454", "991", "94", "15", "63", "40", "0" };
            string[] SyuzerenKatonn = { "Орды нежити", "Легендарный", "Атака", "Дух", "15030", "1564", "1013", "98", "15", "57", "30", "20" };
            string[] Jnivec = { "Орды нежити", "Легендарный", "Здоровье", "Дух", "26925", "859", "925", "102", "15", "50", "40", "20" };
            string[] SifiSmyatennaya = { "Орды нежити", "Легендарный", "Поддержка", "Тьма", "21480", "859", "1288", "114", "15", "50", "40", "0" };
            string[] KroshkaEnni = { "Орды нежити", "Легендарный", "Атака", "Тьма", "17835", "1597", "793", "102", "15", "63", "30", "0" };
            //Эпические
            string[] Gorgorab = { "Орды нежити", "Эпический", "Поддержка", "Магия", "17670", "1057", "1068", "97", "15", "50", "30", "0" };
            string[] Lovec = { "Орды нежити", "Эпический", "Защита", "Магия", "16845", "1002", "1178", "103", "15", "50", "45", "0" };
            string[] Sovetnik = { "Орды нежити", "Эпический", "Атака", "Магия", "14040", "1454", "914", "92", "15", "60", "30", "0" };
            string[] TemnayaEtel = { "Орды нежити", "Эпический", "Атака", "Магия", "13710", "1465", "925", "100", "15", "57", "30", "0" };
            string[] TemnayaElein = { "Орды нежити", "Эпический", "Атака", "Магия", "17010", "1365", "804", "94", "15", "60", "30", "0" };
            string[] Hask = { "Орды нежити", "Эпический", "Здоровье", "Сила", "20970", "969", "936", "98", "15", "50", "45", "0" };
            string[] Karam = { "Орды нежити", "Эпический", "Атака", "Сила", "13215", "1354", "1068", "100", "15", "60", "30", "0" };
            string[] Lich = { "Орды нежити", "Эпический", "Защита", "Сила", "18495", "694", "1376", "99", "15", "50", "45", "0" };
            string[] Heksiya = { "Орды нежити", "Эпический", "Атака", "Сила", "14205", "1564", "793", "97", "15", "60", "30", "0" };
            string[] Greshnik = { "Орды нежити", "Эпический", "Атака", "Сила", "17670", "1222", "903", "94", "15", "60", "30", "0" };
            string[] SobiratelTrupov = { "Орды нежити", "Эпический", "Поддержка", "Сила", "17175", "1167", "991", "106", "15", "50", "30", "0" };
            string[] Mavzoleinik = { "Орды нежити", "Эпический", "Поддержка", "Сила", "19485", "1057", "947", "104", "15", "50", "30", "0" };
            string[] Zelot = { "Орды нежити", "Эпический", "Поддержка", "Дух", "20640", "826", "1101", "95", "15", "50", "30", "10" };
            //Редкие
            string[] Banshi = { "Орды нежити", "Редкий", "Поддержка", "Магия", "16515", "980", "947", "92", "15", "50", "30", "0" };
            string[] Nechestivica = { "Орды нежити", "Редкий", "Атака", "Магия", "11565", "1343", "914", "99", "15", "57", "30", "0" };
            string[] LedyanayaBanshi = { "Орды нежити", "Редкий", "Атака", "Магия", "14700", "1046", "1002", "99", "15", "50", "30", "0" };
            string[] PrizrachnayaUbiica = { "Орды нежити", "Редкий", "Атака", "Магия", "13545", "1233", "892", "96", "15", "50", "30", "10" };
            string[] Vedma = { "Орды нежити", "Редкий", "Атака", "Сила", "12555", "1321", "870", "101", "15", "57", "30", "0" };
            string[] Gul = { "Орды нежити", "Редкий", "Поддержка", "Сила", "14370", "936", "1134", "110", "15", "30", "30", "0" };
            string[] Nemosch = { "Орды нежити", "Редкий", "Атака", "Сила", "13215", "1432", "716", "97", "15", "57", "30", "0" };
            string[] KostyanoiRicar = { "Орды нежити", "Редкий", "Атака", "Дух", "14370", "1090", "980", "93", "15", "57", "30", "0" };
            string[] Gnilomag = { "Орды нежити", "Редкий", "Поддержка", "Дух", "16350", "1068", "870", "100", "15", "50", "30", "15" };
            string[] Gul_reindjer = { "Орды нежити", "Редкий", "Атака", "Дух", "12390", "1443", "760", "95", "15", "57", "30", "0" };
            string[] Kadavr = { "Орды нежити", "Редкий", "Здоровье", "Дух", "20640", "617", "1035", "96", "15", "50", "40", "0" };
            string[] Strelok = { "Орды нежити", "Редкий", "Атака", "Тьма", "14205", "1421", "661", "96", "15", "57", "30", "0" };
            string[] Netopir = { "Орды нежити", "Редкий", "Здоровье", "Тьма", "20310", "925", "749", "95", "15", "50", "45", "0" };
            string[] Pustotel = { "Орды нежити", "Редкий", "Атака", "Тьма", "13050", "1299", "859", "89", "15", "57", "30", "0" };
            string[] Iskusitel = { "Орды нежити", "Редкий", "Защита", "Тьма", "16185", "628", "1321", "95", "15", "50", "40", "0" };
            string[] Hromonog = { "Орды нежити", "Редкий", "Атака", "Тьма", "13545", "1343", "782", "101", "15", "57", "30", "0" };
            string[] Amarant = { "Орды нежити", "Редкий", "Защита", "Тьма", "17505", "683", "1178", "93", "15", "50", "30", "10" };
            string[] Utoplennik = { "Орды нежити", "Редкий", "Атака", "Тьма", "13545", "1387", "738", "100", "15", "57", "30", "0" };
            //Необычные
            string[] PadshiiVoin = { "Орды нежити", "Необычный", "Атака", "Сила", "12885", "1178", "716", "107", "15", "50", "30", "0" };
            string[] Skelet = { "Орды нежити", "Необычный", "Защита", "Сила", "12555", "859", "1057", "100", "15", "50", "30", "0" };
            string[] Vulpin = { "Орды нежити", "Необычный", "Атака", "Сила", "11070", "1189", "826", "87", "15", "50", "30", "0" };
            string[] MertviiMechenosec = { "Орды нежити", "Необычный", "Защита", "Сила", "13380", "826", "1035", "100", "15", "50", "30", "0" };
            string[] Dampir = { "Орды нежити", "Необычный", "Атака", "Дух", "10410", "1068", "991", "98", "15", "50", "30", "0" };
            //Обычные
            string[] VosstavshiiRicar = { "Орды нежити", "Обычный", "Здоровье", "Магия", "13545", "551", "749", "99", "15", "50", "30", "0" };
            string[] VosstavshayaGonchaya = { "Орды нежити", "Обычный", "Атака", "Магия", "10740", "914", "573", "94", "15", "50", "30", "0" };
            string[] NechestiviiPes = { "Орды нежити", "Обычный", "Атака", "Дух", "10245", "760", "760", "94", "15", "50", "30", "0" };


            //Гномы

            string[] Trunda = { "Дворфы", "Легендарный", "Атака", "Магия", "28800", "1608", "980", "100", "15", "63", "80", "10" };
            string[] GorniiKorol = { "Дворфы", "Легендарный", "Атака", "Сила", "31050", "1432", "1112", "85", "15", "63", "90", "0" };
            string[] MolliKelner = { "Дворфы", "Легендарный", "Поддержка", "Дух", "18495", "881", "1465", "107", "15", "50", "80", "10" };
            string[] Tormin = { "Дворфы", "Легендарный", "Защита", "Тьма", "20145", "815", "1421", "94", "15", "50", "70", "20" };
            string[] Yarl = { "Дворфы", "Эпический", "Защита", "Магия", "18825", "760", "1288", "95", "15", "50", "75", "0" };
            string[] SerjantArergarda = { "Дворфы", "Эпический", "Защита", "Сила", "18495", "859", "1211", "97", "15", "50", "75", "0" };
            string[] Kamnetes = { "Дворфы", "Эпический", "Защита", "Дух", "18495", "716", "1354", "91", "15", "50", "75", "0" };
            string[] Baerdal = { "Дворфы", "Эпический", "Атака", "Тьма", "18330", "1398", "683", "94", "15", "50", "60", "0" };
            string[] GalaDolgokosaya = { "Дворфы", "Эпический", "Атака", "Тьма", "18165", "1432", "661", "97", "15", "60", "60", "0" };
            string[] Svarlivec = { "Дворфы", "Редкий", "Здоровье", "Магия", "19485", "804", "925", "95", "15", "50", "55", "0" };
            string[] SmotritelRun = { "Дворфы", "Редкий", "Здоровье", "Магия", "19155", "848", "903", "103", "15", "50", "55", "0" };
            string[] Tesak = { "Дворфы", "Редкий", "Здоровье", "Магия", "19155", "859", "892", "94", "15", "50", "55", "0" };
            string[] Deboshir = { "Дворфы", "Редкий", "Атака", "Магия", "14205", "1178", "903", "98", "15", "50", "30", "0" };
            string[] Borec = { "Дворфы", "Редкий", "Атака", "Сила", "15525", "1233", "760", "97", "15", "57", "45", "0" };
            string[] Karaulnii = { "Дворфы", "Редкий", "Защита", "Сила", "15525", "760", "1233", "99", "15", "50", "55", "0" };
            string[] Burav = { "Дворфы", "Редкий", "Атака", "Сила", "14205", "1277", "804", "86", "15", "57", "45", "0" };
            string[] Bezumec = { "Дворфы", "Редкий", "Дух", "Атака", "14040", "1343", "749", "99", "15", "57", "45", "0" };
            string[] StarshiiZaboischik = { "Дворфы", "Редкий", "Дух", "Поддержка", "18495", "848", "947", "100", "15", "50", "45", "0" };
            string[] MasterTopora = { "Дворфы", "Редкий", "Дух", "Атака", "10575", "1321", "1002", "93", "15", "57", "30", "0" };
            string[] Val = { "Дворфы", "Редкий", "Тьма", "Защита", "13875", "837", "1266", "97", "15", "50", "45", "10" };
            string[] KuznecBoli = { "Дворфы", "Редкий", "Тьма", "Атака", "14040", "1277", "815", "100", "15", "57", "45", "0" };
            string[] Dilgol = { "Дворфы", "Редкий", "Атака", "Тьма", "15525", "1046", "947", "96", "15", "57", "30", "0" };
            string[] GlorilLihoborec = { "Дворфы", "Редкий", "Атака", "Дух", "16185", "1244", "705", "90", "15", "57", "30", "0" };
            string[] DolorMudryj = { "Дворфы", "Редкий", "Поддержка", "Сила", "16845", "1035", "870", "98", "15", "50", "30", "0" };
            string[] AvirAlhimik = { "Дворфы", "Редкий", "Поддержка", "Магия", "16680", "881", "1035", "102", "15", "50", "30", "10" };
            string[] Himik = { "Дворфы", "Необычный", "Магия", "Атака", "12555", "1046", "870", "104", "15", "50", "30", "0" };
            string[] Pehotinec = { "Дворфы", "Необычный", "Сила", "Защита", "13380", "738", "1123", "87", "15", "50", "30", "0" };
            string[] Reznik = { "Дворфы", "Необычный", "Дух", "Атака", "14370", "1090", "705", "90", "15", "50", "30", "0" };
            string[] Gornyak = { "Дворфы", "Необычный", "Дух", "Атака", "8925", "1255", "903", "95", "15", "50", "30", "0" };

            //Оборотни

            string[] Norog = { "Оборотни", "Легендарная", "Защита", "Магия", "16845", "1156", "1299", "106", "15", "50", "50", "0" };
            string[] Dlinnoborod = { "Оборотни", "Легендарная", "Атака", "Магия", "17835", "1409", "980", "97", "15", "63", "30", "0" };
            string[] Hakkorn = { "Оборотни", "Легендарная", "Здоровье", "Магия", "23790", "848", "1145", "99", "15", "50", "50", "10" };
            string[] Voevoda = { "Оборотни", "Легендарная", "Защита", "Сила", "18990", "848", "1465", "102", "15", "50", "50", "10" };
            string[] Brakus = { "Оборотни", "Легендарная", "Атака", "Сила", "19816", "1465", "793", "101", "15", "63", "40", "0" };
            string[] Horonar = { "Оборотни", "Легендарная", "Здоровье", "Тьма", "27090", "815", "958", "99", "15", "57", "50", "10" };
            string[] Telec = { "Оборотни", "Эпическая", "Атака", "Магия", "17010", "1310", " 859", "101", "15", "50", "30", "15" };
            string[] Razdiratel = { "Оборотни", "Эпическая", "Поддержка", "Магия", "18495", "991", "1079", "89", "15", "50", "30", "15" };
            string[] Potroshitel = { "Оборотни", "Эпическая", "Атака", "Сила", "16020", "1299", "936", "96", "15", "60", "30", "15" };
            string[] Upryajnik = { "Оборотни", "Эпическая", "Защита", "Сила", "18660", "826", "1233", "94", "15", "50", "45", "0" };
            string[] Pogromschik = { "Оборотни", "Эпическая", "Здоровье", "Сила", "20640", "870", "1,057", "95", "15", "50", "30", "15" };
            string[] Yago = { "Оборотни", "Эпическая", "Атака", "Сила", "15195", "1365", "925", "95", "15", "50", "30", "15" };
            string[] UrsinSnegostup = { "Оборотни", "Эпическая", "Защита", "Сила", "17340", "738", "1409", "93", "15", "50", "40", "0" };
            string[] UrsinNerushimii = { "Оборотни", "Эпическая", "Защита", "Сила", "19320", "793", "1222", "94", "15", "50", "45", "0" };
            string[] StalnoiCherep = { "Оборотни", "Эпическая", "Поддержка", "Дух", "16020", "1277", "958", "111", "15", "50", "30", "0" };
            string[] Fejn = { "Оборотни", "Эпический", "Атака", "Дух", "13710", "1663", "727", "99", "15", "57", "30", "0" };
            string[] Tolstorog = { "Оборотни", "Эпическая", "Атака", "Тьма", "13545", "1498", "903", "95", "15", "60", "30", "0" };
            string[] Sedoborod = { "Оборотни", "Редкая", "Защита", "Магия", " 14700", "936", "1112", "92", "15", "50", "40", "0" };
            string[] Skotoboec = { "Оборотни", "Редкая", "Атака", "Магия", "13050", "1288", "870", "92", "15", "57", "30", "0" };
            string[] Matador = { "Оборотни", "Редкая", "Атака", "Сила", "15855", "1134", "837", "102", "15", "50", "30", "0" };
            string[] Vitorog = { "Оборотни", "Редкая", "Здоровье", "Дух", "17010", "958", "936", "96", "15", "50", "45", "0" };
            string[] Tur = { "Оборотни", "Редкая", "Поддержка", "Дух", "17175", "881", "1002", "103", "15", "50", "30", "0" };
            string[] Anker = { "Оборотни", "Редкая", "Защита", "Дух", "14700", "859", "1189", "94", "15", "50", "30", "10" };
            string[] Krovorog = { "Оборотни", "Редкая", "Здоровье", "Тьма", "17505", "870", "991", "89", "15", "50", "40", "0" };
            string[] Zaklinatel = { "Оборотни", "Необычный", "Поддержка", "Магия", "13710", "903", "936", "87", "15", "50", "30", "0" };
            string[] Satir = { "Оборотни", "Необычный", "Здоровье", "Дух", "15195", "892", "848", "83", "15", "50", "30", "0" };
            //Ящеролюды
            string[] Vergumkaar = { "Ящеролюды", "Легендарный", "Поддержка", "Дух", "22140", "914", "1189", "99", "15", "50", "50", "10" };
            string[] Drakomorf = { "Ящеролюды", "Легендарный", "Атака", "Магия", "15195", "1520", "1046", "98", "15", "63", "30", "10" };
            string[] Fu_Shan = { "Ящеролюды", "Легендарный", "Атака", "Сила", "16680", "1443", "1024", "106", "15", "63", "30", "0" };
            string[] Razen = { "Ящеролюды", "Легендарный", "Защита", "Сила", "18330", "1046", "1310", "91", "15", "50", "50", "0" };
            string[] Var_Gall = { "Ящеролюды", "Легендарный", "Защита", "Сила", "27420", "1112", "1310", "107", "15", "50", "90", "70" };
            string[] Krisk = { "Ящеролюды", "Легендарный", "Защита", "Тьма", " 19485", "760", "1520", "94", "15", "50", "50", "10" };
            string[] Djarang = { "Ящеролюды", "Эпический", " Атака", "Магия", "12885", "1608", "837", "100", "15", "50", "30", "15" };
            string[] Djareg = { "Ящеролюды", "Эпический", " Здоровье", "Магия", "23460", "683", " 1057", "96", "15", "50", "45", "0" };
            string[] Vasilisk = { "Ящеролюды", "Эпический", "Атака", "Сила", "15525 ", "1365", "903", "99", "15", "60", "30", "10" };
            string[] Dreik = { "Ящеролюды", "Эпический", "Атака", "Дух", "14040", " 1487", "881", "95", "15", "50", "30", "15" };
            string[] Djizoh = { "Ящеролюды", "Эпический", "Защита", "Дух", " 16515", " 815", " 1387", " 94", "15", "50", "45", "0" };
            string[] Jivoglot = { "Ящеролюды", "Эпический", "Поддержка", "Тьма", "18660 ", "1101", "958", "104", "15", "50", "30", "0" };
            string[] Triton = { "Ящеролюды", "Редкий", "Здоровье", "Магия", "20475", "903", "760", "101", "15", "50", "40", "0" };
            string[] Scink = { "Ящеролюды", "Редкий", "Атака", "Магия", "13380", "1310", "826", "93", "15", "57", "30", "0" };
            string[] Gator = { "Ящеролюды", "Редкий", "Поддержка", "Магия", "16515", "881", "1046", "99", "15", "50", "30", "0" };
            string[] Slizen = { "Ящеролюды", "Редкий", "Атака", "Магия", "12885", "1310", "859", "98", "15", "57", "30", "0" };
            string[] Kaiman = { "Ящеролюды", "Редкий", "Защита", "Сила", "16020", "848", "1112", "93", "15", "50", "40", "0" };
            string[] Ozernik = { "Ящеролюды", "Редкий", "Атака", "Сила", "12720", "1365", "815", "87", "15", "57", "30", "0" };
            string[] Varan = { "Ящеролюды", "Редкий", "Атака", "Сила", " 14700", "1432", "617", "96", "15", "57", "30", "0" };
            string[] Metatel = { "Ящеролюды", "Редкий", "Атака", "Дух", "13050", "1266", "892", "104", "15", "57", "30", "0" };
            string[] Sekach = { "Ящеролюды", "Редкий", "Атака", "Дух", " 13050", "1332", "892", "104", "15", "37", "30", "0" };
            string[] JelezniiYascher = { "Ящеролюды", "Редкий", "Поддежка", "Дух", "16350", "859", "1079", "90", "15", "57", "30", "0" };
            string[] Garuspik = { "Ящеролюды", "Редкий", "Поддержка", "Тьма", "18165", "859", "958", "105", "15", "50", "30", "0" };
            string[] Jivoder = { "Ящеролюды", "Необычный", "Атака", "Магия", "12885", "1255", "639", "89", "15", "50", "30", "0" };
            string[] Bolotnik = { "Ящеролюды", "Необычный", "Защита", "Магия", "13050", "716", "1167", "99", "15", "50", "30", "0" };
            string[] Salamandra = { "Ящеролюды", "Необычный", "Здоровье", "Магия", "16185", "749", "925", "94", "15", "50", "30", "0" };
            string[] Raptor = { "Ящеролюды", "Необычный", "Атака", "Дух", "12720", "1244", "661", "83", "15", "50", "30", "0" };
            string[] Troglodit = { "Ящеролюды", "Обычный", "Защита", "Дух", "9750", "760", "793", "87", "15", "50", "30", "0" };
            //Отступники
            string[] Bistofus = { "Отступники", "Легендарный", "Атака", "Сила", "14700", "1795", "804", "94", "15", "63", "30", "10" };
            string[] HozyainGrobnic = { "Отступники", "Легендарный", "Поддержка", "Дух", "18165", "1387", "980", "99", "15", "50", "30", "20" };
            string[] NarmaNetlennaya = { "Отступники", "Легендарный", "Поддержка", "Магия", "19815", "1002", "1255", "100", "15", "50", "30", "20" };
            string[] Bezdushnii = { "Отступники", "Легендарный", "Защита", "Тьма", "19650", "1013", "1255", "87", "15", "50", "50", "10" };
            string[] Gegemon = { "Отступники", "Легендарный", "Атака", "Тьма", "19155", "1487", "815", "96", "15", "63", "30", "10" };
            string[] KnyazVurlim = { "Отступники", "Легендарный", "Защита", "Тьма", "19650", "1035", "1233", "100", "15", "50", "30", "20" };
            string[] Sklepnica = { "Отступники", "Эпический", "Атака", "Магия", "14865", "1421", "892", "98", "15", "60", "30", "0" };
            string[] Despot = { "Отступники", "Эпический", "Атака", "Магия", "16350", "1443", "771", "94", "15", "60", "30", "0" };
            string[] Nekrolov = { "Отступники", "Эпический", "Атака", "Магия", "12555", "1398", "1068", "98", "15", "60", "30", "0" };
            string[] Straholyud = { "Отступники", "Эпический", "Здоровье", "Магия", "22965", "950", "815", "95", "15", "50", "45", "0" };
            string[] Sinesha = { "Отступники", "Эпический", "Поддержка", "Сила", "17340", "892", "1255", "101", "15", "50", "30", "0" };
            string[] Fatalist = { "Отступники", "Эпический", "Поддержка", "Сила", "19320", "980", "1035", "100", "15", "50", "30", "0" };
            string[] KaraulnayaSklepa = { "Отступники", "Эпический", "Защита", "Сила", "16185", "903", "1321", "98", "15", "50", "45", "0" };
            string[] Bessmertnaya = { "Отступники", "Эпический", "Защита", "Дух", "18990", "881", "1156", "92", "15", "50", "30", "0" };
            string[] Kaitis = { "Отступники", "Эпический", "Атака", "Дух", "14865", "1222", "1090", "95", "15", "60", "30", "0" };
            string[] Bezlicii = { "Отступники", "Эпический", "Атака", "Тьма", "17505", "1398", "738", "101", "15", "60", "30", "0" };
            string[] Vencenosnaya = { "Отступники", "Эпический", "Атака", "Тьма", "14535", "1509", "826", "96", "15", "60", "30", "0" };
            string[] ZolotayaJnica = { "Отступники", "Эпический", "Поддержка", "Тьма", "18495", "1134", "936", "111", "15", "50", "30", "0" };
            string[] Visper = { "Отступники", "Эпический", "Атака", "Тьма", "16020", "1443", "793", "95", "15", "60", "30", "0" };
            string[] Palach = { "Отступники", "Редкий", "Защита", "Магия", "14855", "782", "1255", "89", "15", "50", "40", "0" };
            string[] Teurg = { "Отступники", "Редкий", "Поддержка", "Магия", "18495", "947", "848", "103", "15", "50", "30", "0" };
            string[] TemnayaKoldunya = { "Отступники", "Редкий", "Атака", "Магия", "13875", "1299", "804", "94", "15", "50", "30", "0" };
            string[] RazoritelMogil = { "Отступники", "Редкий", "Здоровье", "Магия", "21135", "683", "936", "92", "15", "50", "40", "0" };
            string[] Charodeika = { "Отступники", "Редкий", "Поддержка", "Сила", "17835", "991", "848", "98", "15", "50", "30", "0" };
            string[] Gladiator = { "Отступники", "Редкий", "Атака", "Сила", "14040", "1156", "936", "97", "15", "57", "30", "0" };
            string[] Akolit = { "Отступники", "Редкий", "Поддержка", "Сила", "15195", "749", "1266", "104", "15", "50", "30", "0" };
            string[] Storoj = { "Отступники", "Редкий", "Здоровье", "Дух", "19155", "826", "925", "96", "15", "50", "40", "0" };
            string[] KrovavayaUbiica = { "Отступники", "Редкий", "Атака", "Дух", "13710", "1134", "980", "96", "15", "57", "30", "0" };
            string[] Renegatka = { "Отступники", "Редкий", "Поддержка", "Тьма", "18495", "1046", "749", "95", "15", "50", "30", "10" };
            string[] DnevnoiHodok = { "Отступники", "Редкий", "Здоровье", "Тьма", "16515", "925", "1002", "91", "15", "60", "30", "0" };
            string[] Centurion = { "Отступники", "Редкий", "Защита", "Тьма", "15690", "793", "1189", "93", "15", "50", "40", "0" };
            string[] Kultist = { "Отступники", "Необычный", "Атака", "Сила", "12390", "1167", "760", "84", "15", "50", "30", "0" };
            string[] Izuver = { "Отступники", "Необычный", "Здоровье", "Сила", "18990", "617", "870", "95", "15", "50", "30", "0" };
            string[] Gerold = { "Отступники", "Необычный", "Поддержка", "Дух", "16845", "782", "848", "99", "15", "50", "30", "0" };
            string[] Trell = { "Отступники", "Обычный", "Атака", "Магия", "9915", "958", "584", "97", "15", "50", "30", "0" };
            //Огры
            string[] DrokgulKostlyavyj = { "Племена Огринов", "Легендарный", "Поддержка", "Дух", "22965", "991", "1057", "107", "15", "50", "40", "0" };
            string[] BolshoiUn = { "Племена Огринов", "Легендарный", "Атака", "Магия", "17505", "1575", "837", "104", "15", "63", "30", "10" };
            string[] Macheha = { "Племена Огринов", "Легендарный", "Атака", "Магия", "18495", "1387", "958", "99", "15", "63", "30", "10" };
            string[] Ignatius = { "Племена Огринов", "Легендарный", "Защита", "Магия", "18825", "1057", "1266", "93", "15", "50", "40", "20" };
            string[] GurptukBorodach = { "Племена Огринов", "Легендарный", "Поддержка", "Сила", "18825", "1079", "1244", "100", "15", "50", "50", "0" };
            string[] Shemrok = { "Племена Огринов", "Легендарный", "Поддержка", "Дух", "20805", "1002", "1189", "111", "15", "50", "40", "0" };
            string[] Gurgot = { "Племена Огринов", "Легендарный", "Атака", "Тьма", "16020", "1465", "1046", "92", "15", "63", "30", "0" };
            string[] Chernolob = { "Племена Огринов", "Эпический", "Защита", "Магия", "16350", "793", "1421", "99", "15", "50", "45", "0" };
            string[] Cherepolom = { "Племена Огринов", "Эпический", "Защита", "Сила", "19320", "826", "1189", "98", "15", "50", "45", "0" };
            string[] Kostolom = { "Племена Огринов", "Эпический", "Атака", "Сила", "13875", "1498", "881", "97", "15", "60", "30", "0" };
            string[] Galkut = { "Племена Огринов", "Эпический", "Атака", "Дух", "11400", "1321", "1222", "91", "15", "60", "30", "0" };
            string[] Gratolom = { "Племена Огринов", "Эпический", "Атака", "Дух", "16020", "1409", "826", "98", "15", "60", "30", "0" };
            string[] OkkultniiVoin = { "Племена Огринов", "Эпический", "Здоровье", "Дух", "20640", "1101", "826", "98", "15", "50", "45", "0" };
            string[] GrashMolotoboi = { "Племена Огринов", "Эпический", "Защита", "Дух", "19320", "694", "1321", "94", "15", "50", "45", "0" };
            string[] Lyudoed = { "Племена Огринов", "Эпический", "Здоровье", "Тьма", "20310", "837", "1112", "98", "15", "50", "45", "0" };
            string[] Bashennik = { "Племена Огринов", "Эпический", "Здоровье", "Тьма", "23790", "760", "958", "98", "15", "50", "45", "0" };
            string[] Skalozub = { "Племена Огринов", "Редкий", "Атака", "Магия", "15525", "1211", "782", "101", "15", "57", "30", "0" };
            string[] Stopolom = { "Племена Огринов", "Редкий", "Защита", "Магия", "14535", "859", "1200", "95", "15", "50", "30", "10" };
            string[] Geval = { "Племена Огринов", "Редкий", "Защита", "Магия", "15525", "859", "1134", "90", "15", "50", "40", "0" };
            string[] Magmovik = { "Племена Огринов", "Редкий", "Атака", "Сила", "13710", "1387", "727", "93", "15", "50", "30", "15" };
            string[] Tyuremschik = { "Племена Огринов", "Редкий", "Атака", "Сила", "11235", "1299", "980", "99", "15", "57", "30", "0" };
            string[] Yarosten = { "Племена Огринов", "Редкий", "Поддержка", "Дух", "14865", "1024", "1013", "100", "15", "50", "40", "0" };
            string[] Onagr = { "Племена Огринов", "Редкий", "Атака", "Дух", "14040", "1211", "881", "90", "15", "50", "40", "0" };
            string[] Myasnik = { "Племена Огринов", "Редкий", "Поддержка", "Дух", "14535", "1024", "1035", "94", "15", "50", "30", "10" };
            string[] Kamneshkur = { "Племена Огринов", "Редкий", "Здоровье", "Тьма", "19485", "892", "837", "95", "15", "50", "30", "10" };
            string[] Revoglas = { "Племена Огринов", "Редкий", "Поддержка", "Тьма", "16515", "1013", "914", "99", "15", "50", "30", "15" };
            string[] Lyutozver = { "Племена Огринов", "Редкий", "Поддержка", "Магия", "17175", "947", "936", "97", "15", "50", "30", "10" };
            string[] Ogr = { "Племена Огринов", "Необычный", "Атака", "Магия", "14535", "1079", "705", "92", "15", "50", "30", "0" };
            string[] Moroznik = { "Племена Огринов", "Необычный", "Поддержка", "Магия", "14865", "1046", "716", "96", "15", "50", "30", "0" };
            string[] Starovlas = { "Племена Огринов", "Необычный", "Защита", "Сила", "14040", "716", "1101", "91", "15", "50", "30", "0" };
            string[] Pustobryuh = { "Племена Огринов", "Необычный", "Здоровье", "Сила", "18000", "683", "870", "92", "15", "50", "30", "0" };
            string[] Tolkach = { "Племена Огринов", "Необычный", "Атака", "Дух", "11400", "1156", "837", "93", "15", "50", "30", "0" };

            //Темные эльфы
            string[] Reya = { "Темные Эльфы", "Легендарный", "Атака", "Магия", "15195", "1343", "1222", "98", "15", "63", "40", "0" };
            string[] Lanakis = { "Темные Эльфы", "Легендарный", "Поддержка", "Магия", "20145", "1255", "980", "108", "15", "50", "30", "0" };
            string[] Foli = { "Темные Эльфы", "Легендарный", "Атака", "Магия", "15030", "1476", "1101", "105", "15", "63", "30", "0" };
            string[] Zaviya = { "Темные Эльфы", "Легендарный", "Атака", "Сила", "18660", "1586", "749", "105", "15", "63", "30", "10" };
            string[] VizirOvelis = { "Темные Эльфы", "Легендарный", "Атака", "Сила", "16350", "1476", "1013", "101", "15", "63", "40", "0" };
            string[] Astralit = { "Темные Эльфы", "Легендарный", "Атака", "Дух", "17175", "1487", "947", "102", "15", "63", "30", "10" };
            string[] CaricaEva = { "Темные Эльфы", "Легендарный", "Атака", "Дух", "15690", "1696", "837", "101", "15", "63", "30", "10" };
            string[] KnyazNochi = { "Темные Эльфы", "Легендарный", "Поддержка", "Дух", "18825", "1211", "1112", "101", "15", "50", "40", "0" };
            string[] Yasnovidyaschaya = { "Темные Эльфы", "Легендарный", "Поддержка", "Тьма", "18165", "1332", "1035", "115", "15", "50", "45", "0" };
            string[] VisiksaNepokornaya = { "Темные Эльфы", "Легендарный", "Защита", "Тьма", "17175", "958", "1476", "97", "15", "50", "50", "0" };
            string[] LidiyaVosstavshaya = { "Темные Эльфы", "Легендарный", "Поддержка", "Тьма", "19815", "1002", "1255", "100", "15", "50", "30", "20" };
            string[] KapitanTemila = { "Темные Эльфы", "Эпический", "Здоровье", "Магия", "18825", "936", "1112", "96", "15", "50", "45", "0" };
            string[] Arahnid = { "Темные Эльфы", "Эпический", "Поддержка", "Сила", "18330", "1211", "870", "91", "15", "50", "30", "15" };
            string[] Luriya = { "Темные Эльфы", "Эпический", "Атака", "Дух", "13050", "1487", "947", "104", "15", "50", "30", "10" };
            string[] Kajden = { "Темные Эльфы", "Эпический", "Защита", "Магия", "16350", "837", "1376", "95", "15", "50", "30", "15" };
            string[] BagrovayaMaska = { "Темные Эльфы", "Эпический", "Защита", "Дух", "15690", "727", "1531", "85", "15", "50", "30", "15" };
            string[] Ohranitel = { "Темные Эльфы", "Эпический", "Защита", "Дух", "17340", "870", "1277", "98", "15", "50", "45", "0" };
            string[] Iskatel = { "Темные Эльфы", "Эпический", "Атака", "Дух", "16350", "1299", "914", "91", "15", "60", "30", "0" };
            string[] Krestovik = { "Темные Эльфы", "Эпический", "Поддержка", "Дух", "18330", "903", "1178", "105", "15", "50", "30", "0" };
            string[] Lua = { "Темные Эльфы", "Эпический", "Атака", "Тьма", "14535", "1564", "771", "97", "15", "60", "30", "0" };
            string[] Sailar = { "Темные Эльфы", "Эпический", "Поддержка", "Тьма", "18165", "1123", "969", "105", "15", "50", "30", "0" };
            string[] MadamSerris = { "Темные Эльфы", "Эпический", "Поддержка", "Тьма", "19650", "826", "1167", "100", "15", "50", "30", "15" };
            string[] VisshiiSudya = { "Темные Эльфы", "Редкий", "Атака", "Магия", "12225", "1476", "738", "103", "15", "57", "30", "0" };
            string[] Kael = { "Темные Эльфы", "Редкий", "Атака", "Магия", "13710", "1200", "914", "103", "15", "57", "30", "0" };
            string[] Mistik = { "Темные Эльфы", "Редкий", "Поддержка", "Сила", "16515", "804", "1123", "88", "15", "50", "30", "10" };
            string[] StalnayaTetiva = { "Темные Эльфы", "Редкий", "Атака", "Сила", "12720", "1365", "815", "100", "15", "57", "30", "0" };
            string[] HozyaikaDush = { "Темные Эльфы", "Редкий", "Поддержка", "Дух", "15360", "1046", "958", "103", "15", "50", "30", "0" };
            string[] Vorojeya = { "Темные Эльфы", "Редкий", "Поддержка", "Дух", "16515", "914", "1013", "101", "15", "50", "30", "0" };
            string[] Strannik = { "Темные Эльфы", "Редкий", "Атака", "Дух", "13050", "1443", "716", "96", "15", "57", "30", "0" };
            string[] HolodnoeSerdce = { "Темные Эльфы", "Редкий", "Атака", "Тьма", "13710", "1376", "738", "94", "15", "57", "30", "0" };
            string[] Paragon = { "Темные Эльфы", "Редкий", "Защита", "Тьма", "14370", "958", "1112", "96", "15", "50", "30", "0" };
            string[] Derjatel = { "Темные Эльфы", "Редкий", "Защита", "Тьма", "16185", "672", "1277", "93", "15", "50", "40", "0" };
            string[] Jalo = { "Темные Эльфы", "Редкий", "Атака", "Тьма", "12060", "1409", "815", "95", "15", "57", "30", "0" };
            string[] Muchenica = { "Темные Эльфы", "Редкий", "Здоровье", "Тьма", "19320", "969", "771", "102", "15", "50", "40", "0" };
            string[] Kosa = { "Темные Эльфы", "Редкий", "Атака", "Тьма", "13710", "1156", "958", "100", "15", "57", "30", "0" };
            string[] Snaiper = { "Темные Эльфы", "Необычный", "Атака", "Магия", "12555", "1211", "705", "97", "15", "57", "30", "0" };
            string[] Samodiva = { "Темные Эльфы", "Необычный", "Атака", "Сила", "12225", "1123", "815", "92", "15", "50", "30", "0" };
            string[] Igla = { "Темные Эльфы", "Необычный", "Атака", "Сила", "12555", "1057", "859", "89", "15", "50", "30", "0" };
            string[] Sledopit = { "Темные Эльфы", "Обычный", "Атака", "Магия", "10740", "815", "672", "96", "15", "50", "30", "0" };
            string[] Reindjer = { "Темные Эльфы", "Обычный", "Атака", "Сила", "12720", "815", "540", "92", "15", "50", "30", "0" };
            string[] UbiicaMagov = { "Темные Эльфы", "Обычный", "Атака", "Дух", "8265", "881", "771", "102", "15", "50", "30", "0" };
            //Орки
            string[] KolduniyaKrila = { "Орки", "Легендарный", "Поддержка", "Магия", "16680", "1244", "1222", "99", "15", "57", "30", "0" };
            string[] Grogak = { "Орки", "Легендарный", "Атака", "Магия", "15690", "1487", "1046", "96", "15", "63", "30", "10" };
            string[] Tila = { "Орки", "Легендарный", "Поддержка", "Магия", "21975", "892", "1222", "92", "15", "63", "30", "0" };
            string[] Robar = { "Орки", "Легендарный", "Атака", "Сила", "18990", "1619", "694", "87", "15", "63", "30", "10" };
            string[] Ataman = { "Орки", "Легендарный", "Поддержка", "Тьма", "22305", "914", "1178", "100", "15", "50", "30", "20" };
            string[] Hangar = { "Орки", "Легендарный", "Здоровье", "Тьма", "21975", "826", "1288", "98", "15", "50", "45", "10" };
            string[] VelikiiGalek = { "Орки", "Эпический", "Атака", "Магия", "15195", "1332", "958", "98", "15", "60", "30", "0" };
            string[] Muchitel = { "Орки", "Эпический", "Здоровье", "Дух", "19980", "881", "1090", "96", "15", "60", "30", "0" };
            string[] Zargala = { "Орки", "Эпический", "Атака", "Сила", "16680", "1398", "793", "103", "15", "60", "30", "0" };
            string[] KrovavoePero = { "Орки", "Эпический", "Атака", "Сила", "13,875", "1542", "837", "102", "15", "60", "30", "0" };
            string[] Trofeischica = { "Орки", "Эпический", "Атака", "Сила", "13545", "1531", "870", "98", "15", "60", "30", "0" };
            string[] Shamanka = { "Орки", "Эпический", "Поддержка", "Сила", "17505", "1112", "1024", "106", "15", "50", "30", "0" };
            string[] ZverUjasa = { "Орки", "Эпический", "Здоровье", "Дух", "20970", "1057", "848", "93", "15", "60", "30", "0" };
            string[] Vrask = { "Орки", "Эпический", "Здоровье", "Дух", "23460", "870", "870", "97", "15", "50", "45", "0" };
            string[] PustinnayaRazboinica = { "Орки", "Эпический", "Защита", "Дух", "15030", "936", "1365", "94", "15", "50", "45", "0" };
            string[] Prorochica = { "Орки", "Эпический", "Поддержка", "Тьма", "19320", "1145", "870", "104", "15", "50", "30", "0" };
            string[] TuhakSkitalec = { "Орки", "Эпический", "Атака", "Тьма", "16020", "1365", "870", "97", "15", "60", "30", "0" };
            string[] PevchiiSmerti = { "Орки", "Редкий", "Здоровье", "Магия", "19650", "815", "903", "89", "15", "50", "40", "0" };
            string[] Rubaka = { "Орки", "Редкий", "Атака", "Магия", "15855", "1046", "925", "99", "15", "57", "30", "0" };
            string[] Galek = { "Орки", "Редкий", "Атака", "Магия", "13710", "1200", "914", "103", "15", "57", "30", "0" };
            string[] Shipogolovii = { "Орки", "Редкий", "Атака", "Магия", "11895", "1465", "771", "102", "15", "50", "40", "0" };
            string[] Latnik = { "Орки", "Редкий", "Здоровье", "Сила", "18825", "947", "826", "104", "15", "50", "40", "0" };
            string[] StorojevoiVarg = { "Орки", "Редкий", "Атака", "Сила", "12225", "1509", "705", "98", "15", "57", "30", "0" };
            string[] Drevorub = { "Орки", "Редкий", "Атака", "Сила", "13215", "1277", "870", "95", "15", "57", "30", "0" };
            string[] Adept = { "Орки", "Редкий", "Атака", "Сила", "11565", "1365", "892", "85", "15", "57", "30", "0" };
            string[] Naletchica = { "Орки", "Редкий", "Атака", "Дух", "14205", "1156", "925", "92", "15", "50", "30", "10" };
            string[] Totemnica = { "Орки", "Редкий", "Поддержка", "Дух", "14700", "1002", "1046", "94", "15", "50", "30", "10" };
            string[] Veteran = { "Орки", "Редкий", "Защита", "Тьма", "15360", "683", "1321", "97", "15", "57", "30", "0" };
            string[] Ohotnica = { "Орки", "Редкий", "Атака", "Тьма", "11895", "1310", "925", "94", "15", "57", "30", "0" };
            string[] SHip = { "Орки", "Редкий", "Атака", "Тьма", "13380", "1398", "738", "94", "15", "57", "30", "0" };
            string[] Dityatmy = { "Орки", "Редкий", "Атака", "Дух", "12555", "1288", "903", "94", "15", "57", "30", "0" };
            string[] Vandal = { "Орки", "Необычный", "Здоровье", "Магия", "18990", "716", "771", "94", "15", "50", "30", "0" };
            string[] Zagonschica = { "Орки", "Необычный", "Атака", "Сила", "14700", "1134", "639", "94", "15", "50", "30", "0" };
            string[] Golovorez = { "Орки", "Необычный", "Атака", "Дух", "12225", "1189", "749", "88", "15", "50", "30", "0" };
            string[] Voyaka = { "Орки", "Обычный", "Защита", "Магия", "13215", "584", "738", "91", "15", "50", "30", "0" };


            //Выбор героев.
            //Демоны
            if (cb_HeroName.SelectedIndex == 0)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kaimer[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kaimer;
                }

            }
            if (cb_HeroName.SelectedIndex == 1)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Izlimor[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.izlimor;
                }

            }
            if (cb_HeroName.SelectedIndex == 2)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Drexstar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.drexstar;
                }

            }
            if (cb_HeroName.SelectedIndex == 3)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kandrafon[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kandrafon;
                }

            }
            if (cb_HeroName.SelectedIndex == 4)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mortu[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mortu;
                }

            }
            if (cb_HeroName.SelectedIndex == 5)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Shazar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Shazar;
                }

            }
            if (cb_HeroName.SelectedIndex == 6)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lilith[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lilith;
                }

            }
            if (cb_HeroName.SelectedIndex == 7)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Krutraxa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Krutraxa;
                }

            }
            if (cb_HeroName.SelectedIndex == 8)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Initve[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Initve;
                }

            }
            if (cb_HeroName.SelectedIndex == 9)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Alura[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Alura;
                }

            }
            if (cb_HeroName.SelectedIndex == 10)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tortura[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tortura;
                }

            }
            if (cb_HeroName.SelectedIndex == 11)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Erinia[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Erinia;
                }

            }
            if (cb_HeroName.SelectedIndex == 12)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dushegub[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dushegub;
                }

            }
            if (cb_HeroName.SelectedIndex == 13)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Nazana[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Nazana;
                }

            }
            if (cb_HeroName.SelectedIndex == 14)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Baronessa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Baronessa;
                }

            }
            if (cb_HeroName.SelectedIndex == 15)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Taniks[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tanix;
                }

            }
            if (cb_HeroName.SelectedIndex == 16)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Inferno[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Inferno;
                }

            }
            if (cb_HeroName.SelectedIndex == 17)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Paidma[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Paidma;
                }

            }
            if (cb_HeroName.SelectedIndex == 18)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vizia[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vizia;
                }

            }
            if (cb_HeroName.SelectedIndex == 19)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Diavolisa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Diavolisa;
                }

            }
            if (cb_HeroName.SelectedIndex == 20)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gubitel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gubitel;
                }

            }
            if (cb_HeroName.SelectedIndex == 21)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zerber[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zerber;
                }

            }
            if (cb_HeroName.SelectedIndex == 22)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Adskiypes[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.adskiypes;
                }

            }
            if (cb_HeroName.SelectedIndex == 23)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Markisa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Markisa;
                }

            }
            if (cb_HeroName.SelectedIndex == 24)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ifrit[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ifrit;
                }

            }
            if (cb_HeroName.SelectedIndex == 25)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Markis[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Markis;
                }

            }
            if (cb_HeroName.SelectedIndex == 26)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lutopes[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lutopes;
                }

            }
            if (cb_HeroName.SelectedIndex == 27)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = malbransh[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Malbransh;
                }

            }
            if (cb_HeroName.SelectedIndex == 28)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lemur[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lemur;
                }

            }
            if (cb_HeroName.SelectedIndex == 29)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Inkub[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Inkub;
                }

            }
            if (cb_HeroName.SelectedIndex == 30)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yamniypes[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Yamnyipes;
                }

            }
            if (cb_HeroName.SelectedIndex == 31)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bes[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bes;
                }

            }
            if (cb_HeroName.SelectedIndex == 32)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skverna[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skverna;
                }

            }
            //Баннереты
            if (cb_HeroName.SelectedIndex == 33)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = LordShemfort[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Shemfort;
                }

            }
            if (cb_HeroName.SelectedIndex == 34)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Setalia[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Setalia;
                }

            }
            if (cb_HeroName.SelectedIndex == 35)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kilian[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kilian;
                }

            }
            if (cb_HeroName.SelectedIndex == 36)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = CherniyRyzar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.CherniyRyzar;
                }

            }
            if (cb_HeroName.SelectedIndex == 37)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Minaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Minaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 38)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lougan[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lougan;
                }

            }
            if (cb_HeroName.SelectedIndex == 39)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Septimus[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Septimus;
                }

            }
            if (cb_HeroName.SelectedIndex == 40)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Rihtoff[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Rihtoff;
                }

            }
            if (cb_HeroName.SelectedIndex == 41)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Raylin[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Raylin;
                }

            }
            if (cb_HeroName.SelectedIndex == 42)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Baron[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Baron;
                }

            }
            if (cb_HeroName.SelectedIndex == 43)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hordin[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hordin;
                }

            }
            if (cb_HeroName.SelectedIndex == 44)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = legioner[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Legioner;
                }

            }
            if (cb_HeroName.SelectedIndex == 45)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Prisyajnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Prisyajnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 46)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sineshal[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sineshal;
                }

            }
            if (cb_HeroName.SelectedIndex == 47)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = kondotier[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kondoter;
                }

            }
            if (cb_HeroName.SelectedIndex == 48)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SohatiyRyzar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sohatiy;
                }

            }
            if (cb_HeroName.SelectedIndex == 49)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Roana[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Roana;
                }

            }
            if (cb_HeroName.SelectedIndex == 50)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Azur[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Azur;
                }

            }
            if (cb_HeroName.SelectedIndex == 51)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ratnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ratnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 52)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Arbaletshik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Arbaletchik;
                }

            }
            if (cb_HeroName.SelectedIndex == 53)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Valeri[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Valeri;
                }

            }
            if (cb_HeroName.SelectedIndex == 54)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Grandmaster[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Grandmaster;
                }

            }
            if (cb_HeroName.SelectedIndex == 55)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mirmidonez[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mirmidonez;
                }

            }
            if (cb_HeroName.SelectedIndex == 56)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zashitnisa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zashitnisa;
                }

            }
            if (cb_HeroName.SelectedIndex == 57)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kamerger[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kamerger;
                }

            }
            if (cb_HeroName.SelectedIndex == 58)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bombardir[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bombardir;
                }

            }
            if (cb_HeroName.SelectedIndex == 59)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Katafrackt[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Katafract;
                }

            }
            if (cb_HeroName.SelectedIndex == 60)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zavoevatel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Savoevatel;
                }

            }
            if (cb_HeroName.SelectedIndex == 61)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Alebardshik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Alebardshik;
                }

            }
            if (cb_HeroName.SelectedIndex == 62)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Shevalie[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Shevalie;
                }

            }
            if (cb_HeroName.SelectedIndex == 63)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Avangard[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Avangard;
                }

            }
            if (cb_HeroName.SelectedIndex == 64)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Marshal[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Marshal;
                }

            }
            if (cb_HeroName.SelectedIndex == 65)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Luchnisa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Luchniza;
                }

            }
            if (cb_HeroName.SelectedIndex == 66)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ratoborez[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ratoborez;
                }

            }
            if (cb_HeroName.SelectedIndex == 67)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Molvshiza[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Molvshiza;
                }

            }
            if (cb_HeroName.SelectedIndex == 68)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Duelyant[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.duelyant;
                }

            }
            if (cb_HeroName.SelectedIndex == 69)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Komandir[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.komandir;
                }

            }
            if (cb_HeroName.SelectedIndex == 70)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skvayr[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skvair;
                }

            }
            if (cb_HeroName.SelectedIndex == 71)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = OgnenniyKlinok[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.ognenniyklinok;
                }

            }
            if (cb_HeroName.SelectedIndex == 72)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Frontovik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.frontovik;
                }

            }
            if (cb_HeroName.SelectedIndex == 73)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mechnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.mechnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 74)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Pikiner[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Pikiner;
                }

            }
            if (cb_HeroName.SelectedIndex == 75)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Toporshik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Toporshik;
                }

            }
            if (cb_HeroName.SelectedIndex == 76)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Razboynik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Razboynik;
                }

            }
            if (cb_HeroName.SelectedIndex == 465)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kvestor[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kvestor;
                }

            }
            if (cb_HeroName.SelectedIndex == 487)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Manyak[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Manyak;
                }

            }
            //Высшие эльфы
            if (cb_HeroName.SelectedIndex == 77)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Elenaril[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Elenaril;
                }

            }
            if (cb_HeroName.SelectedIndex == 78)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Shirimaina[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Shirimayna;
                }

            }
            if (cb_HeroName.SelectedIndex == 79)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = BasilevsRoanas[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Basilevs;
                }

            }
            if (cb_HeroName.SelectedIndex == 80)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lissandra[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lissandra;
                }

            }
            if (cb_HeroName.SelectedIndex == 81)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sokolnichii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sokolnichiy;
                }

            }
            if (cb_HeroName.SelectedIndex == 82)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yannika[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Yannika;
                }

            }
            if (cb_HeroName.SelectedIndex == 83)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Itos[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Itos;
                }

            }
            if (cb_HeroName.SelectedIndex == 84)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Belanor[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Belanor;
                }

            }
            if (cb_HeroName.SelectedIndex == 85)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Arbitr[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Arbitr;
                }

            }
            if (cb_HeroName.SelectedIndex == 86)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Elitniigvardeec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.ElitniyGvardeez;
                }

            }
            if (cb_HeroName.SelectedIndex == 87)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tairel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tairel;
                }

            }
            if (cb_HeroName.SelectedIndex == 88)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tenassil[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tennasil;
                }

            }
            if (cb_HeroName.SelectedIndex == 89)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lyuciya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lusia;
                }

            }
            if (cb_HeroName.SelectedIndex == 90)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vergis[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vergis;
                }

            }
            if (cb_HeroName.SelectedIndex == 91)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zlatostrel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zlatostrel;
                }

            }
            if (cb_HeroName.SelectedIndex == 92)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Perezvon[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Perezvon;
                }

            }
            if (cb_HeroName.SelectedIndex == 93)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vedunya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vedunia;
                }

            }
            if (cb_HeroName.SelectedIndex == 94)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Adamant[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Adamant;
                }

            }
            if (cb_HeroName.SelectedIndex == 95)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lekar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lekar;
                }

            }
            if (cb_HeroName.SelectedIndex == 96)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mstitelnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mstitelniza;
                }

            }
            if (cb_HeroName.SelectedIndex == 97)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Elein[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Elein;
                }

            }
            if (cb_HeroName.SelectedIndex == 98)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zakonnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zakonniza;
                }

            }
            if (cb_HeroName.SelectedIndex == 99)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Princessa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Prinzessa;
                }

            }
            if (cb_HeroName.SelectedIndex == 100)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Magistr[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Magistr;
                }

            }
            if (cb_HeroName.SelectedIndex == 101)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Rapira[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Rapira;
                }

            }
            if (cb_HeroName.SelectedIndex == 102)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gireya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Girea;
                }

            }
            if (cb_HeroName.SelectedIndex == 103)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Stravnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Stravnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 104)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Strajnicamoschei[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.StrajnicaMoshey;
                }

            }
            if (cb_HeroName.SelectedIndex == 105)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Aristokrat[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Aristokrat;
                }

            }
            if (cb_HeroName.SelectedIndex == 106)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Eger[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Eger;
                }

            }
            if (cb_HeroName.SelectedIndex == 107)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Strajnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Strajnica;
                }

            }
            //Священный орден
            if (cb_HeroName.SelectedIndex == 108)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Roshkar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Roshcard_the_Tower;
                }

            }
            if (cb_HeroName.SelectedIndex == 109)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Errol[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Errol;
                }

            }
            if (cb_HeroName.SelectedIndex == 110)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Abbatisa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Abbatisa;
                }

            }
            if (cb_HeroName.SelectedIndex == 111)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Prepodobnaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Prepodobnaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 112)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kupidus[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Cupidus;
                }

            }
            if (cb_HeroName.SelectedIndex == 113)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Nikolas[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Nikolas;
                }

            }
            if (cb_HeroName.SelectedIndex == 114)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Venera[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Venera;
                }

            }
            if (cb_HeroName.SelectedIndex == 115)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kanonissa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Canoness;
                }

            }
            if (cb_HeroName.SelectedIndex == 116)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Adriel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Adriel;
                }

            }
            if (cb_HeroName.SelectedIndex == 117)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Houp[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hope;
                }

            }
            if (cb_HeroName.SelectedIndex == 118)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Snegocvet[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Snegocvet;
                }

            }
            if (cb_HeroName.SelectedIndex == 119)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Talliya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tallia;
                }

            }
            if (cb_HeroName.SelectedIndex == 120)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yuliana[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Juliana;
                }

            }
            if (cb_HeroName.SelectedIndex == 121)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Aotar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Aothar;
                }

            }
            if (cb_HeroName.SelectedIndex == 122)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Relikvar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Relickvar;
                }

            }
            if (cb_HeroName.SelectedIndex == 123)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Missioner[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Missionary;
                }

            }
            if (cb_HeroName.SelectedIndex == 124)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Romero[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Romero;
                }

            }
            if (cb_HeroName.SelectedIndex == 125)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = LediEtessa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lady_Etessa;
                }

            }
            if (cb_HeroName.SelectedIndex == 126)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bushi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bushi;
                }

            }
            if (cb_HeroName.SelectedIndex == 127)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Fenaks[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Fenax;
                }

            }
            if (cb_HeroName.SelectedIndex == 128)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Psalmist[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Psalmist;
                }

            }
            if (cb_HeroName.SelectedIndex == 129)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kardinal[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Cardinal;
                }

            }
            if (cb_HeroName.SelectedIndex == 130)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gromoboi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lightsworn;
                }

            }
            if (cb_HeroName.SelectedIndex == 131)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Etel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ethel;
                }

            }
            if (cb_HeroName.SelectedIndex == 132)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Svidetel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Svidetel;
                }

            }
            if (cb_HeroName.SelectedIndex == 133)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gospitaler[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hospitaller;
                }

            }
            if (cb_HeroName.SelectedIndex == 134)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kapellan[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Chaplain;
                }

            }
            if (cb_HeroName.SelectedIndex == 135)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lamellyar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lamellar;
                }

            }
            if (cb_HeroName.SelectedIndex == 136)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hramovnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hramovnick;
                }

            }
            if (cb_HeroName.SelectedIndex == 137)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Klirik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Klirick;
                }

            }
            if (cb_HeroName.SelectedIndex == 138)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = BoevayaJrica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.BoevayaJrica;
                }

            }
            if (cb_HeroName.SelectedIndex == 139)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vershitel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vershitel;
                }

            }
            if (cb_HeroName.SelectedIndex == 140)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = BelayaDeva[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.BelayaDeva;
                }

            }
            if (cb_HeroName.SelectedIndex == 141)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Igumenya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Igumeniya;
                }

            }
            if (cb_HeroName.SelectedIndex == 142)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ispovednica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ispovednica;
                }

            }
            if (cb_HeroName.SelectedIndex == 143)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yusticiar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Justiciar;
                }

            }
            if (cb_HeroName.SelectedIndex == 144)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gonec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Honec;
                }

            }
            if (cb_HeroName.SelectedIndex == 145)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skaut[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skaut;
                }

            }
            if (cb_HeroName.SelectedIndex == 146)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SestraBitvi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.SestraBitvy;
                }

            }
            if (cb_HeroName.SelectedIndex == 147)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = MonahIzgoi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.MonaxIsgoy;
                }

            }
            if (cb_HeroName.SelectedIndex == 148)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Serjant[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Serjant;
                }

            }
            if (cb_HeroName.SelectedIndex == 149)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mironosica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mironosica;
                }

            }
            if (cb_HeroName.SelectedIndex == 150)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Piligrim[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Piligrim;
                }

            }
            if (cb_HeroName.SelectedIndex == 151)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mechenosec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mechenosec;
                }

            }
            if (cb_HeroName.SelectedIndex == 152)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Povstanec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Povstanec;
                }

            }
            if (cb_HeroName.SelectedIndex == 153)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Saracin[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Saracin;
                }

            }
            if (cb_HeroName.SelectedIndex == 154)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Orujenosec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Orugenosec;
                }

            }
            if (cb_HeroName.SelectedIndex == 155)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Iomen[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ioman;
                }

            }
            if (cb_HeroName.SelectedIndex == 156)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = DevaBitvi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.DevaBitvy;
                }

            }
            if (cb_HeroName.SelectedIndex == 157)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Pastor[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Pastor;
                }

            }
            if (cb_HeroName.SelectedIndex == 158)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kneht[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kneht;
                }

            }
            if (cb_HeroName.SelectedIndex == 159)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Poslushnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Poslushnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 466)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Solyaris[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Solaris;
                }

            }
            if (cb_HeroName.SelectedIndex == 467)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Purgator[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Purgator;
                }

            }
            if (cb_HeroName.SelectedIndex == 468)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kat[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kat;
                }

            }
            if (cb_HeroName.SelectedIndex == 469)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Velmozha[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Velmoja;
                }

            }
            if (cb_HeroName.SelectedIndex == 470)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = StrazhSvyatyh[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.StrazhSvyatyh;
                }

            }
            if (cb_HeroName.SelectedIndex == 471)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Drakonis[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Draconis;
                }

            }
            //Варвары
            if (cb_HeroName.SelectedIndex == 160)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Altan[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Altan;
                }

            }
            if (cb_HeroName.SelectedIndex == 161)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SkilaOkrilennaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.SkilaOkr;
                }

            }
            if (cb_HeroName.SelectedIndex == 162)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kantra[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kantra;
                }

            }
            if (cb_HeroName.SelectedIndex == 163)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skarg[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skarg;
                }

            }
            if (cb_HeroName.SelectedIndex == 164)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Valkiriya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Valkiria;
                }

            }
            if (cb_HeroName.SelectedIndex == 165)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Turvold[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Turvold;
                }

            }
            if (cb_HeroName.SelectedIndex == 166)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Aina[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Aina;
                }

            }
            if (cb_HeroName.SelectedIndex == 167)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Etun[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Etun;
                }

            }
            if (cb_HeroName.SelectedIndex == 168)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sikara[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sikara;
                }

            }
            if (cb_HeroName.SelectedIndex == 169)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Atur[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Atur;
                }

            }
            if (cb_HeroName.SelectedIndex == 170)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Alika[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Alika;
                }

            }
            if (cb_HeroName.SelectedIndex == 171)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Teshada[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Teshada;
                }

            }
            if (cb_HeroName.SelectedIndex == 172)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kelliya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kellia;
                }

            }
            if (cb_HeroName.SelectedIndex == 173)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Maiv[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Maiv;
                }

            }
            if (cb_HeroName.SelectedIndex == 174)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = LazurnayaLedi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.LazurnayaLedi;
                }

            }
            if (cb_HeroName.SelectedIndex == 175)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hatun[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hatun;
                }

            }
            if (cb_HeroName.SelectedIndex == 176)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Valla[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Valla;
                }

            }
            if (cb_HeroName.SelectedIndex == 177)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Suvaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Suvaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 178)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = NebesnayaCharovnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.NebesnayaCharovnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 179)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yazichnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Yazichnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 180)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Stareishina[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Stareishina;
                }

            }
            if (cb_HeroName.SelectedIndex == 181)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Nomada[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Nomada;
                }

            }
            if (cb_HeroName.SelectedIndex == 182)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ordinec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ordinec;
                }

            }
            if (cb_HeroName.SelectedIndex == 183)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Voitelnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Voitelnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 184)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zveroboi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zveroboy;
                }

            }
            if (cb_HeroName.SelectedIndex == 185)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mechenii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mecheniy;
                }

            }
            if (cb_HeroName.SelectedIndex == 186)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Berserk[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Berserk;
                }

            }
            if (cb_HeroName.SelectedIndex == 187)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kochevnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kochevnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 188)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = MastericaLukov[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.MastericaLukov;
                }

            }
            if (cb_HeroName.SelectedIndex == 189)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vsadnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vsadnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 190)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Buivol[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Buivol;
                }

            }
            if (cb_HeroName.SelectedIndex == 191)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zlobostrel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zlobostrel;
                }

            }
            if (cb_HeroName.SelectedIndex == 192)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Obryadchica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Obryadchica;
                }

            }
            if (cb_HeroName.SelectedIndex == 193)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dezertir[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dezertir;
                }

            }
            if (cb_HeroName.SelectedIndex == 194)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = DobitchicaSkalpov[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.DobitchicaSkalpov;
                }

            }
            if (cb_HeroName.SelectedIndex == 195)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Medium[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Medium;
                }

            }
            if (cb_HeroName.SelectedIndex == 196)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dikar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dikar;
                }

            }
            if (cb_HeroName.SelectedIndex == 197)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Chujezemec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Chujezemec;
                }

            }
            if (cb_HeroName.SelectedIndex == 198)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Schitonosec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Schitonosec;
                }

            }
            if (cb_HeroName.SelectedIndex == 199)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Razvedchik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Razvedchik;
                }

            }
            if (cb_HeroName.SelectedIndex == 200)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skitalica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skitalica;
                }

            }
            if (cb_HeroName.SelectedIndex == 201)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Legit[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Legit;
                }

            }
            if (cb_HeroName.SelectedIndex == 202)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gromila[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gromila;
                }

            }
            if (cb_HeroName.SelectedIndex == 472)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = UrsugaOtvazhnaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ursuga;
                }

            }
            if (cb_HeroName.SelectedIndex == 473)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = BarotKrovavyj[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Barot;
                }

            }
            if (cb_HeroName.SelectedIndex == 474)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hozyajkadyun[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.HozyajkaDyun;
                }

            }
            //Орды Нежити
            if (cb_HeroName.SelectedIndex == 203)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KorolGraal[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KorolGraal;
                }

            }
            if (cb_HeroName.SelectedIndex == 204)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = RotosSmyatennii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Rotos;
                }

            }
            if (cb_HeroName.SelectedIndex == 205)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skartosis[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skartorsis;
                }

            }
            if (cb_HeroName.SelectedIndex == 206)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = BadEl_Kazar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bad_el_Kazar;
                }

            }
            if (cb_HeroName.SelectedIndex == 207)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Krovopiica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Krovopiica;
                }

            }
            if (cb_HeroName.SelectedIndex == 208)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = MaShalled[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.MaShalled;
                }

            }
            if (cb_HeroName.SelectedIndex == 209)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Netril[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Nethril;
                }

            }
            if (cb_HeroName.SelectedIndex == 210)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SyuzerenKatonn[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Suzerain_Katonn;
                }

            }
            if (cb_HeroName.SelectedIndex == 211)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Jnivec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Jnivec;
                }

            }
            if (cb_HeroName.SelectedIndex == 212)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SifiSmyatennaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Siphi;
                }

            }
            if (cb_HeroName.SelectedIndex == 213)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gorgorab[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gorgorab;
                }

            }
            if (cb_HeroName.SelectedIndex == 214)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lovec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lovec;
                }

            }
            if (cb_HeroName.SelectedIndex == 215)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sovetnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sovetnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 216)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = TemnayaEtel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.TemnayaEtel;
                }

            }
            if (cb_HeroName.SelectedIndex == 217)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = TemnayaElein[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.TemnayaElein;
                }

            }
            if (cb_HeroName.SelectedIndex == 218)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hask[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Husk;
                }

            }
            if (cb_HeroName.SelectedIndex == 219)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Karam[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Karam;
                }

            }
            if (cb_HeroName.SelectedIndex == 220)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lich[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lich;
                }

            }
            if (cb_HeroName.SelectedIndex == 221)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Heksiya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hexia;
                }

            }
            if (cb_HeroName.SelectedIndex == 222)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Greshnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Greshnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 223)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SobiratelTrupov[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.SobiratelTrupov;
                }

            }
            if (cb_HeroName.SelectedIndex == 224)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mavzoleinik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mavzoleinik;
                }

            }
            if (cb_HeroName.SelectedIndex == 225)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zelot[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zelot;
                }

            }
            if (cb_HeroName.SelectedIndex == 226)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Banshi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Banshee;
                }

            }
            if (cb_HeroName.SelectedIndex == 227)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Nechestivica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Nechestivica;
                }

            }
            if (cb_HeroName.SelectedIndex == 228)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = LedyanayaBanshi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.LedyanayaBanshi;
                }

            }
            if (cb_HeroName.SelectedIndex == 229)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = PrizrachnayaUbiica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.PrizrachnayaUbiica;
                }

            }
            if (cb_HeroName.SelectedIndex == 230)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vedma[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vedma;
                }

            }
            if (cb_HeroName.SelectedIndex == 231)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gul[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gul;
                }

            }
            if (cb_HeroName.SelectedIndex == 232)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Nemosch[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Nemosch;
                }

            }
            if (cb_HeroName.SelectedIndex == 233)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KostyanoiRicar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KostyanoiRicar;
                }

            }
            if (cb_HeroName.SelectedIndex == 234)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gnilomag[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gnilomag;
                }

            }
            if (cb_HeroName.SelectedIndex == 235)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gul_reindjer[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gul_reindjer;
                }

            }
            if (cb_HeroName.SelectedIndex == 236)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kadavr[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kadavr;
                }

            }
            if (cb_HeroName.SelectedIndex == 237)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Strelok[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Strelok;
                }

            }
            if (cb_HeroName.SelectedIndex == 238)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Netopir[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Netopir;
                }

            }
            if (cb_HeroName.SelectedIndex == 239)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Pustotel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Pustotel;
                }

            }
            if (cb_HeroName.SelectedIndex == 240)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Iskusitel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Iskusitel;
                }

            }
            if (cb_HeroName.SelectedIndex == 241)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hromonog[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hromonog;
                }

            }
            if (cb_HeroName.SelectedIndex == 242)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Amarant[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Amarant;
                }

            }
            if (cb_HeroName.SelectedIndex == 243)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = PadshiiVoin[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.PadshiiVoin;
                }

            }
            if (cb_HeroName.SelectedIndex == 244)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skelet[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skelet;
                }

            }
            if (cb_HeroName.SelectedIndex == 245)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vulpin[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vulpin;
                }

            }
            if (cb_HeroName.SelectedIndex == 246)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = MertviiMechenosec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.MertviiMechenosec;
                }

            }
            if (cb_HeroName.SelectedIndex == 247)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dampir[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dampir;
                }

            }
            if (cb_HeroName.SelectedIndex == 248)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = VosstavshiiRicar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.VosstavshiiRicar;
                }

            }
            if (cb_HeroName.SelectedIndex == 249)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = VosstavshayaGonchaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.VosstavshayaGonchaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 250)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = NechestiviiPes[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.NechestiviiPes;
                }

            }
            if (cb_HeroName.SelectedIndex == 463)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Saito[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Saito;
                }

            }
            if (cb_HeroName.SelectedIndex == 475)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Utoplennik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Utoplennik;
                }

            }
            if (cb_HeroName.SelectedIndex == 488)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Elegius[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Elegius;
                }

            }
            if (cb_HeroName.SelectedIndex == 489)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KroshkaEnni[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KroshkaEnni;
                }

            }
            //Гномы
            if (cb_HeroName.SelectedIndex == 251)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Trunda[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Trunda;
                }

            }
            if (cb_HeroName.SelectedIndex == 252)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = GorniiKorol[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.GorniiKorol;
                }

            }
            if (cb_HeroName.SelectedIndex == 253)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = MolliKelner[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.MolliKelner;
                }

            }
            if (cb_HeroName.SelectedIndex == 254)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tormin[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tormin;
                }

            }
            if (cb_HeroName.SelectedIndex == 255)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yarl[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Yarl;
                }

            }
            if (cb_HeroName.SelectedIndex == 256)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SerjantArergarda[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.SerjantArergarda;
                }

            }
            if (cb_HeroName.SelectedIndex == 257)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kamnetes[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Baerdal;
                }

            }
            if (cb_HeroName.SelectedIndex == 258)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Baerdal[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Baerdal;
                }

            }
            if (cb_HeroName.SelectedIndex == 259)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = GalaDolgokosaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gala;
                }

            }
            if (cb_HeroName.SelectedIndex == 260)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Svarlivec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Svarlivec;
                }

            }
            if (cb_HeroName.SelectedIndex == 261)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SmotritelRun[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.SmotritelRun;
                }

            }
            if (cb_HeroName.SelectedIndex == 262)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tesak[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tesak;
                }

            }
            if (cb_HeroName.SelectedIndex == 263)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Deboshir[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Deboshir;
                }

            }
            if (cb_HeroName.SelectedIndex == 264)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Borec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Borec;
                }

            }
            if (cb_HeroName.SelectedIndex == 265)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Karaulnii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Karaulnii;
                }

            }
            if (cb_HeroName.SelectedIndex == 266)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Burav[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Burav;
                }

            }
            if (cb_HeroName.SelectedIndex == 267)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bezumec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bezumec;
                }

            }
            if (cb_HeroName.SelectedIndex == 268)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = StarshiiZaboischik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.StarshiiZaboischik;
                }

            }
            if (cb_HeroName.SelectedIndex == 269)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = MasterTopora[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.MasterTopora;
                }

            }
            if (cb_HeroName.SelectedIndex == 270)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Val[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Val;
                }

            }
            if (cb_HeroName.SelectedIndex == 271)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KuznecBoli[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KuznecBoli;
                }

            }
            if (cb_HeroName.SelectedIndex == 272)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Himik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Himik;
                }

            }
            if (cb_HeroName.SelectedIndex == 273)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Pehotinec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Pehotinec;
                }

            }
            if (cb_HeroName.SelectedIndex == 274)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Reznik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Reznik;
                }

            }
            if (cb_HeroName.SelectedIndex == 275)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gornyak[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gornyak;
                }

            }
            if (cb_HeroName.SelectedIndex == 476)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dilgol[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dilgol;
                }

            }
            if (cb_HeroName.SelectedIndex == 477)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = GlorilLihoborec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gloril;
                }

            }
            if (cb_HeroName.SelectedIndex == 478)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = DolorMudryj[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dolor;
                }

            }
            if (cb_HeroName.SelectedIndex == 479)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = AvirAlhimik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Avir;
                }

            }
            //Оборотни
            if (cb_HeroName.SelectedIndex == 276)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Norog[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Norog;
                }

            }
            if (cb_HeroName.SelectedIndex == 277)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dlinnoborod[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dlinnoborod;
                }

            }
            if (cb_HeroName.SelectedIndex == 278)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hakkorn[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hakkorn;
                }

            }
            if (cb_HeroName.SelectedIndex == 279)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Voevoda[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Voevoda;
                }

            }
            if (cb_HeroName.SelectedIndex == 280)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Brakus[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Brakus;
                }

            }
            if (cb_HeroName.SelectedIndex == 281)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Horonar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Horonar;
                }

            }
            if (cb_HeroName.SelectedIndex == 282)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Telec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Telec;
                }

            }
            if (cb_HeroName.SelectedIndex == 283)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Razdiratel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Razdiratel;
                }

            }
            if (cb_HeroName.SelectedIndex == 284)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Potroshitel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Potroshitel;
                }

            }
            if (cb_HeroName.SelectedIndex == 285)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Upryajnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Upryajnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 286)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Pogromschik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Pogromschik;
                }

            }
            if (cb_HeroName.SelectedIndex == 287)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yago[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Yago;
                }

            }
            if (cb_HeroName.SelectedIndex == 288)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = UrsinSnegostup[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.UrsinSnegostup;
                }

            }
            if (cb_HeroName.SelectedIndex == 289)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = UrsinNerushimii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.UrsinNerushimii;
                }

            }
            if (cb_HeroName.SelectedIndex == 290)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = StalnoiCherep[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.StalnoiCherep;
                }

            }
            if (cb_HeroName.SelectedIndex == 291)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tolstorog[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tolstorog;
                }

            }
            if (cb_HeroName.SelectedIndex == 292)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sedoborod[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sedoborod;
                }

            }
            if (cb_HeroName.SelectedIndex == 293)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skotoboec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skotoboec;
                }

            }
            if (cb_HeroName.SelectedIndex == 294)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Matador[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Matador;
                }

            }
            if (cb_HeroName.SelectedIndex == 295)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vitorog[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vitorog;
                }

            }
            if (cb_HeroName.SelectedIndex == 296)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tur[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tur;
                }

            }
            if (cb_HeroName.SelectedIndex == 297)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Anker[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Anker;
                }

            }
            if (cb_HeroName.SelectedIndex == 298)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Krovorog[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Krovorog;
                }

            }
            if (cb_HeroName.SelectedIndex == 299)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zaklinatel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zaklinatel;
                }

            }
            if (cb_HeroName.SelectedIndex == 300)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Satir[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Satir;
                }

            }
            if (cb_HeroName.SelectedIndex == 480)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Fejn[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Fein;
                }

            }
            //Ящеролюды
            if (cb_HeroName.SelectedIndex == 301)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Drakomorf[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Drakomorf;
                }

            }
            if (cb_HeroName.SelectedIndex == 302)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Fu_Shan[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Fu_Shan;
                }

            }
            if (cb_HeroName.SelectedIndex == 303)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Razen[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Razen;
                }

            }
            if (cb_HeroName.SelectedIndex == 304)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Var_Gall[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Var_Gall;
                }

            }
            if (cb_HeroName.SelectedIndex == 305)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Krisk[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Krisk;
                }

            }
            if (cb_HeroName.SelectedIndex == 306)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Djarang[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Djarang;
                }

            }
            if (cb_HeroName.SelectedIndex == 307)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Djareg[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Djareg;
                }

            }
            if (cb_HeroName.SelectedIndex == 308)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vasilisk[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vasilisk;
                }

            }
            if (cb_HeroName.SelectedIndex == 309)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dreik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dreik;
                }

            }
            if (cb_HeroName.SelectedIndex == 310)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Djizoh[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Djizoh;
                }

            }
            if (cb_HeroName.SelectedIndex == 311)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Jivoglot[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Jivoglot;
                }

            }
            if (cb_HeroName.SelectedIndex == 312)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Triton[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Triton;
                }

            }
            if (cb_HeroName.SelectedIndex == 313)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Scink[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Scink;
                }

            }
            if (cb_HeroName.SelectedIndex == 314)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gator[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gator;
                }

            }
            if (cb_HeroName.SelectedIndex == 315)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Slizen[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Slizen;
                }

            }
            if (cb_HeroName.SelectedIndex == 316)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kaiman[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kaiman;
                }

            }
            if (cb_HeroName.SelectedIndex == 317)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ozernik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ozernik;
                }

            }
            if (cb_HeroName.SelectedIndex == 318)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Varan[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Varan;
                }

            }
            if (cb_HeroName.SelectedIndex == 319)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Metatel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Metatel;
                }

            }
            if (cb_HeroName.SelectedIndex == 320)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sekach[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sekach;
                }

            }
            if (cb_HeroName.SelectedIndex == 321)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = JelezniiYascher[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.JelezniiYascher;
                }

            }
            if (cb_HeroName.SelectedIndex == 322)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Garuspik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Garuspik;
                }

            }
            if (cb_HeroName.SelectedIndex == 323)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Jivoder[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Jivoder;
                }

            }
            if (cb_HeroName.SelectedIndex == 324)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bolotnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bolotnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 325)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Salamandra[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Salamandra;
                }

            }
            if (cb_HeroName.SelectedIndex == 326)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Raptor[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Raptor;
                }

            }
            if (cb_HeroName.SelectedIndex == 327)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Troglodit[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Troglodit;
                }

            }
            if (cb_HeroName.SelectedIndex == 481)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vergumkaar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vergumkaar;
                }

            }
            //Отступники
            if (cb_HeroName.SelectedIndex == 328)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bistofus[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bistofus;
                }

            }
            if (cb_HeroName.SelectedIndex == 329)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = HozyainGrobnic[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.HozyainGrobnic;
                }

            }
            if (cb_HeroName.SelectedIndex == 330)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bezdushnii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bezdushnii;
                }

            }
            if (cb_HeroName.SelectedIndex == 331)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gegemon[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gegemon;
                }

            }
            if (cb_HeroName.SelectedIndex == 332)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KnyazVurlim[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KnyazVurlim;
                }

            }
            if (cb_HeroName.SelectedIndex == 333)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sklepnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sklepnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 334)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Despot[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Despot;
                }

            }
            if (cb_HeroName.SelectedIndex == 335)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Nekrolov[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Nekrolov;
                }

            }
            if (cb_HeroName.SelectedIndex == 336)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Straholyud[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Straholyud;
                }

            }
            if (cb_HeroName.SelectedIndex == 337)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sinesha[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sinesha;
                }

            }
            if (cb_HeroName.SelectedIndex == 338)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Fatalist[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Fatalist;
                }

            }
            if (cb_HeroName.SelectedIndex == 339)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KaraulnayaSklepa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KaraulnayaSklepa;
                }

            }
            if (cb_HeroName.SelectedIndex == 340)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bessmertnaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bessmertnaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 341)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kaitis[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kaitis;
                }

            }
            if (cb_HeroName.SelectedIndex == 342)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bezlicii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bezlicii;
                }

            }
            if (cb_HeroName.SelectedIndex == 343)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vencenosnaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vencenosnaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 344)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = ZolotayaJnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.ZolotayaJnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 345)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Visper[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Visper;
                }

            }
            if (cb_HeroName.SelectedIndex == 346)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Palach[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Palach;
                }

            }
            if (cb_HeroName.SelectedIndex == 347)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Teurg[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Teurg;
                }

            }
            if (cb_HeroName.SelectedIndex == 348)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = TemnayaKoldunya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.TemnayaKoldunya;
                }

            }
            if (cb_HeroName.SelectedIndex == 349)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = RazoritelMogil[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.RazoritelMogil;
                }

            }
            if (cb_HeroName.SelectedIndex == 350)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Charodeika[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Charodeika;
                }

            }
            if (cb_HeroName.SelectedIndex == 351)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gladiator[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gladiator;
                }

            }
            if (cb_HeroName.SelectedIndex == 352)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Akolit[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Akolit;
                }

            }
            if (cb_HeroName.SelectedIndex == 353)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Storoj[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Storoj;
                }

            }
            if (cb_HeroName.SelectedIndex == 354)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KrovavayaUbiica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KrovavayaUbiica;
                }

            }
            if (cb_HeroName.SelectedIndex == 355)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Renegatka[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Renegatka;
                }

            }
            if (cb_HeroName.SelectedIndex == 356)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = DnevnoiHodok[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.DnevnoiHodok;
                }

            }
            if (cb_HeroName.SelectedIndex == 357)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Centurion[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Centurion;
                }

            }
            if (cb_HeroName.SelectedIndex == 358)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kultist[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kultist;
                }

            }
            if (cb_HeroName.SelectedIndex == 359)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Izuver[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Izuver;
                }

            }
            if (cb_HeroName.SelectedIndex == 360)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gerold[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gerold;
                }

            }
            if (cb_HeroName.SelectedIndex == 361)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Trell[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Trell;
                }

            }
            if (cb_HeroName.SelectedIndex == 490)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = NarmaNetlennaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Narma;
                }

            }
            //Огры
            if (cb_HeroName.SelectedIndex == 362)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = BolshoiUn[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.BolshoiUn;
                }

            }
            if (cb_HeroName.SelectedIndex == 363)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Macheha[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Macheha;
                }

            }
            if (cb_HeroName.SelectedIndex == 364)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ignatius[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ignatius;
                }

            }
            if (cb_HeroName.SelectedIndex == 365)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = GurptukBorodach[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.GurptukBorodach;
                }

            }
            if (cb_HeroName.SelectedIndex == 366)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Shemrok[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Shemrok;
                }

            }
            if (cb_HeroName.SelectedIndex == 367)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gurgot[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gurgot;
                }

            }
            if (cb_HeroName.SelectedIndex == 368)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Chernolob[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Chernolob;
                }

            }
            if (cb_HeroName.SelectedIndex == 369)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Cherepolom[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Cherepolom;
                }

            }
            if (cb_HeroName.SelectedIndex == 370)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kostolom[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kostolom;
                }

            }
            if (cb_HeroName.SelectedIndex == 371)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Galkut[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Galkut;
                }

            }
            if (cb_HeroName.SelectedIndex == 372)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Gratolom[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Gratolom;
                }

            }
            if (cb_HeroName.SelectedIndex == 373)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = OkkultniiVoin[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.OkkultniiVoin;
                }

            }
            if (cb_HeroName.SelectedIndex == 374)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = GrashMolotoboi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.GrashMolotoboi;
                }

            }
            if (cb_HeroName.SelectedIndex == 375)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lyudoed[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lyudoed;
                }

            }
            if (cb_HeroName.SelectedIndex == 376)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Bashennik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Bashennik;
                }

            }
            if (cb_HeroName.SelectedIndex == 377)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Skalozub[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Skalozub;
                }

            }
            if (cb_HeroName.SelectedIndex == 378)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Stopolom[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Stopolom;
                }

            }
            if (cb_HeroName.SelectedIndex == 379)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Geval[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Geval;
                }

            }
            if (cb_HeroName.SelectedIndex == 380)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Magmovik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Magmovik;
                }

            }
            if (cb_HeroName.SelectedIndex == 381)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tyuremschik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tyuremschik;
                }

            }
            if (cb_HeroName.SelectedIndex == 382)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yarosten[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Yarosten;
                }

            }
            if (cb_HeroName.SelectedIndex == 383)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Onagr[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Onagr;
                }

            }
            if (cb_HeroName.SelectedIndex == 384)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Myasnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Myasnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 385)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kamneshkur[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kamneshkur;
                }

            }
            if (cb_HeroName.SelectedIndex == 386)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Revoglas[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Revoglas;
                }

            }
            if (cb_HeroName.SelectedIndex == 387)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ogr[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ogr;
                }

            }
            if (cb_HeroName.SelectedIndex == 388)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Moroznik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Moroznik;
                }

            }
            if (cb_HeroName.SelectedIndex == 389)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Starovlas[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Starovlas;
                }

            }
            if (cb_HeroName.SelectedIndex == 390)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Pustobryuh[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Moroznik;
                }

            }
            if (cb_HeroName.SelectedIndex == 391)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tolkach[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Starovlas;
                }

            }
            if (cb_HeroName.SelectedIndex == 464)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = DrokgulKostlyavyj[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Drokgul;
                }

            }
            if (cb_HeroName.SelectedIndex == 482)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lyutozver[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lutozver;
                }

            }
            //Тёмные эльфы
            if (cb_HeroName.SelectedIndex == 392)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Reya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Reya;
                }

            }
            if (cb_HeroName.SelectedIndex == 393)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lanakis[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lanakis;
                }

            }
            if (cb_HeroName.SelectedIndex == 394)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Foli[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Foli;
                }

            }
            if (cb_HeroName.SelectedIndex == 395)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zaviya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zaviya;
                }

            }
            if (cb_HeroName.SelectedIndex == 396)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = VizirOvelis[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.VizirOvelis;
                }

            }
            if (cb_HeroName.SelectedIndex == 397)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Astralit[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Astralit;
                }

            }
            if (cb_HeroName.SelectedIndex == 398)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = CaricaEva[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.CaricaEva;
                }

            }
            if (cb_HeroName.SelectedIndex == 399)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KnyazNochi[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KnyazNochi;
                }

            }
            if (cb_HeroName.SelectedIndex == 400)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Yasnovidyaschaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Yasnovidyaschaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 401)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = VisiksaNepokornaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.VisiksaNepokornaya;
                }

            }
            if (cb_HeroName.SelectedIndex == 402)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KapitanTemila[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KapitanTemila;
                }

            }
            if (cb_HeroName.SelectedIndex == 403)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Arahnid[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Arahnid;
                }

            }
            if (cb_HeroName.SelectedIndex == 404)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Luriya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Luriya;
                }

            }
            if (cb_HeroName.SelectedIndex == 405)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = BagrovayaMaska[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.BagrovayaMaska;
                }

            }
            if (cb_HeroName.SelectedIndex == 406)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ohranitel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ohranitel;
                }

            }
            if (cb_HeroName.SelectedIndex == 407)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Iskatel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Iskatel;
                }

            }
            if (cb_HeroName.SelectedIndex == 408)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Krestovik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Krestovik;
                }

            }
            if (cb_HeroName.SelectedIndex == 409)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Lua[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Lua;
                }

            }
            if (cb_HeroName.SelectedIndex == 410)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sailar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sailar;
                }

            }
            if (cb_HeroName.SelectedIndex == 411)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = MadamSerris[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.MadamSerris;
                }

            }
            if (cb_HeroName.SelectedIndex == 412)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = VisshiiSudya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.VisshiiSudya;
                }

            }
            if (cb_HeroName.SelectedIndex == 413)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kael[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kael;
                }

            }
            if (cb_HeroName.SelectedIndex == 414)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Mistik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Mistik;
                }

            }
            if (cb_HeroName.SelectedIndex == 415)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = StalnayaTetiva[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.StalnayaTetiva;
                }

            }
            if (cb_HeroName.SelectedIndex == 416)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = HozyaikaDush[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.HozyaikaDush;
                }

            }
            if (cb_HeroName.SelectedIndex == 417)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vorojeya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vorojeya;
                }

            }
            if (cb_HeroName.SelectedIndex == 418)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Strannik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Strannik;
                }

            }
            if (cb_HeroName.SelectedIndex == 419)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = HolodnoeSerdce[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.HolodnoeSerdce;
                }

            }
            if (cb_HeroName.SelectedIndex == 420)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Paragon[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Paragon;
                }

            }
            if (cb_HeroName.SelectedIndex == 421)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Derjatel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Derjatel;
                }

            }
            if (cb_HeroName.SelectedIndex == 422)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Jalo[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Jalo;
                }

            }
            if (cb_HeroName.SelectedIndex == 423)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Muchenica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Muchenica;
                }

            }
            if (cb_HeroName.SelectedIndex == 424)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kosa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kosa;
                }

            }
            if (cb_HeroName.SelectedIndex == 425)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Snaiper[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Snaiper;
                }

            }
            if (cb_HeroName.SelectedIndex == 426)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Samodiva[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Samodiva;
                }

            }
            if (cb_HeroName.SelectedIndex == 427)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Igla[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Igla;
                }

            }
            if (cb_HeroName.SelectedIndex == 428)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Sledopit[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Sledopit;
                }

            }
            if (cb_HeroName.SelectedIndex == 429)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Reindjer[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Reindjer;
                }

            }
            if (cb_HeroName.SelectedIndex == 430)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = UbiicaMagov[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.UbiicaMagov;
                }

            }
            if (cb_HeroName.SelectedIndex == 483)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Kajden[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Kaiden;
                }

            }
            if (cb_HeroName.SelectedIndex == 491)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = LidiyaVosstavshaya[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.LidiyaVosstavshaya;
                }

            }
            //Орки
            if (cb_HeroName.SelectedIndex == 431)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Grogak[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Grogak;
                }

            }
            if (cb_HeroName.SelectedIndex == 432)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Tila[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tila;
                }

            }
            if (cb_HeroName.SelectedIndex == 433)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Robar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Robar;
                }

            }
            if (cb_HeroName.SelectedIndex == 434)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ataman[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ataman;
                }

            }
            if (cb_HeroName.SelectedIndex == 435)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Hangar[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Hangar;
                }

            }
            if (cb_HeroName.SelectedIndex == 436)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = VelikiiGalek[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.VelikiiGalek;
                }

            }
            if (cb_HeroName.SelectedIndex == 437)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Muchitel[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Muchitel;
                }

            }
            if (cb_HeroName.SelectedIndex == 438)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zargala[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zargala;
                }

            }
            if (cb_HeroName.SelectedIndex == 439)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KrovavoePero[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.KrovavoePero;
                }

            }
            if (cb_HeroName.SelectedIndex == 440)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Trofeischica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Trofeischica;
                }

            }
            if (cb_HeroName.SelectedIndex == 441)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Shamanka[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Shamanka;
                }

            }
            if (cb_HeroName.SelectedIndex == 442)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = ZverUjasa[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.ZverUjasa;
                }

            }
            if (cb_HeroName.SelectedIndex == 443)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vrask[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vrask;
                }

            }
            if (cb_HeroName.SelectedIndex == 444)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = PustinnayaRazboinica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.PustinnayaRazboinica;
                }

            }
            if (cb_HeroName.SelectedIndex == 445)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Prorochica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Prorochica;
                }

            }
            if (cb_HeroName.SelectedIndex == 446)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = PevchiiSmerti[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.PevchiiSmerti;
                }

            }
            if (cb_HeroName.SelectedIndex == 447)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Rubaka[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Rubaka;
                }

            }
            if (cb_HeroName.SelectedIndex == 448)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Galek[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Galek;
                }

            }
            if (cb_HeroName.SelectedIndex == 449)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Shipogolovii[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Shipogolovii;
                }

            }
            if (cb_HeroName.SelectedIndex == 450)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Latnik[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Latnik;
                }

            }
            if (cb_HeroName.SelectedIndex == 451)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = StorojevoiVarg[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.storojevoiVarg;
                }

            }
            if (cb_HeroName.SelectedIndex == 452)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Drevorub[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Drevorub;
                }

            }
            if (cb_HeroName.SelectedIndex == 453)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Adept[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Adept;
                }

            }
            if (cb_HeroName.SelectedIndex == 454)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Naletchica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Naletchica;
                }

            }
            if (cb_HeroName.SelectedIndex == 455)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Totemnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Totemnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 456)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Veteran[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Veteran;
                }

            }
            if (cb_HeroName.SelectedIndex == 457)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Ohotnica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ohotnica;
                }

            }
            if (cb_HeroName.SelectedIndex == 458)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Vandal[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Vandal;
                }

            }
            if (cb_HeroName.SelectedIndex == 459)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Zagonschica[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Zagonschica;
                }

            }
            if (cb_HeroName.SelectedIndex == 460)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Golovorez[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Golovorez;
                }

            }
            if (cb_HeroName.SelectedIndex == 461)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Voyaka[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Voyaka;
                }

            }
            if (cb_HeroName.SelectedIndex == 462)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = KolduniyaKrila[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Krila;
                }

            }
            if (cb_HeroName.SelectedIndex == 484)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = TuhakSkitalec[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Tuhak;
                }

            }
            if (cb_HeroName.SelectedIndex == 485)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = SHip[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Ship;
                }

            }
            if (cb_HeroName.SelectedIndex == 486)
            {
                for (int i = 0; i < stat.Length; i++)
                {
                    stat[i] = Dityatmy[i];
                    pb_HeroIco.BackgroundImage = RaidCalculator.Properties.Resources.Dityatmy;
                }

            }

            tb_fraction.Text = stat[0];
            tb_rarity.Text = stat[1];
            tb_HeroClass.Text = stat[2];
            tb_elements.Text = stat[3];
            tb_HP.Text = stat[4];
            tb_ATK.Text = stat[5];
            tb_DEF.Text = stat[6];
            tb_SPD.Text = stat[7];
            tb_CritChance.Text = stat[8];
            tb_CritDamage.Text = stat[9];
            tb_Resist.Text = stat[10];
            tb_ACC.Text = stat[11];

            if (tb_elements.Text == "Магия")
            {
                pb_elements_1.BackgroundImage = RaidCalculator.Properties.Resources.Magic;
                pb_Elements_2.BackgroundImage = RaidCalculator.Properties.Resources.Magic;
            }
            if (tb_elements.Text == "Дух")
            {
                pb_elements_1.BackgroundImage = RaidCalculator.Properties.Resources.Soul;
                pb_Elements_2.BackgroundImage = RaidCalculator.Properties.Resources.Soul;
            }
            if (tb_elements.Text == "Сила")
            {
                pb_elements_1.BackgroundImage = RaidCalculator.Properties.Resources.Strength;
                pb_Elements_2.BackgroundImage = RaidCalculator.Properties.Resources.Strength;
            }
            if (tb_elements.Text == "Тьма")
            {
                pb_elements_1.BackgroundImage = RaidCalculator.Properties.Resources.Dark;
                pb_Elements_2.BackgroundImage = RaidCalculator.Properties.Resources.Dark;
            }

            if (tb_rarity.Text == "Легендарный")
            {
                pb_borderHeroRariry.BackColor = Color.Gold;
            }
            if (tb_rarity.Text == "Эпический")
            {
                pb_borderHeroRariry.BackColor = Color.MediumOrchid;
            }
            if (tb_rarity.Text == "Редкий")
            {
                pb_borderHeroRariry.BackColor = Color.Blue;
            }
            if (tb_rarity.Text == "Необычный")
            {
                pb_borderHeroRariry.BackColor = Color.Lime;
            }
            if (tb_rarity.Text == "Обычный")
            {
                pb_borderHeroRariry.BackColor = Color.Gray;
            }


            if (tb_fraction.Text == "Баннереты")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.banner;
            }
            if (tb_fraction.Text == "Высшие эльфы")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.Highelves;
            }
            if (tb_fraction.Text == "Священный орден")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.Orden;
            }
            if (tb_fraction.Text == "Варвары")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.Varvaras;
            }
            if (tb_fraction.Text == "Племена Огринов")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.PlemenaOgrinov;
            }
            if (tb_fraction.Text == "Ящеролюды")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.Reptiles;
            }
            if (tb_fraction.Text == "Оборотни")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.werewolves;
            }
            if (tb_fraction.Text == "Орки")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.orcs;
            }
            if (tb_fraction.Text == "Демоны")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.demons;
            }
            if (tb_fraction.Text == "Орды нежити")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.undead;
            }
            if (tb_fraction.Text == "Темные Эльфы")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.darkelves;
            }
            if (tb_fraction.Text == "Отступники")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.renegate;
            }
            if (tb_fraction.Text == "Дворфы")
            {
                pb_fraction.BackgroundImage = RaidCalculator.Properties.Resources.dwarves;
            }


        }

        private void tb_config_Click(object sender, EventArgs e)
        {
        }

        //Бонус лиги арены
        void ArenaLeagueFunc(double hp, double atk, double def, double[] ArenaLeagueMass)
        {
            double hpArena = 0.0;
            double atkArena = 0.0;
            double defArena = 0.0;

            if (cb_LeagueArena.SelectedIndex == 0)
            {

                hpArena = hp / 100 * 1;
                atkArena = atk / 100 * 1;
                defArena = def / 100 * 1;

            };
            if (cb_LeagueArena.SelectedIndex == 1)
            {
                hpArena = hp / 100 * 2;
                atkArena = atk / 100 * 2;
                defArena = def / 100 * 2;
            };
            if (cb_LeagueArena.SelectedIndex == 2)
            {
                hpArena = hp / 100 * 3;
                atkArena = atk / 100 * 3;
                defArena = def / 100 * 3;
            };
            if (cb_LeagueArena.SelectedIndex == 3)
            {
                hpArena = hp / 100 * 4;
                atkArena = atk / 100 * 4;
                defArena = def / 100 * 4;
            };
            if (cb_LeagueArena.SelectedIndex == 4)
            {
                hpArena = hp / 100 * 6;
                atkArena = atk / 100 * 6;
                defArena = def / 100 * 6;
            };
            if (cb_LeagueArena.SelectedIndex == 5)
            {
                hpArena = hp / 100 * 8;
                atkArena = atk / 100 * 8;
                defArena = def / 100 * 8;
            };
            if (cb_LeagueArena.SelectedIndex == 6)
            {
                hpArena = hp / 100 * 10;
                atkArena = atk / 100 * 10;
                defArena = def / 100 * 10;
            };
            if (cb_LeagueArena.SelectedIndex == 7)
            {
                hpArena = hp / 100 * 12;
                atkArena = atk / 100 * 12;
                defArena = def / 100 * 12;
            };
            if (cb_LeagueArena.SelectedIndex == 8)
            {
                hpArena = hp / 100 * 14;
                atkArena = atk / 100 * 14;
                defArena = def / 100 * 14;
            };
            if (cb_LeagueArena.SelectedIndex == 9)
            {
                hpArena = hp / 100 * 16;
                atkArena = atk / 100 * 16;
                defArena = def / 100 * 16;
            };
            if (cb_LeagueArena.SelectedIndex == 10)
            {
                hpArena = hp / 100 * 18;
                atkArena = atk / 100 * 18;
                defArena = def / 100 * 18;
            };
            if (cb_LeagueArena.SelectedIndex == 11)
            {
                hpArena = hp / 100 * 20;
                atkArena = atk / 100 * 20;
                defArena = def / 100 * 20;
            };
            if (cb_LeagueArena.SelectedIndex == 12)
            {
                hpArena = hp / 100 * 25;
                atkArena = atk / 100 * 25;
                defArena = def / 100 * 25;
            };

            ArenaLeagueMass[0] = hpArena;
            ArenaLeagueMass[1] = atkArena;
            ArenaLeagueMass[2] = defArena;
            return;
        }

        // Бонусы Большого Зала
        double HPBigHallFunc(double hp)
        {
            double hpHall = 0.0;
            if (cb_BigHall_HP.SelectedIndex == 0)
            {
                hpHall = hp / 100 * 2;
            }
            if (cb_BigHall_HP.SelectedIndex == 1)
            {
                hpHall = hp / 100 * 3;
            }
            if (cb_BigHall_HP.SelectedIndex == 2)
            {
                hpHall = hp / 100 * 4;
            }
            if (cb_BigHall_HP.SelectedIndex == 3)
            {
                hpHall = hp / 100 * 6;
            }
            if (cb_BigHall_HP.SelectedIndex == 4)
            {
                hpHall = hp / 100 * 8;
            }
            if (cb_BigHall_HP.SelectedIndex == 5)
            {
                hpHall = hp / 100 * 10;
            }
            if (cb_BigHall_HP.SelectedIndex == 6)
            {
                hpHall = hp / 100 * 12;
            }
            if (cb_BigHall_HP.SelectedIndex == 7)
            {
                hpHall = hp / 100 * 14;
            }
            if (cb_BigHall_HP.SelectedIndex == 8)
            {
                hpHall = hp / 100 * 17;
            }
            if (cb_BigHall_HP.SelectedIndex == 9)
            {
                hpHall = hp / 100 * 20;
            }


            return hpHall;
        }
        double ATKBigHallFunc(double atk)
        {
            double atkHall = 0.0;
            if (cb_BigHall_ATK.SelectedIndex == 0)
            {
                atkHall = atk / 100 * 2;
            }
            if (cb_BigHall_ATK.SelectedIndex == 1)
            {
                atkHall = atk / 100 * 3;
            }
            if (cb_BigHall_ATK.SelectedIndex == 2)
            {
                atkHall = atk / 100 * 4;
            }
            if (cb_BigHall_ATK.SelectedIndex == 3)
            {
                atkHall = atk / 100 * 6;
            }
            if (cb_BigHall_ATK.SelectedIndex == 4)
            {
                atkHall = atk / 100 * 8;
            }
            if (cb_BigHall_ATK.SelectedIndex == 5)
            {
                atkHall = atk / 100 * 10;
            }
            if (cb_BigHall_ATK.SelectedIndex == 6)
            {
                atkHall = atk / 100 * 12;
            }
            if (cb_BigHall_ATK.SelectedIndex == 7)
            {
                atkHall = atk / 100 * 14;
            }
            if (cb_BigHall_ATK.SelectedIndex == 8)
            {
                atkHall = atk / 100 * 17;
            }
            if (cb_BigHall_ATK.SelectedIndex == 9)
            {
                atkHall = atk / 100 * 20;
            }


            return atkHall;
        }
        double DEFBigHallFunc(double def)
        {
            double defHall = 0.0;

            if (cb_BigHall_DEF.SelectedIndex == 0)
            {
                defHall = def / 100 * 2;
            }
            if (cb_BigHall_DEF.SelectedIndex == 1)
            {
                defHall = def / 100 * 3;
            }
            if (cb_BigHall_DEF.SelectedIndex == 2)
            {
                defHall = def / 100 * 4;
            }
            if (cb_BigHall_DEF.SelectedIndex == 3)
            {
                defHall = def / 100 * 6;
            }
            if (cb_BigHall_DEF.SelectedIndex == 4)
            {
                defHall = def / 100 * 8;
            }
            if (cb_BigHall_DEF.SelectedIndex == 5)
            {
                defHall = def / 100 * 10;
            }
            if (cb_BigHall_DEF.SelectedIndex == 6)
            {
                defHall = def / 100 * 12;
            }
            if (cb_BigHall_DEF.SelectedIndex == 7)
            {
                defHall = def / 100 * 14;
            }
            if (cb_BigHall_DEF.SelectedIndex == 8)
            {
                defHall = def / 100 * 17;
            }
            if (cb_BigHall_DEF.SelectedIndex == 9)
            {
                defHall = def / 100 * 20;
            }

            return defHall;
        }
        int CritAtKBigHallFunc()
        {
            int critATKHall = 0;

            if (cb_BigHall_CritATK.SelectedIndex == 0)
            {
                critATKHall = 2;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 1)
            {
                critATKHall = 4;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 2)
            {
                critATKHall = 6;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 3)
            {
                critATKHall = 8;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 4)
            {
                critATKHall = 10;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 5)
            {
                critATKHall = 12;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 6)
            {
                critATKHall = 15;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 7)
            {
                critATKHall = 18;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 8)
            {
                critATKHall = 21;
            }
            if (cb_BigHall_CritATK.SelectedIndex == 9)
            {
                critATKHall = 25;
            }
            return critATKHall;
        }
        int ResistBigHallFunc()
        {
            int resistHall = 0;
            if (cb_BigHall_Resist.SelectedIndex == 0)
            {
                resistHall = 5;
            }
            if (cb_BigHall_Resist.SelectedIndex == 1)
            {
                resistHall = 10;
            }
            if (cb_BigHall_Resist.SelectedIndex == 2)
            {
                resistHall = 15;
            }
            if (cb_BigHall_Resist.SelectedIndex == 3)
            {
                resistHall = 20;
            }
            if (cb_BigHall_Resist.SelectedIndex == 4)
            {
                resistHall = 30;
            }
            if (cb_BigHall_Resist.SelectedIndex == 5)
            {
                resistHall = 40;
            }
            if (cb_BigHall_Resist.SelectedIndex == 6)
            {
                resistHall = 50;
            }
            if (cb_BigHall_Resist.SelectedIndex == 7)
            {
                resistHall = 60;
            }
            if (cb_BigHall_Resist.SelectedIndex == 8)
            {
                resistHall = 70;
            }
            if (cb_BigHall_Resist.SelectedIndex == 9)
            {
                resistHall = 80;
            }

            return resistHall;
        }
        int ACCBigHallFunc()
        {
            int accHall = 0;
            if (cb_BigHall_ACC.SelectedIndex == 0)
            {
                accHall = 5;
            }
            if (cb_BigHall_ACC.SelectedIndex == 1)
            {
                accHall = 10;
            }
            if (cb_BigHall_ACC.SelectedIndex == 2)
            {
                accHall = 15;
            }
            if (cb_BigHall_ACC.SelectedIndex == 3)
            {
                accHall = 20;
            }
            if (cb_BigHall_ACC.SelectedIndex == 4)
            {
                accHall = 30;
            }
            if (cb_BigHall_ACC.SelectedIndex == 5)
            {
                accHall = 40;
            }
            if (cb_BigHall_ACC.SelectedIndex == 6)
            {
                accHall = 50;
            }
            if (cb_BigHall_ACC.SelectedIndex == 7)
            {
                accHall = 60;
            }
            if (cb_BigHall_ACC.SelectedIndex == 8)
            {
                accHall = 70;
            }
            if (cb_BigHall_ACC.SelectedIndex == 9)
            {
                accHall = 80;
            }
            return accHall;
        }

        //Бонусы комплектов

        void ComplectsFuncDB(double hp, double atk, double def, double speed, double[] ComplectsV, int[] ComplectsVINT, double[] Complects15)
        {
            double HPComplects = 0.0;
            double ATKComplects = 0.0;
            double DEFComplects = 0.0;
            double SPDComplects = 0.0;
            int CritChanceComplects = 0;
            int CritDamageComplects = 0;
            int ACCComplects = 0;
            int ResistComplects = 0;

            double CritChanceComplectsDB = 0.0;
            double CritDamageComplectsDB = 0.0;
            double ACCComplectsDB = 0.0;
            double ResistComplectsDB = 0.0;

            if (cb4_SUPTalent.SelectedIndex == 2 | cb44_SUPTalent.SelectedIndex == 2)
            {
                if (comboBox_Complects.SelectedIndex == 0)
                {
                    SPDComplects = speed / 100 * (12 * 1.15);
                }

                if (comboBox_Complects.SelectedIndex == 2)
                {
                    ATKComplects = atk / 100 * (15 * 1.15);
                }
                if (comboBox_Complects.SelectedIndex == 3)
                {
                    DEFComplects = def / 100 * (15 * 1.15);
                }
                if (comboBox_Complects.SelectedIndex == 4)
                {
                    HPComplects = hp / 100 * (15 * 1.15);
                }

                if (comboBox_Complects.SelectedIndex == 25)
                {
                    ATKComplects = atk / 100 * (15 * 1.15);
                }

                if (comboBox_Complects.SelectedIndex == 26)
                {
                    HPComplects = hp / 100 * (15 * 1.15);
                }

                if (comboBox_Complects.SelectedIndex == 27)
                {
                    ATKComplects = atk / 100 * (15 * 1.15);
                }

                if (comboBox_Complects.SelectedIndex == 29)
                {
                    HPComplects = hp / 100 * (15 * 1.15);
                }
                if (comboBox_Complects.SelectedIndex == 30)
                {
                    SPDComplects = speed / 100 * (12 * 1.15);
                }


                if (comboBox_Complects.SelectedIndex == 1)
                {
                    ACCComplectsDB = 40 * 1.15;
                }
                if (comboBox_Complects.SelectedIndex == 5)
                {
                    CritChanceComplectsDB = 12 * 1.15;
                }
                if (comboBox_Complects.SelectedIndex == 6)
                {
                    CritDamageComplectsDB = 20 * 1.15;
                }
                if (comboBox_Complects.SelectedIndex == 7)
                {
                    ResistComplectsDB = 40 * 1.15;
                }
                if (comboBox_Complects.SelectedIndex == 28)
                {
                    CritChanceComplectsDB = 12 * 1.15;
                }
                if (comboBox_Complects.SelectedIndex == 35)
                {
                    SPDComplects = speed / 100 * 18;
                    CritDamageComplects = 30;
                }
                if (comboBox_Complects.SelectedIndex == 36)
                {
                    HPComplects = hp / 100 * 20;
                    DEFComplects = def / 100 * 20;
                }
                if (comboBox_Complects.SelectedIndex == 37)
                {
                    HPComplects = hp / 100 * (10 * 1.15);
                    DEFComplects = def / 100 * (10 * 1.15);
                }
                if (comboBox_Complects.SelectedIndex == 38)
                {
                    ACCComplectsDB = 40 * 1.15;
                    SPDComplects = speed / 100 * (5 * 1.15);
                }
                Complects15[0] = SPDComplects;
                Complects15[1] = ATKComplects;
                Complects15[2] = DEFComplects;
                Complects15[3] = HPComplects;
                Complects15[4] = ACCComplectsDB;
                Complects15[5] = CritChanceComplectsDB;
                Complects15[6] = CritDamageComplectsDB + CritDamageComplects;
                Complects15[7] = ResistComplectsDB;
            }


            else
            {
                if (comboBox_Complects.SelectedIndex == 0)
                {
                    SPDComplects = speed / 100 * 12;
                }

                if (comboBox_Complects.SelectedIndex == 2)
                {
                    ATKComplects = atk / 100 * 15;
                }
                if (comboBox_Complects.SelectedIndex == 3)
                {
                    DEFComplects = def / 100 * 15;
                }
                if (comboBox_Complects.SelectedIndex == 4)
                {
                    HPComplects = hp / 100 * 15;
                }

                if (comboBox_Complects.SelectedIndex == 25)
                {
                    ATKComplects = atk / 100 * 15;
                }

                if (comboBox_Complects.SelectedIndex == 26)
                {
                    HPComplects = hp / 100 * 15;
                }

                if (comboBox_Complects.SelectedIndex == 27)
                {
                    ATKComplects = atk / 100 * 15;
                }

                if (comboBox_Complects.SelectedIndex == 29)
                {
                    HPComplects = hp / 100 * 15;
                }
                if (comboBox_Complects.SelectedIndex == 30)
                {
                    SPDComplects = speed / 100 * 12;
                }


                if (comboBox_Complects.SelectedIndex == 1)
                {
                    ACCComplects = 40;
                }
                if (comboBox_Complects.SelectedIndex == 5)
                {
                    CritChanceComplects = 12;
                }
                if (comboBox_Complects.SelectedIndex == 6)
                {
                    CritDamageComplects = 20;
                }
                if (comboBox_Complects.SelectedIndex == 7)
                {
                    ResistComplects = 40;
                }
                if (comboBox_Complects.SelectedIndex == 28)
                {
                    CritChanceComplects = 12;
                }
                if (comboBox_Complects.SelectedIndex == 34)
                {
                    SPDComplects = speed / 100 * 18;
                    CritDamageComplects = 30;
                }
                if (comboBox_Complects.SelectedIndex == 35)
                {
                    HPComplects = hp / 100 * 20;
                    DEFComplects = def / 100 * 20;
                }
                if (comboBox_Complects.SelectedIndex == 36)
                {
                    HPComplects = hp / 100 * 10;
                    DEFComplects = def / 100 * 10;
                }
                if (comboBox_Complects.SelectedIndex == 37)
                {
                    ACCComplects = 40;
                    SPDComplects = speed / 100 * 5;
                }

                ComplectsV[0] = SPDComplects;
                ComplectsV[1] = ATKComplects;
                ComplectsV[2] = DEFComplects;
                ComplectsV[3] = HPComplects;
                ComplectsVINT[0] = ACCComplects;
                ComplectsVINT[1] = CritChanceComplects;
                ComplectsVINT[2] = CritDamageComplects;
                ComplectsVINT[3] = ResistComplects;
            }
            return;
        }

        void ComplectsFuncDB1(double hp, double atk, double def, double speed, double[] ComplectsV1, int[] ComplectsVINT1, double[] Complects151)
        {
            double HPComplects1 = 0.0;
            double ATKComplects1 = 0.0;
            double DEFComplects1 = 0.0;
            double SPDComplects1 = 0.0;
            int CritChanceComplects1 = 0;
            int CritDamageComplects1 = 0;
            int ACCComplects1 = 0;
            int ResistComplects1 = 0;

            double CritChanceComplectsDB1 = 0.0;
            double CritDamageComplectsDB1 = 0.0;
            double ACCComplectsDB1 = 0.0;
            double ResistComplectsDB1 = 0.0;
            if (cb4_SUPTalent.SelectedIndex == 2 | cb44_SUPTalent.SelectedIndex == 2)
            {
                if (comboBox1_Complects.SelectedIndex == 0)
                {
                    SPDComplects1 = speed / 100 * (12 * 1.15);
                }

                if (comboBox1_Complects.SelectedIndex == 2)
                {
                    ATKComplects1 = atk / 100 * (15 * 1.15);
                }
                if (comboBox1_Complects.SelectedIndex == 3)
                {
                    DEFComplects1 = def / 100 * (15 * 1.15);
                }
                if (comboBox1_Complects.SelectedIndex == 4)
                {
                    HPComplects1 = hp / 100 * (15 * 1.15);
                }

                if (comboBox1_Complects.SelectedIndex == 25)
                {
                    ATKComplects1 = atk / 100 * (15 * 1.15);
                }

                if (comboBox1_Complects.SelectedIndex == 26)
                {
                    HPComplects1 = hp / 100 * (15 * 1.15);
                }

                if (comboBox1_Complects.SelectedIndex == 27)
                {
                    ATKComplects1 = atk / 100 * (15 * 1.15);
                }

                if (comboBox1_Complects.SelectedIndex == 29)
                {
                    HPComplects1 = hp / 100 * (15 * 1.15);
                }
                if (comboBox1_Complects.SelectedIndex == 30)
                {
                    SPDComplects1 = speed / 100 * (12 * 1.15);
                }


                if (comboBox1_Complects.SelectedIndex == 1)
                {
                    ACCComplectsDB1 = 40 * 1.15;
                }
                if (comboBox1_Complects.SelectedIndex == 5)
                {
                    CritChanceComplectsDB1 = 12 * 1.15;
                }
                if (comboBox1_Complects.SelectedIndex == 6)
                {
                    CritDamageComplectsDB1 = 20 * 1.15;
                }
                if (comboBox1_Complects.SelectedIndex == 7)
                {
                    ResistComplectsDB1 = 40 * 1.15;
                }
                if (comboBox1_Complects.SelectedIndex == 28)
                {
                    CritChanceComplectsDB1 = 12 * 1.15;
                }
                if (comboBox1_Complects.SelectedIndex == 35)
                {
                    SPDComplects1 = speed / 100 * 18;
                    CritDamageComplects1 = 30;
                }
                if (comboBox1_Complects.SelectedIndex == 36)
                {
                    HPComplects1 = hp / 100 * 20;
                    DEFComplects1 = def / 100 * 20;
                }
                if (comboBox1_Complects.SelectedIndex == 37)
                {
                    HPComplects1 = hp / 100 * (10 * 1.15);
                    DEFComplects1 = def / 100 * (10 * 1.15);
                }
                if (comboBox1_Complects.SelectedIndex == 38)
                {
                    ACCComplectsDB1 = 40 * 1.15;
                    SPDComplects1 = speed / 100 * (5 * 1.15);
                }
                Complects151[0] = SPDComplects1;
                Complects151[1] = ATKComplects1;
                Complects151[2] = DEFComplects1;
                Complects151[3] = HPComplects1;
                Complects151[4] = ACCComplectsDB1;
                Complects151[5] = CritChanceComplectsDB1;
                Complects151[6] = CritDamageComplectsDB1 + CritDamageComplects1;
                Complects151[7] = ResistComplectsDB1;
            }
            else
            {
                if (cb4_SUPTalent.SelectedIndex == 2 | cb44_SUPTalent.SelectedIndex == 2)
                { }
                if (comboBox1_Complects.SelectedIndex == 0)
                {
                    SPDComplects1 = speed / 100 * 12;
                }

                if (comboBox1_Complects.SelectedIndex == 2)
                {
                    ATKComplects1 = atk / 100 * 15;
                }
                if (comboBox1_Complects.SelectedIndex == 3)
                {
                    DEFComplects1 = def / 100 * 15;
                }
                if (comboBox1_Complects.SelectedIndex == 4)
                {
                    HPComplects1 = hp / 100 * 15;
                }

                if (comboBox1_Complects.SelectedIndex == 25)
                {
                    ATKComplects1 = atk / 100 * 15;
                }

                if (comboBox1_Complects.SelectedIndex == 26)
                {
                    HPComplects1 = hp / 100 * 15;
                }

                if (comboBox1_Complects.SelectedIndex == 27)
                {
                    ATKComplects1 = atk / 100 * 15;
                }

                if (comboBox1_Complects.SelectedIndex == 29)
                {
                    HPComplects1 = hp / 100 * 15;
                }
                if (comboBox1_Complects.SelectedIndex == 30)
                {
                    SPDComplects1 = speed / 100 * 12;
                }


                if (comboBox1_Complects.SelectedIndex == 1)
                {
                    ACCComplects1 = 40;
                }
                if (comboBox1_Complects.SelectedIndex == 5)
                {
                    CritChanceComplects1 = 12;
                }
                if (comboBox1_Complects.SelectedIndex == 6)
                {
                    CritDamageComplects1 = 20;
                }
                if (comboBox1_Complects.SelectedIndex == 7)
                {
                    ResistComplects1 = 40;
                }
                if (comboBox1_Complects.SelectedIndex == 28)
                {
                    CritChanceComplects1 = 12;
                }
                if (comboBox1_Complects.SelectedIndex == 35)
                {
                    SPDComplects1 = speed / 100 * 18;
                    CritDamageComplects1 = 30;
                }
                if (comboBox1_Complects.SelectedIndex == 36)
                {
                    HPComplects1 = hp / 100 * 20;
                    DEFComplects1 = def / 100 * 20;
                }
                if (comboBox1_Complects.SelectedIndex == 37)
                {
                    HPComplects1 = hp / 100 * 10;
                    DEFComplects1 = def / 100 * 10;
                }
                if (comboBox1_Complects.SelectedIndex == 38)
                {
                    ACCComplects1 = 40;
                    SPDComplects1 = speed / 100 * 5;
                }
                ComplectsV1[0] = SPDComplects1;
                ComplectsV1[1] = ATKComplects1;
                ComplectsV1[2] = DEFComplects1;
                ComplectsV1[3] = HPComplects1;
                ComplectsVINT1[0] = ACCComplects1;
                ComplectsVINT1[1] = CritChanceComplects1;
                ComplectsVINT1[2] = CritDamageComplects1;
                ComplectsVINT1[3] = ResistComplects1;
            }
            return;
        }

        void ComplectsFuncDB2(double hp, double atk, double def, double speed, double[] ComplectsV2, int[] ComplectsVINT2, double[] Complects152)
        {
            double HPComplects2 = 0.0;
            double ATKComplects2 = 0.0;
            double DEFComplects2 = 0.0;
            double SPDComplects2 = 0.0;
            int CritChanceComplects2 = 0;
            int CritDamageComplects2 = 0;
            int ACCComplects2 = 0;
            int ResistComplects2 = 0;

            double CritChanceComplectsDB2 = 0.0;
            double CritDamageComplectsDB2 = 0.0;
            double ACCComplectsDB2 = 0.0;
            double ResistComplectsDB2 = 0.0;



            if (cb4_SUPTalent.SelectedIndex == 2 | cb44_SUPTalent.SelectedIndex == 2)
            {
                if (comboBox2_Complects.SelectedIndex == 0)
                {
                    SPDComplects2 = speed / 100 * (12 * 1.15);
                }

                if (comboBox2_Complects.SelectedIndex == 2)
                {
                    ATKComplects2 = atk / 100 * (15 * 1.15);
                }
                if (comboBox2_Complects.SelectedIndex == 3)
                {
                    DEFComplects2 = def / 100 * (15 * 1.15);
                }
                if (comboBox2_Complects.SelectedIndex == 4)
                {
                    HPComplects2 = hp / 100 * (15 * 1.15);
                }

                if (comboBox2_Complects.SelectedIndex == 25)
                {
                    ATKComplects2 = atk / 100 * (15 * 1.15);
                }

                if (comboBox2_Complects.SelectedIndex == 26)
                {
                    HPComplects2 = hp / 100 * (15 * 1.15);
                }

                if (comboBox2_Complects.SelectedIndex == 27)
                {
                    ATKComplects2 = atk / 100 * (15 * 1.15);
                }

                if (comboBox2_Complects.SelectedIndex == 29)
                {
                    HPComplects2 = hp / 100 * (15 * 1.15);
                }
                if (comboBox2_Complects.SelectedIndex == 30)
                {
                    SPDComplects2 = speed / 100 * (12 * 1.15);
                }


                if (comboBox2_Complects.SelectedIndex == 1)
                {
                    ACCComplectsDB2 = 40 * 1.15;
                }
                if (comboBox2_Complects.SelectedIndex == 5)
                {
                    CritChanceComplectsDB2 = 12 * 1.15;
                }
                if (comboBox2_Complects.SelectedIndex == 6)
                {
                    CritDamageComplectsDB2 = 20 * 1.15;
                }
                if (comboBox2_Complects.SelectedIndex == 7)
                {
                    ResistComplectsDB2 = 40 * 1.15;
                }
                if (comboBox2_Complects.SelectedIndex == 28)
                {
                    CritChanceComplectsDB2 = 12 * 1.15;
                }
                if (comboBox2_Complects.SelectedIndex == 35)
                {
                    SPDComplects2 = speed / 100 * 18;
                    CritDamageComplects2 = 30;
                }
                if (comboBox2_Complects.SelectedIndex == 36)
                {
                    HPComplects2 = hp / 100 * 20;
                    DEFComplects2 = def / 100 * 20;
                }
                if (comboBox2_Complects.SelectedIndex == 37)
                {
                    HPComplects2 = hp / 100 * (10 * 1.15);
                    DEFComplects2 = def / 100 * (10 * 1.15);
                }
                if (comboBox2_Complects.SelectedIndex == 38)
                {
                    ACCComplectsDB2 = 40 * 1.15;
                    SPDComplects2 = speed / 100 * (5 * 1.15);
                }
                Complects152[0] = SPDComplects2;
                Complects152[1] = ATKComplects2;
                Complects152[2] = DEFComplects2;
                Complects152[3] = HPComplects2;
                Complects152[4] = ACCComplectsDB2;
                Complects152[5] = CritChanceComplectsDB2;
                Complects152[6] = CritDamageComplectsDB2 + CritDamageComplects2;
                Complects152[7] = ResistComplectsDB2;
            }

            else
            {
                if (comboBox2_Complects.SelectedIndex == 0)
                {
                    SPDComplects2 = speed / 100 * 12;
                }
                if (comboBox2_Complects.SelectedIndex == 2)
                {
                    ATKComplects2 = atk / 100 * 15;
                }
                if (comboBox2_Complects.SelectedIndex == 3)
                {
                    DEFComplects2 = def / 100 * 15;
                }
                if (comboBox2_Complects.SelectedIndex == 4)
                {
                    HPComplects2 = hp / 100 * 15;
                }
                if (comboBox2_Complects.SelectedIndex == 25)
                {
                    ATKComplects2 = atk / 100 * 15;
                }
                if (comboBox2_Complects.SelectedIndex == 26)
                {
                    HPComplects2 = hp / 100 * 15;
                }
                if (comboBox2_Complects.SelectedIndex == 27)
                {
                    ATKComplects2 = atk / 100 * 15;
                }
                if (comboBox2_Complects.SelectedIndex == 29)
                {
                    HPComplects2 = hp / 100 * 15;
                }
                if (comboBox2_Complects.SelectedIndex == 30)
                {
                    SPDComplects2 = speed / 100 * 12;
                }
                if (comboBox2_Complects.SelectedIndex == 1)
                {
                    ACCComplects2 = 40;
                }
                if (comboBox2_Complects.SelectedIndex == 5)
                {
                    CritChanceComplects2 = 12;
                }
                if (comboBox2_Complects.SelectedIndex == 6)
                {
                    CritDamageComplects2 = 20;
                }
                if (comboBox2_Complects.SelectedIndex == 7)
                {
                    ResistComplects2 = 40;
                }
                if (comboBox2_Complects.SelectedIndex == 28)
                {
                    CritChanceComplects2 = 12;
                }
                if (comboBox2_Complects.SelectedIndex == 35)
                {
                    SPDComplects2 = speed / 100 * 18;
                    CritDamageComplects2 = 30;
                }
                if (comboBox2_Complects.SelectedIndex == 36)
                {
                    HPComplects2 = hp / 100 * 20;
                    DEFComplects2 = def / 100 * 20;
                }
                if (comboBox2_Complects.SelectedIndex == 37)
                {
                    HPComplects2 = hp / 100 * 10;
                    DEFComplects2 = def / 100 * 10;
                }
                if (comboBox2_Complects.SelectedIndex == 38)
                {
                    ACCComplects2 = 40;
                    SPDComplects2 = speed / 100 * 5;
                }

                ComplectsV2[0] = SPDComplects2;
                ComplectsV2[1] = ATKComplects2;
                ComplectsV2[2] = DEFComplects2;
                ComplectsV2[3] = HPComplects2;
                ComplectsVINT2[0] = ACCComplects2;
                ComplectsVINT2[1] = CritChanceComplects2;
                ComplectsVINT2[2] = CritDamageComplects2;
                ComplectsVINT2[3] = ResistComplects2;
            }
            return;
        }




        void TalentsFunc(double[] TalentsMass, int[] TalentsMassINT)
        {
            double ATKTalents = 0.0;
            double HPTalents = 0.0;
            double HPTalents1 = 0.0;

            double DEFTalents = 0.0;
            double DEFTalents1 = 0.0;

            int CritCHANCETALENT = 0;
            int CritATKTALENT = 0;
            int CritATKTALENT1 = 0;
            int RESTalents = 0;
            int RESTalents1 = 0;
            int ACCTalents = 0;
            int ACCTalents1 = 0;

            if (cb1_ATKTalent.SelectedIndex == 0)
            {
                ATKTalents = 75.0;
            }
            if (cb1_ATKTalent.SelectedIndex == 1)
            {
                CritCHANCETALENT = 5;
            }
            if (cb2_ATKTalent.SelectedIndex == 1 | cb22_ATKTalent.SelectedIndex == 1)
            {
                CritATKTALENT = 10;
            }
            if (cb6_ATKTalent.SelectedIndex == 3)
            {

                CritATKTALENT1 = 20;
            }

            if (cb1_DEFTalent.SelectedIndex == 0)
            {
                DEFTalents = 75.0;
            }
            if (cb1_DEFTalent.SelectedIndex == 1)
            {
                RESTalents = 10;
            }
            if (cb6_DEFTalent.SelectedIndex == 0)
            {
                DEFTalents1 = 200.0;
            }
            if (cb6_DEFTalent.SelectedIndex == 3)
            {
                RESTalents1 = 50;
            }

            if (cb1_SUPTalent.SelectedIndex == 0)
            {
                HPTalents = 810.0;
            }
            if (cb1_SUPTalent.SelectedIndex == 1)
            {
                ACCTalents = 10;
            }
            if (cb6_SUPTalent.SelectedIndex == 0)
            {
                HPTalents1 = 3000.0;
            }
            if (cb6_SUPTalent.SelectedIndex == 3)
            {
                ACCTalents1 = 50;
            }



            TalentsMass[0] = ATKTalents;
            TalentsMass[1] = HPTalents + HPTalents1;
            TalentsMass[2] = DEFTalents + DEFTalents1;
            TalentsMassINT[0] = CritCHANCETALENT;
            TalentsMassINT[1] = CritATKTALENT + CritATKTALENT1;
            TalentsMassINT[2] = RESTalents + RESTalents1;
            TalentsMassINT[3] = ACCTalents + ACCTalents1;



            return;
        }



        //Артефакты
        void WeaponFunc(double hp, double atk, double[] WeaponDB, int[] WeaponINT)
        {
            int a = 0;
            if (tb_WP.Text == "") { tb_WP.Text = a.ToString(); }
            if (tb1_WP.Text == "") { tb1_WP.Text = a.ToString(); }
            if (tb2_WP.Text == "") { tb2_WP.Text = a.ToString(); }
            if (tb3_WP.Text == "") { tb3_WP.Text = a.ToString(); }
            if (tb4_WP.Text == "") { tb4_WP.Text = a.ToString(); }
            if (tb1_wpglif.Text == "") { tb1_wpglif.Text = a.ToString(); }
            if (tb2_wpglif.Text == "") { tb2_wpglif.Text = a.ToString(); }
            if (tb3_wpglif.Text == "") { tb3_wpglif.Text = a.ToString(); }
            if (tb4_wpglif.Text == "") { tb4_wpglif.Text = a.ToString(); }


            int WPFunc_Atk = Convert.ToInt32(tb_WP.Text);
            double WPFunc_Atk_Percent = 0.0;
            double WPFunc_hp_Percent = 0.0;
            int WPFunc_hp = 0;
            int WPFunc_spd = 0;
            int WPFunc_critchance = 0;
            int WPFunc_critATK = 0;
            int WPFunc_Resist = 0;
            int WPFunc_ACC = 0;


            int wpGlifHP = 0;
            int wpGlifSPD = 0;
            int wpGlifResist = 0;
            int wpGlifACC = 0;

            double wpGlifATK_PER = 0.0;
            double wpGlifHP_PER = 0.0;


            if (CB1_WP.SelectedIndex == 0)
            {
                WPFunc_Atk_Percent = Convert.ToDouble(tb1_WP.Text);
                wpGlifATK_PER = Convert.ToDouble(tb1_wpglif.Text);
            }
            if (CB1_WP.SelectedIndex == 1)
            {
                WPFunc_hp = Convert.ToInt32(tb1_WP.Text);
                wpGlifHP = Convert.ToInt32(tb1_wpglif.Text);
            }
            if (CB1_WP.SelectedIndex == 2)
            {
                WPFunc_hp_Percent = Convert.ToDouble(tb1_WP.Text);
                wpGlifHP_PER = Convert.ToDouble(tb1_wpglif.Text);
            }
            if (CB1_WP.SelectedIndex == 3)
            {
                WPFunc_spd = Convert.ToInt32(tb1_WP.Text);
                wpGlifSPD = Convert.ToInt32(tb1_wpglif.Text);
            }
            if (CB1_WP.SelectedIndex == 4)
            { WPFunc_critchance = Convert.ToInt32(tb1_WP.Text); }
            if (CB1_WP.SelectedIndex == 5)
            { WPFunc_critATK = Convert.ToInt32(tb1_WP.Text); }
            if (CB1_WP.SelectedIndex == 6)
            {
                WPFunc_Resist = Convert.ToInt32(tb1_WP.Text);
                wpGlifResist = Convert.ToInt32(tb1_wpglif.Text);
            }
            if (CB1_WP.SelectedIndex == 7)
            {
                WPFunc_ACC = Convert.ToInt32(tb1_WP.Text);
                wpGlifACC = Convert.ToInt32(tb1_wpglif.Text);
            }

            if (CB2_WP.SelectedIndex == 0)
            {
                WPFunc_Atk_Percent = Convert.ToDouble(tb2_WP.Text);
                wpGlifATK_PER = Convert.ToDouble(tb2_wpglif.Text);
            }
            if (CB2_WP.SelectedIndex == 1)
            {
                WPFunc_hp = Convert.ToInt32(tb2_WP.Text);
                wpGlifHP = Convert.ToInt32(tb2_wpglif.Text);
            }
            if (CB2_WP.SelectedIndex == 2)
            {
                WPFunc_hp_Percent = Convert.ToDouble(tb2_WP.Text);
                wpGlifHP_PER = Convert.ToDouble(tb2_wpglif.Text);
            }
            if (CB2_WP.SelectedIndex == 3)
            {
                WPFunc_spd = Convert.ToInt32(tb2_WP.Text);
                wpGlifSPD = Convert.ToInt32(tb2_wpglif.Text);
            }
            if (CB2_WP.SelectedIndex == 4)
            { WPFunc_critchance = Convert.ToInt32(tb2_WP.Text); }
            if (CB2_WP.SelectedIndex == 5)
            { WPFunc_critATK = Convert.ToInt32(tb2_WP.Text); }
            if (CB2_WP.SelectedIndex == 6)
            {
                WPFunc_Resist = Convert.ToInt32(tb2_WP.Text);
                wpGlifResist = Convert.ToInt32(tb2_wpglif.Text);
            }
            if (CB2_WP.SelectedIndex == 7)
            {
                WPFunc_ACC = Convert.ToInt32(tb2_WP.Text);
                wpGlifACC = Convert.ToInt32(tb2_wpglif.Text);
            }

            if (CB3_WP.SelectedIndex == 0)
            {
                WPFunc_Atk_Percent = Convert.ToDouble(tb3_WP.Text);
                wpGlifATK_PER = Convert.ToDouble(tb3_wpglif.Text);
            }
            if (CB3_WP.SelectedIndex == 1)
            {
                WPFunc_hp = Convert.ToInt32(tb3_WP.Text);
                wpGlifHP = Convert.ToInt32(tb3_wpglif.Text);
            }
            if (CB3_WP.SelectedIndex == 2)
            {
                WPFunc_hp_Percent = Convert.ToDouble(tb3_WP.Text);
                wpGlifHP_PER = Convert.ToDouble(tb3_wpglif.Text);
            }
            if (CB3_WP.SelectedIndex == 3)
            {
                WPFunc_spd = Convert.ToInt32(tb3_WP.Text);
                wpGlifSPD = Convert.ToInt32(tb3_wpglif.Text);
            }
            if (CB3_WP.SelectedIndex == 4)
            { WPFunc_critchance = Convert.ToInt32(tb3_WP.Text); }
            if (CB3_WP.SelectedIndex == 5)
            { WPFunc_critATK = Convert.ToInt32(tb3_WP.Text); }
            if (CB3_WP.SelectedIndex == 6)
            {
                WPFunc_Resist = Convert.ToInt32(tb3_WP.Text);
                wpGlifResist = Convert.ToInt32(tb3_wpglif.Text);
            }
            if (CB3_WP.SelectedIndex == 7)
            {
                WPFunc_ACC = Convert.ToInt32(tb3_WP.Text);
                wpGlifACC = Convert.ToInt32(tb3_wpglif.Text);
            }

            if (CB4_WP.SelectedIndex == 0)
            {
                WPFunc_Atk_Percent = Convert.ToDouble(tb4_WP.Text);
                wpGlifATK_PER = Convert.ToDouble(tb4_wpglif.Text);
            }
            if (CB4_WP.SelectedIndex == 1)
            {
                WPFunc_hp = Convert.ToInt32(tb4_WP.Text);
                wpGlifHP = Convert.ToInt32(tb4_wpglif.Text);
            }
            if (CB4_WP.SelectedIndex == 2)
            {
                WPFunc_hp_Percent = Convert.ToDouble(tb4_WP.Text);
                wpGlifHP_PER = Convert.ToDouble(tb4_wpglif.Text);
            }
            if (CB4_WP.SelectedIndex == 3)
            {
                WPFunc_spd = Convert.ToInt32(tb4_WP.Text);
                wpGlifSPD = Convert.ToInt32(tb4_wpglif.Text);
            }
            if (CB4_WP.SelectedIndex == 4)
            { WPFunc_critchance = Convert.ToInt32(tb4_WP.Text); }
            if (CB4_WP.SelectedIndex == 5)
            { WPFunc_critATK = Convert.ToInt32(tb4_WP.Text); }
            if (CB4_WP.SelectedIndex == 6)
            {
                WPFunc_Resist = Convert.ToInt32(tb4_WP.Text);
                wpGlifResist = Convert.ToInt32(tb4_wpglif.Text);
            }
            if (CB4_WP.SelectedIndex == 7)
            {
                WPFunc_ACC = Convert.ToInt32(tb4_WP.Text);
                wpGlifACC = Convert.ToInt32(tb4_wpglif.Text);
            }


            double WPFunc_Atk_Fin = atk / 100 * (WPFunc_Atk_Percent + wpGlifATK_PER);
            double WPFunc_hp_Fin = hp / 100 * (WPFunc_hp_Percent + wpGlifHP_PER);

            WeaponDB[0] = WPFunc_Atk_Fin;
            WeaponDB[1] = WPFunc_hp_Fin;
            WeaponINT[0] = WPFunc_Atk;
            WeaponINT[1] = WPFunc_hp + wpGlifHP;
            WeaponINT[2] = WPFunc_spd + wpGlifSPD;
            WeaponINT[3] = WPFunc_critchance;
            WeaponINT[4] = WPFunc_critATK;
            WeaponINT[5] = WPFunc_Resist + wpGlifResist;
            WeaponINT[6] = WPFunc_ACC + wpGlifACC;
            return;
        }

        void HelmetFunc(double hp, double atk, double def, double[] HelmetDB, int[] HelmetINT)
        {
            int a = 0;
            if (tb_HM.Text == "") { tb_HM.Text = a.ToString(); }
            if (tb1_HM.Text == "") { tb1_HM.Text = a.ToString(); }
            if (tb2_HM.Text == "") { tb2_HM.Text = a.ToString(); }
            if (tb3_HM.Text == "") { tb3_HM.Text = a.ToString(); }
            if (tb4_HM.Text == "") { tb4_HM.Text = a.ToString(); }
            if (tb1_hmglif.Text == "") { tb1_hmglif.Text = a.ToString(); }
            if (tb2_hmglif.Text == "") { tb2_hmglif.Text = a.ToString(); }
            if (tb3_hmglif.Text == "") { tb3_hmglif.Text = a.ToString(); }
            if (tb4_hmglif.Text == "") { tb4_hmglif.Text = a.ToString(); }
            int HMFunc_hp = Convert.ToInt32(tb_HM.Text);

            double HMFunc_def_Percent = 0.0;
            double HMFunc_hp_Percent = 0.0;
            double HMFunc_atk_Percent = 0.0;
            int HMFunc_def = 0;
            int HMFunc_atk = 0;
            int HMFunc_spd = 0;
            int HMFunc_critchance = 0;
            int HMFunc_critATK = 0;
            int HMFunc_Resist = 0;
            int HMFunc_ACC = 0;

            int hmGlifATK = 0;
            int hmGlifDEF = 0;
            int hmGlifSPD = 0;
            int hmGlifResist = 0;
            int hmGlifACC = 0;

            double hmGlifATK_PER = 0.0;
            double hmGlifHP_PER = 0.0;
            double hmGlifDEF_PER = 0.0;

            if (cb1_HM.SelectedIndex == 0)
            {
                HMFunc_atk = Convert.ToInt32(tb1_HM.Text);
                hmGlifATK = Convert.ToInt32(tb1_hmglif.Text);
            }
            if (cb1_HM.SelectedIndex == 1)
            {
                HMFunc_atk_Percent = Convert.ToDouble(tb1_HM.Text);
                hmGlifATK_PER = Convert.ToDouble(tb1_hmglif.Text);
            }
            if (cb1_HM.SelectedIndex == 2)
            {
                HMFunc_hp_Percent = Convert.ToDouble(tb1_HM.Text);
                hmGlifHP_PER = Convert.ToDouble(tb1_hmglif.Text);
            }
            if (cb1_HM.SelectedIndex == 3)
            {
                HMFunc_def = Convert.ToInt32(tb1_HM.Text);
                hmGlifDEF = Convert.ToInt32(tb1_hmglif.Text);
            }
            if (cb1_HM.SelectedIndex == 4)
            {
                HMFunc_def_Percent = Convert.ToDouble(tb1_HM.Text);
                hmGlifDEF_PER = Convert.ToDouble(tb1_hmglif.Text);
            }
            if (cb1_HM.SelectedIndex == 5)
            {
                HMFunc_spd = Convert.ToInt32(tb1_HM.Text);
                hmGlifSPD = Convert.ToInt32(tb1_hmglif.Text);
            }
            if (cb1_HM.SelectedIndex == 6)
            {
                HMFunc_critchance = Convert.ToInt32(tb1_HM.Text);
            }
            if (cb1_HM.SelectedIndex == 7)
            {
                HMFunc_critATK = Convert.ToInt32(tb1_HM.Text);
            }
            if (cb1_HM.SelectedIndex == 8)
            {
                HMFunc_Resist = Convert.ToInt32(tb1_HM.Text);
                hmGlifResist = Convert.ToInt32(tb1_hmglif.Text);
            }
            if (cb1_HM.SelectedIndex == 9)
            {
                HMFunc_ACC = Convert.ToInt32(tb1_HM.Text);
                hmGlifACC = Convert.ToInt32(tb1_hmglif.Text);
            }


            if (cb2_HM.SelectedIndex == 0)
            {
                HMFunc_atk = Convert.ToInt32(tb2_HM.Text);
                hmGlifATK = Convert.ToInt32(tb2_hmglif.Text);
            }
            if (cb2_HM.SelectedIndex == 1)
            {
                HMFunc_atk_Percent = Convert.ToDouble(tb2_HM.Text);
                hmGlifATK_PER = Convert.ToDouble(tb2_hmglif.Text);
            }
            if (cb2_HM.SelectedIndex == 2)
            {
                HMFunc_hp_Percent = Convert.ToDouble(tb2_HM.Text);
                hmGlifHP_PER = Convert.ToDouble(tb2_hmglif.Text);
            }
            if (cb2_HM.SelectedIndex == 3)
            {
                HMFunc_def = Convert.ToInt32(tb2_HM.Text);
                hmGlifDEF = Convert.ToInt32(tb2_hmglif.Text);
            }
            if (cb2_HM.SelectedIndex == 4)
            {
                HMFunc_def_Percent = Convert.ToDouble(tb2_HM.Text);
                hmGlifDEF_PER = Convert.ToDouble(tb2_hmglif.Text);
            }
            if (cb2_HM.SelectedIndex == 5)
            {
                HMFunc_spd = Convert.ToInt32(tb2_HM.Text);
                hmGlifSPD = Convert.ToInt32(tb2_hmglif.Text);
            }
            if (cb2_HM.SelectedIndex == 6)
            {
                HMFunc_critchance = Convert.ToInt32(tb2_HM.Text);
            }
            if (cb2_HM.SelectedIndex == 7)
            {
                HMFunc_critATK = Convert.ToInt32(tb2_HM.Text);
            }
            if (cb2_HM.SelectedIndex == 8)
            {
                HMFunc_Resist = Convert.ToInt32(tb2_HM.Text);
                hmGlifResist = Convert.ToInt32(tb2_hmglif.Text);
            }
            if (cb2_HM.SelectedIndex == 9)
            {
                HMFunc_ACC = Convert.ToInt32(tb2_HM.Text);
                hmGlifACC = Convert.ToInt32(tb2_hmglif.Text);
            }

            if (cb3_HM.SelectedIndex == 0)
            {
                HMFunc_atk = Convert.ToInt32(tb3_HM.Text);
                hmGlifATK = Convert.ToInt32(tb3_hmglif.Text);
            }
            if (cb3_HM.SelectedIndex == 1)
            {
                HMFunc_atk_Percent = Convert.ToDouble(tb3_HM.Text);
                hmGlifATK_PER = Convert.ToDouble(tb3_hmglif.Text);
            }
            if (cb3_HM.SelectedIndex == 2)
            {
                HMFunc_hp_Percent = Convert.ToDouble(tb3_HM.Text);
                hmGlifHP_PER = Convert.ToDouble(tb3_hmglif.Text);
            }
            if (cb3_HM.SelectedIndex == 3)
            {
                HMFunc_def = Convert.ToInt32(tb3_HM.Text);
                hmGlifDEF = Convert.ToInt32(tb3_hmglif.Text);
            }
            if (cb3_HM.SelectedIndex == 4)
            {
                HMFunc_def_Percent = Convert.ToDouble(tb3_HM.Text);
                hmGlifDEF_PER = Convert.ToDouble(tb3_hmglif.Text);
            }
            if (cb3_HM.SelectedIndex == 5)
            {
                HMFunc_spd = Convert.ToInt32(tb3_HM.Text);
                hmGlifSPD = Convert.ToInt32(tb3_hmglif.Text);
            }
            if (cb3_HM.SelectedIndex == 6)
            {
                HMFunc_critchance = Convert.ToInt32(tb3_HM.Text);
            }
            if (cb3_HM.SelectedIndex == 7)
            {
                HMFunc_critATK = Convert.ToInt32(tb3_HM.Text);
            }
            if (cb3_HM.SelectedIndex == 8)
            {
                HMFunc_Resist = Convert.ToInt32(tb3_HM.Text);
                hmGlifResist = Convert.ToInt32(tb3_hmglif.Text);
            }
            if (cb3_HM.SelectedIndex == 9)
            {
                HMFunc_ACC = Convert.ToInt32(tb3_HM.Text);
                hmGlifACC = Convert.ToInt32(tb3_hmglif.Text);
            }

            if (cb4_HM.SelectedIndex == 0)
            {
                HMFunc_atk = Convert.ToInt32(tb4_HM.Text);
                hmGlifATK = Convert.ToInt32(tb4_hmglif.Text);
            }
            if (cb4_HM.SelectedIndex == 1)
            {
                HMFunc_atk_Percent = Convert.ToDouble(tb4_HM.Text);
                hmGlifATK_PER = Convert.ToDouble(tb4_hmglif.Text);
            }
            if (cb4_HM.SelectedIndex == 2)
            {
                HMFunc_hp_Percent = Convert.ToDouble(tb4_HM.Text);
                hmGlifHP_PER = Convert.ToDouble(tb4_hmglif.Text);
            }
            if (cb4_HM.SelectedIndex == 3)
            {
                HMFunc_def = Convert.ToInt32(tb4_HM.Text);
                hmGlifDEF = Convert.ToInt32(tb4_hmglif.Text);
            }
            if (cb4_HM.SelectedIndex == 4)
            {
                HMFunc_def_Percent = Convert.ToDouble(tb4_HM.Text);
                hmGlifDEF_PER = Convert.ToDouble(tb4_hmglif.Text);
            }
            if (cb4_HM.SelectedIndex == 5)
            {
                HMFunc_spd = Convert.ToInt32(tb4_HM.Text);
                hmGlifSPD = Convert.ToInt32(tb4_hmglif.Text);
            }
            if (cb4_HM.SelectedIndex == 6)
            {
                HMFunc_critchance = Convert.ToInt32(tb4_HM.Text);
            }
            if (cb4_HM.SelectedIndex == 7)
            {
                HMFunc_critATK = Convert.ToInt32(tb4_HM.Text);
            }
            if (cb4_HM.SelectedIndex == 8)
            {
                HMFunc_Resist = Convert.ToInt32(tb4_HM.Text);
                hmGlifResist = Convert.ToInt32(tb4_hmglif.Text);
            }
            if (cb4_HM.SelectedIndex == 9)
            {
                HMFunc_ACC = Convert.ToInt32(tb4_HM.Text);
                hmGlifACC = Convert.ToInt32(tb4_hmglif.Text);
            }

            double HMFunc_def_Fin = def / 100 * (HMFunc_def_Percent + hmGlifDEF_PER);
            double HMFunc_hp_Fin = hp / 100 * (HMFunc_hp_Percent + hmGlifHP_PER);
            double HMFunc_atk_Fin = atk / 100 * (HMFunc_atk_Percent + hmGlifATK_PER);
            HelmetDB[0] = HMFunc_def_Fin;
            HelmetDB[1] = HMFunc_hp_Fin;
            HelmetDB[2] = HMFunc_atk_Fin;

            HelmetINT[0] = HMFunc_def + hmGlifDEF;
            HelmetINT[1] = HMFunc_hp;
            HelmetINT[2] = HMFunc_atk + hmGlifATK;
            HelmetINT[3] = HMFunc_spd + hmGlifSPD;
            HelmetINT[4] = HMFunc_critchance;
            HelmetINT[5] = HMFunc_critATK;
            HelmetINT[6] = HMFunc_Resist + hmGlifResist;
            HelmetINT[7] = HMFunc_ACC + hmGlifACC;
            return;
        }

        void ShieldFunc(double hp, double def, double[] ShieldDB, int[] ShieldINT)
        {
            int a = 0;
            if (tb_SHD.Text == "") { tb_SHD.Text = a.ToString(); }
            if (tb1_SHD.Text == "") { tb1_SHD.Text = a.ToString(); }
            if (tb2_SHD.Text == "") { tb2_SHD.Text = a.ToString(); }
            if (tb3_SHD.Text == "") { tb3_SHD.Text = a.ToString(); }
            if (tb4_SHD.Text == "") { tb4_SHD.Text = a.ToString(); }
            if (tb1_shdglif.Text == "") { tb1_shdglif.Text = a.ToString(); }
            if (tb2_shdglif.Text == "") { tb2_shdglif.Text = a.ToString(); }
            if (tb3_shdglif.Text == "") { tb3_shdglif.Text = a.ToString(); }
            if (tb4_shdglif.Text == "") { tb4_shdglif.Text = a.ToString(); }

            int SHDFunc_def = Convert.ToInt32(tb_SHD.Text);
            double SHDFunc_def_Percent = 0.0;
            double SHDFunc_hp_Percent = 0.0;
            int SHDFunc_hp = 0;
            int SHDFunc_spd = 0;
            int SHDFunc_critchance = 0;
            int SHDFunc_critATK = 0;
            int SHDFunc_Resist = 0;
            int SHDFunc_ACC = 0;


            int shdGlifHP = 0;
            int shdGlifSPD = 0;
            int shdGlifResist = 0;
            int shdGlifACC = 0;


            double shdGlifHP_PER = 0.0;
            double shdGlifDEF_PER = 0.0;


            if (cb1_SHD.SelectedIndex == 0)
            {
                SHDFunc_def_Percent = Convert.ToDouble(tb1_SHD.Text);
                shdGlifDEF_PER = Convert.ToDouble(tb1_shdglif.Text);
            }
            if (cb1_SHD.SelectedIndex == 1)
            {
                SHDFunc_hp = Convert.ToInt32(tb1_SHD.Text);
                shdGlifHP = Convert.ToInt32(tb1_shdglif.Text);
            }
            if (cb1_SHD.SelectedIndex == 2)
            {
                SHDFunc_hp_Percent = Convert.ToDouble(tb1_SHD.Text);
                shdGlifHP_PER = Convert.ToDouble(tb1_shdglif.Text);
            }
            if (cb1_SHD.SelectedIndex == 3)
            {
                SHDFunc_spd = Convert.ToInt32(tb1_SHD.Text);
                shdGlifSPD = Convert.ToInt32(tb1_shdglif.Text);
            }
            if (cb1_SHD.SelectedIndex == 4)
            { SHDFunc_critchance = Convert.ToInt32(tb1_SHD.Text); }
            if (cb1_SHD.SelectedIndex == 5)
            { SHDFunc_critATK = Convert.ToInt32(tb1_SHD.Text); }
            if (cb1_SHD.SelectedIndex == 6)
            {
                SHDFunc_Resist = Convert.ToInt32(tb1_SHD.Text);
                shdGlifResist = Convert.ToInt32(tb1_shdglif.Text);
            }
            if (cb1_SHD.SelectedIndex == 7)
            {
                SHDFunc_ACC = Convert.ToInt32(tb1_SHD.Text);
                shdGlifACC = Convert.ToInt32(tb1_shdglif.Text);
            }

            if (cb2_SHD.SelectedIndex == 0)
            {
                SHDFunc_def_Percent = Convert.ToDouble(tb2_SHD.Text);
                shdGlifDEF_PER = Convert.ToDouble(tb2_shdglif.Text);
            }
            if (cb2_SHD.SelectedIndex == 1)
            {
                SHDFunc_hp = Convert.ToInt32(tb2_WP.Text);
                shdGlifHP = Convert.ToInt32(tb2_shdglif.Text);
            }
            if (cb2_SHD.SelectedIndex == 2)
            {
                SHDFunc_hp_Percent = Convert.ToDouble(tb2_SHD.Text);
                shdGlifHP_PER = Convert.ToDouble(tb2_shdglif.Text);
            }
            if (cb2_SHD.SelectedIndex == 3)
            {
                SHDFunc_spd = Convert.ToInt32(tb2_SHD.Text);
                shdGlifSPD = Convert.ToInt32(tb2_shdglif.Text);
            }
            if (cb2_SHD.SelectedIndex == 4)
            { SHDFunc_critchance = Convert.ToInt32(tb2_SHD.Text); }
            if (cb2_SHD.SelectedIndex == 5)
            { SHDFunc_critATK = Convert.ToInt32(tb2_SHD.Text); }
            if (cb2_SHD.SelectedIndex == 6)
            {
                SHDFunc_Resist = Convert.ToInt32(tb2_SHD.Text);
                shdGlifResist = Convert.ToInt32(tb2_shdglif.Text);
            }
            if (cb2_SHD.SelectedIndex == 7)
            {
                SHDFunc_ACC = Convert.ToInt32(tb2_SHD.Text);
                shdGlifACC = Convert.ToInt32(tb2_shdglif.Text);
            }

            if (cb3_SHD.SelectedIndex == 0)
            {
                SHDFunc_def_Percent = Convert.ToDouble(tb3_SHD.Text);
                shdGlifDEF_PER = Convert.ToDouble(tb3_shdglif.Text);
            }
            if (cb3_SHD.SelectedIndex == 1)
            {
                SHDFunc_hp = Convert.ToInt32(tb3_SHD.Text);
                shdGlifHP = Convert.ToInt32(tb3_shdglif.Text);
            }
            if (cb3_SHD.SelectedIndex == 2)
            {
                SHDFunc_hp_Percent = Convert.ToDouble(tb3_SHD.Text);
                shdGlifHP_PER = Convert.ToDouble(tb3_shdglif.Text);
            }
            if (cb3_SHD.SelectedIndex == 3)
            {
                SHDFunc_spd = Convert.ToInt32(tb3_SHD.Text);
                shdGlifSPD = Convert.ToInt32(tb3_shdglif.Text);
            }
            if (cb3_SHD.SelectedIndex == 4)
            { SHDFunc_critchance = Convert.ToInt32(tb3_SHD.Text); }
            if (cb3_SHD.SelectedIndex == 5)
            { SHDFunc_critATK = Convert.ToInt32(tb3_SHD.Text); }
            if (cb3_SHD.SelectedIndex == 6)
            {
                SHDFunc_Resist = Convert.ToInt32(tb3_SHD.Text);
                shdGlifResist = Convert.ToInt32(tb3_shdglif.Text);
            }
            if (cb3_SHD.SelectedIndex == 7)
            {
                SHDFunc_ACC = Convert.ToInt32(tb3_SHD.Text);
                shdGlifACC = Convert.ToInt32(tb3_shdglif.Text);
            }

            if (cb4_SHD.SelectedIndex == 0)
            {
                SHDFunc_def_Percent = Convert.ToDouble(tb4_SHD.Text);
                shdGlifDEF_PER = Convert.ToDouble(tb4_shdglif.Text);
            }
            if (cb4_SHD.SelectedIndex == 1)
            {
                SHDFunc_hp = Convert.ToInt32(tb4_SHD.Text);
                shdGlifHP = Convert.ToInt32(tb4_shdglif.Text);
            }
            if (cb4_SHD.SelectedIndex == 2)
            {
                SHDFunc_hp_Percent = Convert.ToDouble(tb4_SHD.Text);
                shdGlifHP_PER = Convert.ToDouble(tb4_shdglif.Text);
            }
            if (cb4_SHD.SelectedIndex == 3)
            {
                SHDFunc_spd = Convert.ToInt32(tb4_SHD.Text);
                shdGlifSPD = Convert.ToInt32(tb4_shdglif.Text);
            }
            if (cb4_SHD.SelectedIndex == 4)
            { SHDFunc_critchance = Convert.ToInt32(tb4_SHD.Text); }
            if (cb4_SHD.SelectedIndex == 5)
            { SHDFunc_critATK = Convert.ToInt32(tb4_SHD.Text); }
            if (cb4_SHD.SelectedIndex == 6)
            {
                SHDFunc_Resist = Convert.ToInt32(tb4_SHD.Text);
                shdGlifResist = Convert.ToInt32(tb4_shdglif.Text);
            }
            if (cb4_SHD.SelectedIndex == 7)
            {
                SHDFunc_ACC = Convert.ToInt32(tb4_SHD.Text);
                shdGlifACC = Convert.ToInt32(tb4_shdglif.Text);
            }


            double SHDFunc_def_Fin = def / 100 * (SHDFunc_def_Percent + shdGlifDEF_PER);
            double SHDFunc_hp_Fin = hp / 100 * (SHDFunc_hp_Percent + shdGlifHP_PER);

            ShieldDB[0] = SHDFunc_def_Fin;
            ShieldDB[1] = SHDFunc_hp_Fin;
            ShieldINT[0] = SHDFunc_def;
            ShieldINT[1] = SHDFunc_hp + shdGlifHP;
            ShieldINT[2] = SHDFunc_spd + shdGlifSPD;
            ShieldINT[3] = SHDFunc_critchance;
            ShieldINT[4] = SHDFunc_critATK;
            ShieldINT[5] = SHDFunc_Resist + shdGlifResist;
            ShieldINT[6] = SHDFunc_ACC + shdGlifACC;

            return;
        }

        void GLSFunc(double hp, double def, double atk, double[] GLSDB, int[] GLSINT)
        {
            int a = 0;
            if (tb_GLS.Text == "") { tb_GLS.Text = a.ToString(); }
            if (tb1_GLS.Text == "") { tb1_GLS.Text = a.ToString(); }
            if (tb2_GLS.Text == "") { tb2_GLS.Text = a.ToString(); }
            if (tb3_GLS.Text == "") { tb3_GLS.Text = a.ToString(); }
            if (tb4_GLS.Text == "") { tb4_GLS.Text = a.ToString(); }
            if (tb1_glsglif.Text == "") { tb1_glsglif.Text = a.ToString(); }
            if (tb2_glsglif.Text == "") { tb2_glsglif.Text = a.ToString(); }
            if (tb3_glsglif.Text == "") { tb3_glsglif.Text = a.ToString(); }
            if (tb4_glsglif.Text == "") { tb4_glsglif.Text = a.ToString(); }

            double GLSFunc_def_Percent = 0.0;
            double GLSFunc_hp_Percent = 0.0;
            double GLSFunc_atk_Percent = 0.0;
            int GLSFunc_hp = 0;
            int GLSFunc_def = 0;
            int GLSFunc_atk = 0;
            int GLSFunc_spd = 0;
            int GLSFunc_critchance = 0;
            int GLSFunc_critATK = 0;
            int GLSFunc_Resist = 0;
            int GLSFunc_ACC = 0;

            int glsGlifATK = 0;
            int glsGlifHP = 0;
            int glsGlifDEF = 0;
            int glsGlifSPD = 0;
            int glsGlifResist = 0;
            int glsGlifACC = 0;

            double glsGlifATK_PER = 0.0;
            double glsGlifHP_PER = 0.0;
            double glsGlifDEF_PER = 0.0;


            if (cb_GLS.SelectedIndex == 0)
            {
                GLSFunc_atk = Convert.ToInt32(tb_GLS.Text);

            }
            if (cb_GLS.SelectedIndex == 1)
            {
                GLSFunc_atk_Percent = Convert.ToDouble(tb_GLS.Text);

            }
            if (cb_GLS.SelectedIndex == 2)
            { GLSFunc_hp = Convert.ToInt32(tb_GLS.Text); }
            if (cb_GLS.SelectedIndex == 3)
            {
                GLSFunc_hp_Percent = Convert.ToDouble(tb_GLS.Text);

            }
            if (cb_GLS.SelectedIndex == 4)
            { GLSFunc_def = Convert.ToInt32(tb_GLS.Text); }
            if (cb_GLS.SelectedIndex == 5)
            { GLSFunc_def_Percent = Convert.ToDouble(tb_GLS.Text); }
            if (cb_GLS.SelectedIndex == 6)
            { GLSFunc_critchance = Convert.ToInt32(tb_GLS.Text); }
            if (cb_GLS.SelectedIndex == 7)
            { GLSFunc_critATK = Convert.ToInt32(tb_GLS.Text); }

            if (cb1_GLS.SelectedIndex == 0)
            {
                GLSFunc_atk = Convert.ToInt32(tb1_GLS.Text);
                glsGlifATK = Convert.ToInt32(tb1_glsglif.Text);
            }

            if (cb1_GLS.SelectedIndex == 1)
            {
                GLSFunc_atk_Percent = Convert.ToDouble(tb1_GLS.Text);
                glsGlifATK_PER = Convert.ToDouble(tb1_glsglif.Text);
            }
            if (cb1_GLS.SelectedIndex == 2)
            {
                GLSFunc_hp = Convert.ToInt32(tb1_GLS.Text);
                glsGlifHP = Convert.ToInt32(tb1_glsglif.Text);
            }
            if (cb1_GLS.SelectedIndex == 3)
            {
                GLSFunc_hp_Percent = Convert.ToDouble(tb1_GLS.Text);
                glsGlifHP_PER = Convert.ToDouble(tb1_glsglif.Text);
            }
            if (cb1_GLS.SelectedIndex == 4)
            {
                GLSFunc_def = Convert.ToInt32(tb1_GLS.Text);
                glsGlifDEF = Convert.ToInt32(tb1_glsglif.Text);
            }
            if (cb1_GLS.SelectedIndex == 5)
            {
                GLSFunc_def_Percent = Convert.ToDouble(tb1_GLS.Text);
                glsGlifDEF_PER = Convert.ToDouble(tb1_glsglif.Text);
            }
            if (cb1_GLS.SelectedIndex == 6)
            {
                GLSFunc_spd = Convert.ToInt32(tb1_GLS.Text);
                glsGlifSPD = Convert.ToInt32(tb1_glsglif.Text);
            }
            if (cb1_GLS.SelectedIndex == 7)
            { GLSFunc_critchance = Convert.ToInt32(tb1_GLS.Text); }
            if (cb1_GLS.SelectedIndex == 8)
            { GLSFunc_critATK = Convert.ToInt32(tb1_GLS.Text); }
            if (cb1_GLS.SelectedIndex == 9)
            {
                GLSFunc_Resist = Convert.ToInt32(tb1_GLS.Text);
                glsGlifResist = Convert.ToInt32(tb1_glsglif.Text);
            }
            if (cb1_GLS.SelectedIndex == 10)
            {
                GLSFunc_ACC = Convert.ToInt32(tb1_GLS.Text);
                glsGlifACC = Convert.ToInt32(tb1_glsglif.Text);
            }




            if (cb2_GLS.SelectedIndex == 0)
            {
                GLSFunc_atk = Convert.ToInt32(tb2_GLS.Text);
                glsGlifATK = Convert.ToInt32(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 1)
            {
                GLSFunc_atk_Percent = Convert.ToDouble(tb2_GLS.Text);
                glsGlifATK_PER = Convert.ToDouble(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 2)
            {
                GLSFunc_hp = Convert.ToInt32(tb2_GLS.Text);
                glsGlifHP = Convert.ToInt32(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 3)
            {
                GLSFunc_hp_Percent = Convert.ToDouble(tb2_GLS.Text);
                glsGlifHP_PER = Convert.ToDouble(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 4)
            {
                GLSFunc_def = Convert.ToInt32(tb2_GLS.Text);
                glsGlifDEF = Convert.ToInt32(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 5)
            {
                GLSFunc_def_Percent = Convert.ToDouble(tb2_GLS.Text);
                glsGlifDEF_PER = Convert.ToDouble(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 6)
            {
                GLSFunc_spd = Convert.ToInt32(tb2_GLS.Text);
                glsGlifSPD = Convert.ToInt32(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 7)
            { GLSFunc_critchance = Convert.ToInt32(tb2_GLS.Text); }
            if (cb2_GLS.SelectedIndex == 8)
            { GLSFunc_critATK = Convert.ToInt32(tb2_GLS.Text); }
            if (cb2_GLS.SelectedIndex == 9)
            {
                GLSFunc_Resist = Convert.ToInt32(tb2_GLS.Text);
                glsGlifResist = Convert.ToInt32(tb2_glsglif.Text);
            }
            if (cb2_GLS.SelectedIndex == 10)
            {
                GLSFunc_ACC = Convert.ToInt32(tb2_GLS.Text);
                glsGlifACC = Convert.ToInt32(tb2_glsglif.Text);
            }




            if (cb3_GLS.SelectedIndex == 0)
            {
                GLSFunc_atk = Convert.ToInt32(tb3_GLS.Text);
                glsGlifATK = Convert.ToInt32(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 1)
            {
                GLSFunc_atk_Percent = Convert.ToDouble(tb3_GLS.Text);
                glsGlifATK_PER = Convert.ToDouble(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 2)
            {
                GLSFunc_hp = Convert.ToInt32(tb3_GLS.Text);
                glsGlifHP = Convert.ToInt32(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 3)
            {
                GLSFunc_hp_Percent = Convert.ToDouble(tb3_GLS.Text);
                glsGlifHP_PER = Convert.ToDouble(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 4)
            {
                GLSFunc_def = Convert.ToInt32(tb3_GLS.Text);
                glsGlifDEF = Convert.ToInt32(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 5)
            {
                GLSFunc_def_Percent = Convert.ToDouble(tb3_GLS.Text);
                glsGlifDEF_PER = Convert.ToDouble(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 6)
            {
                GLSFunc_spd = Convert.ToInt32(tb3_GLS.Text);
                glsGlifSPD = Convert.ToInt32(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 7)
            { GLSFunc_critchance = Convert.ToInt32(tb3_GLS.Text); }
            if (cb3_GLS.SelectedIndex == 8)
            { GLSFunc_critATK = Convert.ToInt32(tb3_GLS.Text); }
            if (cb3_GLS.SelectedIndex == 9)
            {
                GLSFunc_Resist = Convert.ToInt32(tb3_GLS.Text);
                glsGlifResist = Convert.ToInt32(tb3_glsglif.Text);
            }
            if (cb3_GLS.SelectedIndex == 10)
            {
                GLSFunc_ACC = Convert.ToInt32(tb3_GLS.Text);
                glsGlifACC = Convert.ToInt32(tb3_glsglif.Text);
            }




            if (cb4_GLS.SelectedIndex == 0)
            {
                GLSFunc_atk = Convert.ToInt32(tb4_GLS.Text);
                glsGlifATK = Convert.ToInt32(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 1)
            {
                GLSFunc_atk_Percent = Convert.ToDouble(tb4_GLS.Text);
                glsGlifATK_PER = Convert.ToDouble(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 2)
            {
                GLSFunc_hp = Convert.ToInt32(tb4_GLS.Text);
                glsGlifHP = Convert.ToInt32(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 3)
            {
                GLSFunc_hp_Percent = Convert.ToDouble(tb4_GLS.Text);
                glsGlifHP_PER = Convert.ToDouble(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 4)
            {
                GLSFunc_def = Convert.ToInt32(tb4_GLS.Text);
                glsGlifDEF = Convert.ToInt32(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 5)
            {
                GLSFunc_def_Percent = Convert.ToDouble(tb4_GLS.Text);
                glsGlifDEF_PER = Convert.ToDouble(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 6)
            {
                GLSFunc_spd = Convert.ToInt32(tb4_GLS.Text);
                glsGlifSPD = Convert.ToInt32(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 7)
            { GLSFunc_critchance = Convert.ToInt32(tb4_GLS.Text); }
            if (cb4_GLS.SelectedIndex == 8)
            { GLSFunc_critATK = Convert.ToInt32(tb4_GLS.Text); }
            if (cb4_GLS.SelectedIndex == 9)
            {
                GLSFunc_Resist = Convert.ToInt32(tb4_GLS.Text);
                glsGlifResist = Convert.ToInt32(tb4_glsglif.Text);
            }
            if (cb4_GLS.SelectedIndex == 10)
            {
                GLSFunc_ACC = Convert.ToInt32(tb4_GLS.Text);
                glsGlifACC = Convert.ToInt32(tb4_glsglif.Text);
            }

            double GLSFunc_atk_Fin = atk / 100 * (GLSFunc_atk_Percent + glsGlifATK_PER);
            double GLSFunc_hp_Fin = hp / 100 * (GLSFunc_hp_Percent + glsGlifHP_PER);
            double GLSFunc_def_Fin = def / 100 * (GLSFunc_def_Percent + glsGlifDEF_PER);

            GLSDB[0] = GLSFunc_atk_Fin;
            GLSDB[1] = GLSFunc_hp_Fin;
            GLSDB[2] = GLSFunc_def_Fin;

            GLSINT[0] = GLSFunc_atk + glsGlifATK;
            GLSINT[1] = GLSFunc_hp + glsGlifHP;
            GLSINT[2] = GLSFunc_def + glsGlifDEF;
            GLSINT[3] = GLSFunc_spd + glsGlifSPD;
            GLSINT[4] = GLSFunc_critchance;
            GLSINT[5] = GLSFunc_critATK;
            GLSINT[6] = GLSFunc_Resist + glsGlifResist;
            GLSINT[7] = GLSFunc_ACC + glsGlifACC;
            return;
        }

        void ArmorFunc(double hp, double def, double atk, double[] ArmorDB, int[] ArmorINT)
        {
            int a = 0;
            if (tb_AR.Text == "") { tb_AR.Text = a.ToString(); }
            if (tb1_AR.Text == "") { tb1_AR.Text = a.ToString(); }
            if (tb2_AR.Text == "") { tb2_AR.Text = a.ToString(); }
            if (tb3_AR.Text == "") { tb3_AR.Text = a.ToString(); }
            if (tb4_AR.Text == "") { tb4_AR.Text = a.ToString(); }
            if (tb1_arglif.Text == "") { tb1_arglif.Text = a.ToString(); }
            if (tb2_arglif.Text == "") { tb2_arglif.Text = a.ToString(); }
            if (tb3_arglif.Text == "") { tb3_arglif.Text = a.ToString(); }
            if (tb4_arglif.Text == "") { tb4_arglif.Text = a.ToString(); }

            double ARFunc_def_Percent = 0.0;
            double ARFunc_hp_Percent = 0.0;
            double ARFunc_atk_Percent = 0.0;
            int ARFunc_hp = 0;
            int ARFunc_def = 0;
            int ARFunc_atk = 0;
            int ARFunc_spd = 0;
            int ARFunc_critchance = 0;
            int ARFunc_critATK = 0;
            int ARFunc_Resist = 0;
            int ARFunc_ACC = 0;


            int arGlifATK = 0;
            int arGlifHP = 0;
            int arGlifDEF = 0;
            int arGlifSPD = 0;
            int arGlifResist = 0;
            int arGlifACC = 0;

            double arGlifATK_PER = 0.0;
            double arGlifHP_PER = 0.0;
            double arGlifDEF_PER = 0.0;

            if (cb_AR.SelectedIndex == 0)
            { ARFunc_atk = Convert.ToInt32(tb_AR.Text); }
            if (cb_AR.SelectedIndex == 1)
            { ARFunc_atk_Percent = Convert.ToDouble(tb_AR.Text); }
            if (cb_AR.SelectedIndex == 2)
            { ARFunc_hp = Convert.ToInt32(tb_AR.Text); }
            if (cb_AR.SelectedIndex == 3)
            { ARFunc_hp_Percent = Convert.ToDouble(tb_AR.Text); }
            if (cb_AR.SelectedIndex == 4)
            { ARFunc_def = Convert.ToInt32(tb_AR.Text); }
            if (cb_AR.SelectedIndex == 5)
            { ARFunc_def_Percent = Convert.ToDouble(tb_AR.Text); }
            if (cb_AR.SelectedIndex == 6)
            { ARFunc_Resist = Convert.ToInt32(tb_AR.Text); }
            if (cb_AR.SelectedIndex == 7)
            { ARFunc_ACC = Convert.ToInt32(tb_AR.Text); }

            if (cb1_AR.SelectedIndex == 0)
            {
                ARFunc_atk = Convert.ToInt32(tb1_AR.Text);
                arGlifATK = Convert.ToInt32(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 1)
            {
                ARFunc_atk_Percent = Convert.ToDouble(tb1_AR.Text);
                arGlifATK_PER = Convert.ToDouble(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 2)
            {
                ARFunc_hp = Convert.ToInt32(tb1_AR.Text);
                arGlifHP = Convert.ToInt32(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 3)
            {
                ARFunc_hp_Percent = Convert.ToDouble(tb1_AR.Text);
                arGlifHP_PER = Convert.ToDouble(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 4)
            {
                ARFunc_def = Convert.ToInt32(tb1_AR.Text);
                arGlifDEF = Convert.ToInt32(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 5)
            {
                ARFunc_def_Percent = Convert.ToDouble(tb1_AR.Text);
                arGlifDEF_PER = Convert.ToDouble(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 6)
            {
                ARFunc_spd = Convert.ToInt32(tb1_AR.Text);
                arGlifSPD = Convert.ToInt32(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 7)
            { ARFunc_critchance = Convert.ToInt32(tb1_AR.Text); }
            if (cb1_AR.SelectedIndex == 8)
            { ARFunc_critATK = Convert.ToInt32(tb1_AR.Text); }
            if (cb1_AR.SelectedIndex == 9)
            {
                ARFunc_Resist = Convert.ToInt32(tb1_AR.Text);
                arGlifResist = Convert.ToInt32(tb1_arglif.Text);
            }
            if (cb1_AR.SelectedIndex == 10)
            {
                ARFunc_ACC = Convert.ToInt32(tb1_AR.Text);
                arGlifACC = Convert.ToInt32(tb1_arglif.Text);
            }

            if (cb2_AR.SelectedIndex == 0)
            {
                ARFunc_atk = Convert.ToInt32(tb2_AR.Text);
                arGlifATK = Convert.ToInt32(tb2_arglif.Text);
            }
            if (cb2_AR.SelectedIndex == 1)
            {
                ARFunc_atk_Percent = Convert.ToDouble(tb2_AR.Text);
                arGlifATK_PER = Convert.ToDouble(tb2_arglif.Text);
            }
            if (cb2_AR.SelectedIndex == 2)
            {
                ARFunc_hp = Convert.ToInt32(tb2_AR.Text);
                arGlifHP = Convert.ToInt32(tb2_arglif.Text);
            }
            if (cb2_AR.SelectedIndex == 3)
            {
                ARFunc_hp_Percent = Convert.ToDouble(tb2_AR.Text);
                arGlifHP_PER = Convert.ToDouble(tb2_arglif.Text);
            }
            if (cb2_AR.SelectedIndex == 4)
            {
                ARFunc_def = Convert.ToInt32(tb2_AR.Text);
                arGlifDEF = Convert.ToInt32(tb2_arglif.Text);
            }
            if (cb2_AR.SelectedIndex == 5)
            {
                ARFunc_def_Percent = Convert.ToDouble(tb2_AR.Text);
                arGlifDEF_PER = Convert.ToDouble(tb2_arglif.Text);

            }
            if (cb2_AR.SelectedIndex == 6)
            {
                ARFunc_spd = Convert.ToInt32(tb2_AR.Text);
                arGlifSPD = Convert.ToInt32(tb2_arglif.Text);
            }
            if (cb2_AR.SelectedIndex == 7)
            { ARFunc_critchance = Convert.ToInt32(tb2_AR.Text); }
            if (cb2_AR.SelectedIndex == 8)
            { ARFunc_critATK = Convert.ToInt32(tb2_AR.Text); }
            if (cb2_AR.SelectedIndex == 9)
            {
                ARFunc_Resist = Convert.ToInt32(tb2_AR.Text);
                arGlifResist = Convert.ToInt32(tb2_arglif.Text);
            }
            if (cb2_AR.SelectedIndex == 10)
            {
                ARFunc_ACC = Convert.ToInt32(tb2_AR.Text);
                arGlifACC = Convert.ToInt32(tb2_arglif.Text);
            }

            if (cb3_AR.SelectedIndex == 0)
            {
                ARFunc_atk = Convert.ToInt32(tb3_AR.Text);
                arGlifATK = Convert.ToInt32(tb3_arglif.Text);
            }
            if (cb3_AR.SelectedIndex == 1)
            {
                ARFunc_atk_Percent = Convert.ToDouble(tb3_AR.Text);
                arGlifATK_PER = Convert.ToDouble(tb3_arglif.Text);

            }
            if (cb3_AR.SelectedIndex == 2)
            {
                ARFunc_hp = Convert.ToInt32(tb3_AR.Text);
                arGlifHP = Convert.ToInt32(tb3_arglif.Text);
            }
            if (cb3_AR.SelectedIndex == 3)
            {
                ARFunc_hp_Percent = Convert.ToDouble(tb3_AR.Text);
                arGlifHP_PER = Convert.ToDouble(tb3_arglif.Text);
            }
            if (cb3_AR.SelectedIndex == 4)
            {
                ARFunc_def = Convert.ToInt32(tb3_AR.Text);
                arGlifDEF = Convert.ToInt32(tb3_arglif.Text);
            }
            if (cb3_AR.SelectedIndex == 5)
            {
                ARFunc_def_Percent = Convert.ToDouble(tb3_AR.Text);
                arGlifDEF_PER = Convert.ToDouble(tb3_arglif.Text);
            }
            if (cb3_AR.SelectedIndex == 6)
            {
                ARFunc_spd = Convert.ToInt32(tb3_AR.Text);
                arGlifSPD = Convert.ToInt32(tb3_arglif.Text);
            }
            if (cb3_AR.SelectedIndex == 7)
            { ARFunc_critchance = Convert.ToInt32(tb3_AR.Text); }
            if (cb3_AR.SelectedIndex == 8)
            { ARFunc_critATK = Convert.ToInt32(tb3_AR.Text); }
            if (cb3_AR.SelectedIndex == 9)
            {
                ARFunc_Resist = Convert.ToInt32(tb3_AR.Text);
                arGlifResist = Convert.ToInt32(tb3_arglif.Text);
            }
            if (cb3_AR.SelectedIndex == 10)
            {
                ARFunc_ACC = Convert.ToInt32(tb3_AR.Text);
                arGlifACC = Convert.ToInt32(tb3_arglif.Text);
            }

            if (cb4_AR.SelectedIndex == 0)
            {
                ARFunc_atk = Convert.ToInt32(tb4_AR.Text);
                arGlifATK = Convert.ToInt32(tb4_arglif.Text);
            }
            if (cb4_AR.SelectedIndex == 1)
            {
                ARFunc_atk_Percent = Convert.ToDouble(tb4_AR.Text);

                arGlifATK_PER = Convert.ToDouble(tb4_arglif.Text);
            }
            if (cb4_AR.SelectedIndex == 2)
            {
                ARFunc_hp = Convert.ToInt32(tb4_AR.Text);
                arGlifHP = Convert.ToInt32(tb4_arglif.Text);
            }
            if (cb4_AR.SelectedIndex == 3)
            {
                ARFunc_hp_Percent = Convert.ToDouble(tb4_AR.Text);
                arGlifHP_PER = Convert.ToDouble(tb4_arglif.Text);
            }
            if (cb4_AR.SelectedIndex == 4)
            { ARFunc_def = Convert.ToInt32(tb4_AR.Text); }
            arGlifDEF = Convert.ToInt32(tb4_arglif.Text);
            if (cb4_AR.SelectedIndex == 5)
            {
                ARFunc_def_Percent = Convert.ToDouble(tb4_AR.Text);
                arGlifDEF_PER = Convert.ToDouble(tb4_arglif.Text);
            }
            if (cb4_AR.SelectedIndex == 6)
            {
                ARFunc_spd = Convert.ToInt32(tb4_AR.Text);
                arGlifSPD = Convert.ToInt32(tb4_arglif.Text);
            }
            if (cb4_AR.SelectedIndex == 7)
            { ARFunc_critchance = Convert.ToInt32(tb4_AR.Text); }
            if (cb4_AR.SelectedIndex == 8)
            { ARFunc_critATK = Convert.ToInt32(tb4_AR.Text); }
            if (cb4_AR.SelectedIndex == 9)
            {
                ARFunc_Resist = Convert.ToInt32(tb4_AR.Text);
                arGlifResist = Convert.ToInt32(tb4_arglif.Text);
            }
            if (cb4_AR.SelectedIndex == 10)
            {
                ARFunc_ACC = Convert.ToInt32(tb4_AR.Text);
                arGlifACC = Convert.ToInt32(tb4_arglif.Text);
            }

            double ARFunc_atk_Fin = atk / 100 * (ARFunc_atk_Percent + arGlifATK_PER);
            double ARFunc_hp_Fin = hp / 100 * (ARFunc_hp_Percent + arGlifHP_PER);
            double ARFunc_def_Fin = def / 100 * (ARFunc_def_Percent + arGlifDEF_PER);

            ArmorDB[0] = ARFunc_atk_Fin;
            ArmorDB[1] = ARFunc_hp_Fin;
            ArmorDB[2] = ARFunc_def_Fin;

            ArmorINT[0] = ARFunc_atk + arGlifATK;
            ArmorINT[1] = ARFunc_hp + arGlifHP;
            ArmorINT[2] = ARFunc_def + arGlifDEF;
            ArmorINT[3] = ARFunc_spd + arGlifSPD;
            ArmorINT[4] = ARFunc_critchance;
            ArmorINT[5] = ARFunc_critATK;
            ArmorINT[6] = ARFunc_Resist + +arGlifResist;
            ArmorINT[7] = ARFunc_ACC + +arGlifACC;
            return;

        }

        void BootsFunc(double hp, double def, double atk, double[] BTSDB, int[] BTSINT)
        {
            int a = 0;
            if (tb_BTS.Text == "") { tb_BTS.Text = a.ToString(); }
            if (tb1_BTS.Text == "") { tb1_BTS.Text = a.ToString(); }
            if (tb2_BTS.Text == "") { tb2_BTS.Text = a.ToString(); }
            if (tb3_BTS.Text == "") { tb3_BTS.Text = a.ToString(); }
            if (tb4_BTS.Text == "") { tb4_BTS.Text = a.ToString(); }
            if (tb1_btsglif.Text == "") { tb1_btsglif.Text = a.ToString(); }
            if (tb2_btsglif.Text == "") { tb2_btsglif.Text = a.ToString(); }
            if (tb3_btsglif.Text == "") { tb3_btsglif.Text = a.ToString(); }
            if (tb4_btsglif.Text == "") { tb4_btsglif.Text = a.ToString(); }

            double BTSFunc_def_Percent = 0.0;
            double BTSFunc_hp_Percent = 0.0;
            double BTSFunc_atk_Percent = 0.0;
            int BTSFunc_hp = 0;
            int BTSFunc_def = 0;
            int BTSFunc_atk = 0;
            int BTSFunc_spd = 0;
            int BTSFunc_critchance = 0;
            int BTSFunc_critATK = 0;
            int BTSFunc_Resist = 0;
            int BTSFunc_ACC = 0;

            int BTSGlifATK = 0;
            int BTSGlifHP = 0;
            int BTSGlifDEF = 0;
            int BTSGlifSPD = 0;
            int BTSGlifResist = 0;
            int BTSGlifACC = 0;

            double BTSGlifATK_PER = 0.0;
            double BTSGlifHP_PER = 0.0;
            double BTSGlifDEF_PER = 0.0;

            if (cb_BTS.SelectedIndex == 0)
            { BTSFunc_atk = Convert.ToInt32(tb_BTS.Text); }
            if (cb_BTS.SelectedIndex == 1)
            {
                BTSFunc_atk_Percent = Convert.ToDouble(tb_BTS.Text);
            }
            if (cb_BTS.SelectedIndex == 2)
            { BTSFunc_hp = Convert.ToInt32(tb_BTS.Text); }
            if (cb_BTS.SelectedIndex == 3)
            { BTSFunc_hp_Percent = Convert.ToDouble(tb_BTS.Text); }
            if (cb_BTS.SelectedIndex == 4)
            { BTSFunc_def = Convert.ToInt32(tb_BTS.Text); }
            if (cb_BTS.SelectedIndex == 5)
            { BTSFunc_def_Percent = Convert.ToDouble(tb_BTS.Text); }
            if (cb_BTS.SelectedIndex == 6)
            { BTSFunc_spd = Convert.ToInt32(tb_BTS.Text); }


            if (cb1_BTS.SelectedIndex == 0)
            {
                BTSFunc_atk = Convert.ToInt32(tb1_BTS.Text);
                BTSGlifATK = Convert.ToInt32(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 1)
            {
                BTSFunc_atk_Percent = Convert.ToDouble(tb1_BTS.Text);
                BTSGlifATK_PER = Convert.ToDouble(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 2)
            {
                BTSFunc_hp = Convert.ToInt32(tb1_BTS.Text);
                BTSGlifHP = Convert.ToInt32(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 3)
            {
                BTSFunc_hp_Percent = Convert.ToDouble(tb1_BTS.Text);
                BTSGlifHP_PER = Convert.ToDouble(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 4)
            {
                BTSFunc_def = Convert.ToInt32(tb1_BTS.Text);
                BTSGlifDEF = Convert.ToInt32(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 5)
            {
                BTSFunc_def_Percent = Convert.ToDouble(tb1_BTS.Text);
                BTSGlifDEF_PER = Convert.ToDouble(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 6)
            {
                BTSFunc_spd = Convert.ToInt32(tb1_BTS.Text);
                BTSGlifSPD = Convert.ToInt32(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 7)
            { BTSFunc_critchance = Convert.ToInt32(tb1_BTS.Text); }
            if (cb1_BTS.SelectedIndex == 8)
            { BTSFunc_critATK = Convert.ToInt32(tb1_BTS.Text); }
            if (cb1_BTS.SelectedIndex == 9)
            {
                BTSFunc_Resist = Convert.ToInt32(tb1_BTS.Text);
                BTSGlifResist = Convert.ToInt32(tb1_btsglif.Text);
            }
            if (cb1_BTS.SelectedIndex == 10)
            {
                BTSFunc_ACC = Convert.ToInt32(tb1_BTS.Text);
                BTSGlifACC = Convert.ToInt32(tb1_btsglif.Text);
            }

            if (cb2_BTS.SelectedIndex == 0)
            {
                BTSFunc_atk = Convert.ToInt32(tb2_BTS.Text);
                BTSGlifATK = Convert.ToInt32(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 1)
            {
                BTSFunc_atk_Percent = Convert.ToDouble(tb2_BTS.Text);
                BTSGlifATK_PER = Convert.ToDouble(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 2)
            {
                BTSFunc_hp = Convert.ToInt32(tb2_BTS.Text);
                BTSGlifHP = Convert.ToInt32(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 3)
            {
                BTSFunc_hp_Percent = Convert.ToDouble(tb2_BTS.Text);
                BTSGlifHP_PER = Convert.ToDouble(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 4)
            {
                BTSFunc_def = Convert.ToInt32(tb2_BTS.Text);
                BTSGlifDEF = Convert.ToInt32(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 5)
            {
                BTSFunc_def_Percent = Convert.ToDouble(tb2_BTS.Text);
                BTSGlifDEF_PER = Convert.ToDouble(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 6)
            {
                BTSFunc_spd = Convert.ToInt32(tb2_BTS.Text);
                BTSGlifSPD = Convert.ToInt32(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 7)
            { BTSFunc_critchance = Convert.ToInt32(tb2_BTS.Text); }
            if (cb2_BTS.SelectedIndex == 8)
            { BTSFunc_critATK = Convert.ToInt32(tb2_BTS.Text); }
            if (cb2_BTS.SelectedIndex == 9)
            {
                BTSFunc_Resist = Convert.ToInt32(tb2_BTS.Text);
                BTSGlifResist = Convert.ToInt32(tb2_btsglif.Text);
            }
            if (cb2_BTS.SelectedIndex == 10)
            { BTSFunc_ACC = Convert.ToInt32(tb2_BTS.Text); }
            BTSGlifACC = Convert.ToInt32(tb2_btsglif.Text);

            if (cb3_BTS.SelectedIndex == 0)
            {
                BTSFunc_atk = Convert.ToInt32(tb3_BTS.Text);
                BTSGlifATK = Convert.ToInt32(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 1)
            {
                BTSFunc_atk_Percent = Convert.ToDouble(tb3_BTS.Text);
                BTSGlifATK_PER = Convert.ToDouble(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 2)
            {
                BTSFunc_hp = Convert.ToInt32(tb3_BTS.Text);
                BTSGlifHP = Convert.ToInt32(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 3)
            {
                BTSFunc_hp_Percent = Convert.ToDouble(tb3_BTS.Text);
                BTSGlifHP_PER = Convert.ToDouble(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 4)
            {
                BTSFunc_def = Convert.ToInt32(tb3_BTS.Text);
                BTSGlifDEF = Convert.ToInt32(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 5)
            {
                BTSFunc_def_Percent = Convert.ToDouble(tb3_BTS.Text);
                BTSGlifDEF_PER = Convert.ToDouble(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 6)
            {
                BTSFunc_spd = Convert.ToInt32(tb3_BTS.Text);
                BTSGlifSPD = Convert.ToInt32(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 7)
            { BTSFunc_critchance = Convert.ToInt32(tb3_BTS.Text); }
            if (cb3_BTS.SelectedIndex == 8)
            { BTSFunc_critATK = Convert.ToInt32(tb3_BTS.Text); }
            if (cb3_BTS.SelectedIndex == 9)
            {
                BTSFunc_Resist = Convert.ToInt32(tb3_BTS.Text);
                BTSGlifResist = Convert.ToInt32(tb3_btsglif.Text);
            }
            if (cb3_BTS.SelectedIndex == 10)
            {
                BTSFunc_ACC = Convert.ToInt32(tb3_BTS.Text);
                BTSGlifACC = Convert.ToInt32(tb3_btsglif.Text);
            }

            if (cb4_BTS.SelectedIndex == 0)
            {
                BTSFunc_atk = Convert.ToInt32(tb4_BTS.Text);
                BTSGlifATK = Convert.ToInt32(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 1)
            {
                BTSFunc_atk_Percent = Convert.ToDouble(tb4_BTS.Text);
                BTSGlifATK_PER = Convert.ToDouble(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 2)
            {
                BTSFunc_hp = Convert.ToInt32(tb4_BTS.Text);
                BTSGlifHP = Convert.ToInt32(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 3)
            {
                BTSFunc_hp_Percent = Convert.ToDouble(tb4_BTS.Text);
                BTSGlifHP_PER = Convert.ToDouble(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 4)
            {
                BTSFunc_def = Convert.ToInt32(tb4_BTS.Text);
                BTSGlifDEF = Convert.ToInt32(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 5)
            {
                BTSFunc_def_Percent = Convert.ToDouble(tb4_BTS.Text);
                BTSGlifDEF_PER = Convert.ToDouble(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 6)
            {
                BTSFunc_spd = Convert.ToInt32(tb4_BTS.Text);
                BTSGlifSPD = Convert.ToInt32(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 7)
            { BTSFunc_critchance = Convert.ToInt32(tb4_BTS.Text); }
            if (cb4_BTS.SelectedIndex == 8)
            { BTSFunc_critATK = Convert.ToInt32(tb4_BTS.Text); }
            if (cb4_BTS.SelectedIndex == 9)
            {
                BTSFunc_Resist = Convert.ToInt32(tb4_BTS.Text);
                BTSGlifResist = Convert.ToInt32(tb4_btsglif.Text);
            }
            if (cb4_BTS.SelectedIndex == 10)
            {
                BTSFunc_ACC = Convert.ToInt32(tb4_BTS.Text);
                BTSGlifACC = Convert.ToInt32(tb4_btsglif.Text);
            }


            double BTSFunc_atk_Fin = atk / 100 * (BTSFunc_atk_Percent + BTSGlifATK_PER);
            double BTSFunc_hp_Fin = hp / 100 * (BTSFunc_hp_Percent + BTSGlifHP_PER);
            double BTSFunc_def_Fin = def / 100 * (BTSFunc_def_Percent + BTSGlifDEF_PER);

            BTSDB[0] = BTSFunc_atk_Fin;
            BTSDB[1] = BTSFunc_hp_Fin;
            BTSDB[2] = BTSFunc_def_Fin;

            BTSINT[0] = BTSFunc_atk + BTSGlifATK;
            BTSINT[1] = BTSFunc_hp + BTSGlifHP;
            BTSINT[2] = BTSFunc_def + BTSGlifDEF;
            BTSINT[3] = BTSFunc_spd + BTSGlifSPD;
            BTSINT[4] = BTSFunc_critchance;
            BTSINT[5] = BTSFunc_critATK;
            BTSINT[6] = BTSFunc_Resist + BTSGlifResist;
            BTSINT[7] = BTSFunc_ACC + BTSGlifACC;
            return;
        }
        void RINGFunc(double hp, double def, double atk, double[] RingDB, int[] RingINT)
        {
            int a = 0;
            if (tb_RING.Text == "") { tb_RING.Text = a.ToString(); }
            if (tb1_RING.Text == "") { tb1_RING.Text = a.ToString(); }
            if (tb2_RING.Text == "") { tb2_RING.Text = a.ToString(); }
            if (tb3_RING.Text == "") { tb3_RING.Text = a.ToString(); }
            if (tb4_RING.Text == "") { tb4_RING.Text = a.ToString(); }
            if (tb1_ringglif.Text == "") { tb1_ringglif.Text = a.ToString(); }
            if (tb2_ringglif.Text == "") { tb2_ringglif.Text = a.ToString(); }
            if (tb3_ringglif.Text == "") { tb3_ringglif.Text = a.ToString(); }
            if (tb4_ringglif.Text == "") { tb4_ringglif.Text = a.ToString(); }

            double RINGFunc_def_Percent = 0.0;
            double RINGFunc_hp_Percent = 0.0;
            double RINGFunc_atk_Percent = 0.0;
            int RINGFunc_hp = 0;
            int RINGFunc_def = 0;
            int RINGFunc_atk = 0;

            int RGGlifATK = 0;
            int RGGlifHP = 0;
            int RGGlifDEF = 0;


            double RGGlifATK_PER = 0.0;
            double RGGlifHP_PER = 0.0;
            double RGGlifDEF_PER = 0.0;

            if (cb_RING.SelectedIndex == 0)
            {
                RINGFunc_atk = Convert.ToInt32(tb_RING.Text);
            }
            if (cb_RING.SelectedIndex == 1)
            {
                RINGFunc_hp = Convert.ToInt32(tb_RING.Text);
            }
            if (cb_RING.SelectedIndex == 2)
            {
                RINGFunc_def = Convert.ToInt32(tb_RING.Text);
            }

            if (cb1_RING.SelectedIndex == 0)
            {
                RINGFunc_atk = Convert.ToInt32(tb1_RING.Text);
                RGGlifATK = Convert.ToInt32(tb1_ringglif.Text);
            }
            if (cb1_RING.SelectedIndex == 1)
            {
                RINGFunc_atk_Percent = Convert.ToDouble(tb1_RING.Text);
                RGGlifATK_PER = Convert.ToDouble(tb1_ringglif.Text);
            }
            if (cb1_RING.SelectedIndex == 2)
            {
                RINGFunc_hp = Convert.ToInt32(tb1_RING.Text);
                RGGlifHP = Convert.ToInt32(tb1_ringglif.Text);
            }
            if (cb1_RING.SelectedIndex == 3)
            {
                RINGFunc_hp_Percent = Convert.ToDouble(tb1_RING.Text);
                RGGlifHP_PER = Convert.ToDouble(tb1_ringglif.Text);
            }
            if (cb1_RING.SelectedIndex == 4)
            {
                RINGFunc_def = Convert.ToInt32(tb1_RING.Text);
                RGGlifDEF = Convert.ToInt32(tb1_ringglif.Text);
            }
            if (cb1_RING.SelectedIndex == 5)
            {
                RINGFunc_def_Percent = Convert.ToDouble(tb1_RING.Text);
                RGGlifDEF_PER = Convert.ToDouble(tb1_ringglif.Text);
            }

            if (cb2_RING.SelectedIndex == 0)
            {
                RINGFunc_atk = Convert.ToInt32(tb2_RING.Text);
                RGGlifATK = Convert.ToInt32(tb2_ringglif.Text);
            }
            if (cb2_RING.SelectedIndex == 1)
            {
                RINGFunc_atk_Percent = Convert.ToDouble(tb2_RING.Text);
                RGGlifATK_PER = Convert.ToDouble(tb2_ringglif.Text);
            }
            if (cb2_RING.SelectedIndex == 2)
            {
                RINGFunc_hp = Convert.ToInt32(tb2_RING.Text);
                RGGlifHP = Convert.ToInt32(tb2_ringglif.Text);
            }
            if (cb2_RING.SelectedIndex == 3)
            {
                RINGFunc_hp_Percent = Convert.ToDouble(tb2_RING.Text);
                RGGlifHP_PER = Convert.ToDouble(tb2_ringglif.Text);
            }
            if (cb2_RING.SelectedIndex == 4)
            {
                RINGFunc_def = Convert.ToInt32(tb2_RING.Text);
                RGGlifDEF = Convert.ToInt32(tb2_ringglif.Text);
            }
            if (cb2_RING.SelectedIndex == 5)
            {
                RINGFunc_def_Percent = Convert.ToDouble(tb2_RING.Text);
                RGGlifDEF_PER = Convert.ToDouble(tb2_ringglif.Text);
            }

            if (cb3_RING.SelectedIndex == 0)
            {
                RINGFunc_atk = Convert.ToInt32(tb3_RING.Text);
                RGGlifATK = Convert.ToInt32(tb3_ringglif.Text);
            }
            if (cb3_RING.SelectedIndex == 1)
            {
                RINGFunc_atk_Percent = Convert.ToDouble(tb3_RING.Text);
                RGGlifATK_PER = Convert.ToDouble(tb3_ringglif.Text);
            }
            if (cb3_RING.SelectedIndex == 2)
            {
                RINGFunc_hp = Convert.ToInt32(tb3_RING.Text);
                RGGlifHP = Convert.ToInt32(tb3_ringglif.Text);
            }
            if (cb3_RING.SelectedIndex == 3)
            {
                RINGFunc_hp_Percent = Convert.ToDouble(tb3_RING.Text);
                RGGlifHP_PER = Convert.ToDouble(tb3_ringglif.Text);
            }
            if (cb3_RING.SelectedIndex == 4)
            {
                RINGFunc_def = Convert.ToInt32(tb3_RING.Text);
                RGGlifDEF = Convert.ToInt32(tb3_ringglif.Text);
            }
            if (cb3_RING.SelectedIndex == 5)
            {
                RINGFunc_def_Percent = Convert.ToDouble(tb3_RING.Text);
                RGGlifDEF_PER = Convert.ToDouble(tb3_ringglif.Text);
            }

            if (cb4_RING.SelectedIndex == 0)
            {
                RINGFunc_atk = Convert.ToInt32(tb4_RING.Text);
                RGGlifATK = Convert.ToInt32(tb4_ringglif.Text);
            }
            if (cb4_RING.SelectedIndex == 1)
            {
                RINGFunc_atk_Percent = Convert.ToDouble(tb4_RING.Text);
                RGGlifATK_PER = Convert.ToDouble(tb4_ringglif.Text);
            }
            if (cb4_RING.SelectedIndex == 2)
            {
                RINGFunc_hp = Convert.ToInt32(tb4_RING.Text);
                RGGlifHP = Convert.ToInt32(tb4_ringglif.Text);
            }
            if (cb4_RING.SelectedIndex == 3)
            {
                RINGFunc_hp_Percent = Convert.ToDouble(tb4_RING.Text);
                RGGlifHP_PER = Convert.ToDouble(tb4_ringglif.Text);
            }
            if (cb4_RING.SelectedIndex == 4)
            {
                RINGFunc_def = Convert.ToInt32(tb4_RING.Text);
                RGGlifDEF = Convert.ToInt32(tb4_ringglif.Text);
            }
            if (cb4_RING.SelectedIndex == 5)
            {
                RINGFunc_def_Percent = Convert.ToDouble(tb4_RING.Text);
                RGGlifDEF_PER = Convert.ToDouble(tb4_ringglif.Text);
            }

            double RINGFunc_atk_Fin = atk / 100 * (RINGFunc_atk_Percent + RGGlifATK_PER);
            double RINGFunc_hp_Fin = hp / 100 * (RINGFunc_hp_Percent + RGGlifHP_PER);
            double RINGFunc_def_Fin = def / 100 * (RINGFunc_def_Percent + RGGlifDEF_PER);

            RingDB[0] = RINGFunc_atk_Fin;
            RingDB[1] = RINGFunc_hp_Fin;
            RingDB[2] = RINGFunc_def_Fin;

            RingINT[0] = RINGFunc_atk + RGGlifATK;
            RingINT[1] = RINGFunc_hp + RGGlifHP;
            RingINT[2] = RINGFunc_def + RGGlifDEF;

            return;
        }

        void AmuletFunc(int[] AmuletINT)
        {
            int a = 0;
            if (tb_AL.Text == "") { tb_AL.Text = a.ToString(); }
            if (tb1_AL.Text == "") { tb1_AL.Text = a.ToString(); }
            if (tb2_AL.Text == "") { tb2_AL.Text = a.ToString(); }
            if (tb3_AL.Text == "") { tb3_AL.Text = a.ToString(); }
            if (tb4_AL.Text == "") { tb4_AL.Text = a.ToString(); }
            if (tb1_amuletglif.Text == "") { tb1_amuletglif.Text = a.ToString(); }
            if (tb2_amuletglif.Text == "") { tb2_amuletglif.Text = a.ToString(); }
            if (tb3_amuletglif.Text == "") { tb3_amuletglif.Text = a.ToString(); }
            if (tb4_amuletglif.Text == "") { tb4_amuletglif.Text = a.ToString(); }

            int ALFunc_hp = 0;
            int ALFunc_def = 0;
            int ALFunc_atk = 0;
            int ALFunc_CritATK = 0;
            int ALFunc_Resist = 0;
            int ALFunc_ACC = 0;

            int ALGlifATK = 0;
            int ALGlifHP = 0;
            int ALGlifDEF = 0;
            int ALGlifResist = 0;
            int ALGlifACC = 0;

            if (cb_AL.SelectedIndex == 0)
            {
                ALFunc_atk = Convert.ToInt32(tb_AL.Text);
            }
            if (cb_AL.SelectedIndex == 1)
            {
                ALFunc_hp = Convert.ToInt32(tb_AL.Text);
            }
            if (cb_AL.SelectedIndex == 2)
            {
                ALFunc_def = Convert.ToInt32(tb_AL.Text);
            }
            if (cb_AL.SelectedIndex == 3)
            {
                ALFunc_CritATK = Convert.ToInt32(tb_AL.Text);
            }


            if (cb1_AL.SelectedIndex == 0)
            {
                ALFunc_atk = Convert.ToInt32(tb1_AL.Text);
                ALGlifATK = Convert.ToInt32(tb1_amuletglif.Text);
            }
            if (cb1_AL.SelectedIndex == 1)
            {
                ALFunc_hp = Convert.ToInt32(tb1_AL.Text);
                ALGlifHP = Convert.ToInt32(tb1_amuletglif.Text);
            }
            if (cb1_AL.SelectedIndex == 2)
            {
                ALFunc_def = Convert.ToInt32(tb1_AL.Text);
                ALGlifDEF = Convert.ToInt32(tb1_amuletglif.Text);
            }
            if (cb1_AL.SelectedIndex == 3)
            {
                ALFunc_CritATK = Convert.ToInt32(tb1_AL.Text);

            }
            if (cb1_AL.SelectedIndex == 4)
            {
                ALFunc_Resist = Convert.ToInt32(tb1_AL.Text);
                ALGlifResist = Convert.ToInt32(tb1_amuletglif.Text);
            }
            if (cb1_AL.SelectedIndex == 5)
            {
                ALFunc_ACC = Convert.ToInt32(tb1_AL.Text);
                ALGlifACC = Convert.ToInt32(tb1_amuletglif.Text);
            }

            if (cb2_AL.SelectedIndex == 0)
            {
                ALFunc_atk = Convert.ToInt32(tb2_AL.Text);
                ALGlifATK = Convert.ToInt32(tb2_amuletglif.Text);
            }
            if (cb2_AL.SelectedIndex == 1)
            {
                ALFunc_hp = Convert.ToInt32(tb2_AL.Text);
                ALGlifHP = Convert.ToInt32(tb2_amuletglif.Text);
            }
            if (cb2_AL.SelectedIndex == 2)
            {
                ALFunc_def = Convert.ToInt32(tb2_AL.Text);
                ALGlifDEF = Convert.ToInt32(tb2_amuletglif.Text);
            }
            if (cb2_AL.SelectedIndex == 3)
            {
                ALFunc_CritATK = Convert.ToInt32(tb2_AL.Text);
            }
            if (cb2_AL.SelectedIndex == 4)
            {
                ALFunc_Resist = Convert.ToInt32(tb2_AL.Text);
                ALGlifResist = Convert.ToInt32(tb2_amuletglif.Text);
            }
            if (cb2_AL.SelectedIndex == 5)
            {
                ALFunc_ACC = Convert.ToInt32(tb2_AL.Text);
                ALGlifACC = Convert.ToInt32(tb2_amuletglif.Text);
            }

            if (cb3_AL.SelectedIndex == 0)
            {
                ALFunc_atk = Convert.ToInt32(tb3_AL.Text);
                ALGlifATK = Convert.ToInt32(tb3_amuletglif.Text);
            }
            if (cb3_AL.SelectedIndex == 1)
            {
                ALFunc_hp = Convert.ToInt32(tb3_AL.Text);
                ALGlifHP = Convert.ToInt32(tb3_amuletglif.Text);
            }
            if (cb3_AL.SelectedIndex == 2)
            {
                ALFunc_def = Convert.ToInt32(tb3_AL.Text);
                ALGlifDEF = Convert.ToInt32(tb3_amuletglif.Text);
            }
            if (cb3_AL.SelectedIndex == 3)
            {
                ALFunc_CritATK = Convert.ToInt32(tb3_AL.Text);
            }
            if (cb3_AL.SelectedIndex == 4)
            {
                ALFunc_Resist = Convert.ToInt32(tb3_AL.Text);
                ALGlifResist = Convert.ToInt32(tb3_amuletglif.Text);
            }
            if (cb3_AL.SelectedIndex == 5)
            {
                ALFunc_ACC = Convert.ToInt32(tb3_AL.Text);
                ALGlifACC = Convert.ToInt32(tb3_amuletglif.Text);
            }
            if (cb4_AL.SelectedIndex == 0)
            {
                ALFunc_atk = Convert.ToInt32(tb4_AL.Text);
                ALGlifATK = Convert.ToInt32(tb4_amuletglif.Text);
            }
            if (cb4_AL.SelectedIndex == 1)
            {
                ALFunc_hp = Convert.ToInt32(tb4_AL.Text);
                ALGlifHP = Convert.ToInt32(tb4_amuletglif.Text);
            }
            if (cb4_AL.SelectedIndex == 2)
            {
                ALFunc_def = Convert.ToInt32(tb4_AL.Text);
                ALGlifDEF = Convert.ToInt32(tb4_amuletglif.Text);
            }
            if (cb4_AL.SelectedIndex == 3)
            {
                ALFunc_CritATK = Convert.ToInt32(tb4_AL.Text);
            }
            if (cb4_AL.SelectedIndex == 4)
            {
                ALFunc_Resist = Convert.ToInt32(tb4_AL.Text);
                ALGlifResist = Convert.ToInt32(tb4_amuletglif.Text);
            }
            if (cb4_AL.SelectedIndex == 5)
            {
                ALFunc_ACC = Convert.ToInt32(tb4_AL.Text);
                ALGlifACC = Convert.ToInt32(tb4_amuletglif.Text);
            }


            AmuletINT[0] = ALFunc_atk + ALGlifATK;
            AmuletINT[1] = ALFunc_hp + ALGlifHP;
            AmuletINT[2] = ALFunc_def + ALGlifDEF;
            AmuletINT[3] = ALFunc_CritATK;
            AmuletINT[4] = ALFunc_Resist + ALGlifResist;
            AmuletINT[5] = ALFunc_ACC + ALGlifACC;



            return;

        }

        void BannerFunc(double hp, double def, double atk, double[] BannerDB, int[] BannerINT)
        {
            int a = 0;
            if (tb_BR.Text == "") { tb_BR.Text = a.ToString(); }
            if (tb1_BR.Text == "") { tb1_BR.Text = a.ToString(); }
            if (tb2_BR.Text == "") { tb2_BR.Text = a.ToString(); }
            if (tb3_BR.Text == "") { tb3_BR.Text = a.ToString(); }
            if (tb4_BR.Text == "") { tb4_BR.Text = a.ToString(); }
            if (tb1_bannerglif.Text == "") { tb1_bannerglif.Text = a.ToString(); }
            if (tb2_bannerglif.Text == "") { tb2_bannerglif.Text = a.ToString(); }
            if (tb3_bannerglif.Text == "") { tb3_bannerglif.Text = a.ToString(); }
            if (tb4_bannerglif.Text == "") { tb4_bannerglif.Text = a.ToString(); }

            double BRFunc_hp_Percent = 0.0;
            double BRFunc_def_Percent = 0.0;
            double BRFunc_atk_Percent = 0.0;

            int BRFunc_hp = 0;
            int BRFunc_def = 0;
            int BRFunc_atk = 0;
            int BRFunc_spd = 0;
            int BRFunc_Resist = 0;
            int BRFunc_ACC = 0;

            int BRGlifATK = 0;
            int BRGlifHP = 0;
            int BRGlifDEF = 0;
            int BRGlifSPD = 0;


            double BRGlifATK_PER = 0.0;
            double BRGlifHP_PER = 0.0;
            double BRGlifDEF_PER = 0.0;

            if (cb_BR.SelectedIndex == 0)
            {
                BRFunc_atk = Convert.ToInt32(tb_BR.Text);
            }
            if (cb_BR.SelectedIndex == 1)
            {
                BRFunc_hp = Convert.ToInt32(tb_BR.Text);
            }
            if (cb_BR.SelectedIndex == 2)
            {
                BRFunc_def = Convert.ToInt32(tb_BR.Text);
            }
            if (cb_BR.SelectedIndex == 3)
            {
                BRFunc_Resist = Convert.ToInt32(tb_BR.Text);
            }
            if (cb_BR.SelectedIndex == 4)
            {
                BRFunc_ACC = Convert.ToInt32(tb_BR.Text);
            }

            if (cb1_BR.SelectedIndex == 0)
            {
                BRFunc_atk = Convert.ToInt32(tb1_BR.Text);
                BRGlifATK = Convert.ToInt32(tb1_bannerglif.Text);
            }
            if (cb1_BR.SelectedIndex == 1)
            {
                BRFunc_atk_Percent = Convert.ToDouble(tb1_BR.Text);
                BRGlifATK_PER = Convert.ToDouble(tb1_bannerglif.Text);
            }
            if (cb1_BR.SelectedIndex == 2)
            {
                BRFunc_hp = Convert.ToInt32(tb1_BR.Text);
                BRGlifHP = Convert.ToInt32(tb1_bannerglif.Text);
            }
            if (cb1_BR.SelectedIndex == 3)
            {
                BRFunc_hp_Percent = Convert.ToDouble(tb1_BR.Text);
                BRGlifHP_PER = Convert.ToDouble(tb1_bannerglif.Text);
            }
            if (cb1_BR.SelectedIndex == 4)
            {
                BRFunc_def = Convert.ToInt32(tb1_BR.Text);
                BRGlifDEF = Convert.ToInt32(tb1_bannerglif.Text);
            }
            if (cb1_BR.SelectedIndex == 5)
            {
                BRFunc_def_Percent = Convert.ToDouble(tb1_BR.Text);
                BRGlifDEF_PER = Convert.ToDouble(tb1_bannerglif.Text);
            }
            if (cb1_BR.SelectedIndex == 6)
            {
                BRFunc_spd = Convert.ToInt32(tb1_BR.Text);
                BRGlifSPD = Convert.ToInt32(tb1_bannerglif.Text);
            }

            if (cb2_BR.SelectedIndex == 0)
            {
                BRFunc_atk = Convert.ToInt32(tb2_BR.Text);
                BRGlifATK = Convert.ToInt32(tb2_bannerglif.Text);
            }
            if (cb2_BR.SelectedIndex == 1)
            {
                BRFunc_atk_Percent = Convert.ToDouble(tb2_BR.Text);
                BRGlifATK_PER = Convert.ToDouble(tb2_bannerglif.Text);
            }
            if (cb2_BR.SelectedIndex == 2)
            {
                BRFunc_hp = Convert.ToInt32(tb2_BR.Text);
                BRGlifHP = Convert.ToInt32(tb2_bannerglif.Text);
            }
            if (cb2_BR.SelectedIndex == 3)
            {
                BRFunc_hp_Percent = Convert.ToDouble(tb2_BR.Text);
                BRGlifHP_PER = Convert.ToDouble(tb2_bannerglif.Text);
            }
            if (cb2_BR.SelectedIndex == 4)
            {
                BRFunc_def = Convert.ToInt32(tb2_BR.Text);
                BRGlifDEF = Convert.ToInt32(tb2_bannerglif.Text);
            }
            if (cb2_BR.SelectedIndex == 5)
            {
                BRFunc_def_Percent = Convert.ToDouble(tb2_BR.Text);
                BRGlifDEF_PER = Convert.ToDouble(tb2_bannerglif.Text);
            }
            if (cb2_BR.SelectedIndex == 6)
            {
                BRFunc_spd = Convert.ToInt32(tb2_BR.Text);
                BRGlifSPD = Convert.ToInt32(tb2_bannerglif.Text);
            }

            if (cb3_BR.SelectedIndex == 0)
            {
                BRFunc_atk = Convert.ToInt32(tb3_BR.Text);
                BRGlifATK = Convert.ToInt32(tb3_bannerglif.Text);
            }
            if (cb3_BR.SelectedIndex == 1)
            {
                BRFunc_atk_Percent = Convert.ToDouble(tb3_BR.Text);
                BRGlifATK_PER = Convert.ToDouble(tb3_bannerglif.Text);
            }
            if (cb3_BR.SelectedIndex == 2)
            {
                BRFunc_hp = Convert.ToInt32(tb3_BR.Text);
                BRGlifHP = Convert.ToInt32(tb3_bannerglif.Text);
            }
            if (cb3_BR.SelectedIndex == 3)
            {
                BRFunc_hp_Percent = Convert.ToDouble(tb3_BR.Text);
                BRGlifHP_PER = Convert.ToDouble(tb3_bannerglif.Text);
            }
            if (cb3_BR.SelectedIndex == 4)
            {
                BRFunc_def = Convert.ToInt32(tb3_BR.Text);
                BRGlifDEF = Convert.ToInt32(tb3_bannerglif.Text);
            }
            if (cb3_BR.SelectedIndex == 5)
            {
                BRFunc_def_Percent = Convert.ToDouble(tb3_BR.Text);
                BRGlifDEF_PER = Convert.ToDouble(tb3_bannerglif.Text);
            }
            if (cb3_BR.SelectedIndex == 6)
            {
                BRFunc_spd = Convert.ToInt32(tb3_BR.Text);
                BRGlifSPD = Convert.ToInt32(tb3_bannerglif.Text);
            }


            if (cb4_BR.SelectedIndex == 0)
            {
                BRFunc_atk = Convert.ToInt32(tb4_BR.Text);
                BRGlifATK = Convert.ToInt32(tb4_bannerglif.Text);
            }
            if (cb4_BR.SelectedIndex == 1)
            {
                BRFunc_atk_Percent = Convert.ToDouble(tb4_BR.Text);
                BRGlifATK_PER = Convert.ToDouble(tb4_bannerglif.Text);
            }
            if (cb4_BR.SelectedIndex == 2)
            {
                BRFunc_hp = Convert.ToInt32(tb4_BR.Text);
                BRGlifHP = Convert.ToInt32(tb4_bannerglif.Text);
            }
            if (cb4_BR.SelectedIndex == 3)
            {
                BRFunc_hp_Percent = Convert.ToDouble(tb4_BR.Text);
                BRGlifHP_PER = Convert.ToDouble(tb4_bannerglif.Text);
            }
            if (cb4_BR.SelectedIndex == 4)
            {
                BRFunc_def = Convert.ToInt32(tb4_BR.Text);
                BRGlifDEF = Convert.ToInt32(tb4_bannerglif.Text);
            }
            if (cb4_BR.SelectedIndex == 5)
            {
                BRFunc_def_Percent = Convert.ToDouble(tb4_BR.Text);
                BRGlifDEF_PER = Convert.ToDouble(tb4_bannerglif.Text);
            }
            if (cb4_BR.SelectedIndex == 6)
            {
                BRFunc_spd = Convert.ToInt32(tb4_BR.Text);
                BRGlifSPD = Convert.ToInt32(tb4_bannerglif.Text);
            }



            double BRFunc_atk_Fin = atk / 100 * (BRFunc_atk_Percent + BRGlifATK_PER);
            double BRFunc_hp_Fin = hp / 100 * (BRFunc_hp_Percent + BRGlifHP_PER);
            double BRFunc_def_Fin = def / 100 * (BRFunc_def_Percent + BRGlifDEF_PER);

            BannerDB[0] = BRFunc_atk_Fin;
            BannerDB[1] = BRFunc_hp_Fin;
            BannerDB[2] = BRFunc_def_Fin;

            BannerINT[0] = BRFunc_atk + BRGlifATK;
            BannerINT[1] = BRFunc_hp + BRGlifHP;
            BannerINT[2] = BRFunc_def + BRGlifDEF;
            BannerINT[3] = BRFunc_spd + BRGlifSPD;
            BannerINT[4] = BRFunc_Resist;
            BannerINT[5] = BRFunc_ACC;

            return;
        }



        private void btn_Start_Click(object sender, EventArgs e)
        {
            int a = 0;
            if (tb_HP.Text == "") { tb_HP.Text = a.ToString(); }
            if (tb_ATK.Text == "") { tb_ATK.Text = a.ToString(); }
            if (tb_DEF.Text == "") { tb_DEF.Text = a.ToString(); }
            if (tb_SPD.Text == "") { tb_SPD.Text = a.ToString(); }
            if (tb_CritChance.Text == "") { tb_CritChance.Text = a.ToString(); }
            if (tb_CritDamage.Text == "") { tb_CritDamage.Text = a.ToString(); }
            if (tb_Resist.Text == "") { tb_Resist.Text = a.ToString(); }
            if (tb_ACC.Text == "") { tb_ACC.Text = a.ToString(); }
            if (tb_aura.Text == "") { tb_aura.Text = a.ToString(); }



            //Начальные характеристики
            double hp = Convert.ToDouble(tb_HP.Text);
            double atk = Convert.ToDouble(tb_ATK.Text);
            double def = Convert.ToDouble(tb_DEF.Text);
            double speed = Convert.ToDouble(tb_SPD.Text);
            double critchance = Convert.ToDouble(tb_CritChance.Text);
            double critdamage = Convert.ToDouble(tb_CritDamage.Text);
            double resist = Convert.ToDouble(tb_Resist.Text);
            double acc = Convert.ToDouble(tb_ACC.Text);

            //Доп.Параметры
            double auraHP = 0.0;
            double auraATK = 0.0;
            double auraDEF = 0.0;
            double auraSPD = 0.0;
            double auraCritChance = 0.0;
            double auraResist = 0.0;
            double auraACC = 0.0;
            double Aura = Convert.ToDouble(tb_aura.Text);





            // первый набор
            double SPDComplectsFin = 0.0;
            double ATKComplectsFin = 0.0;
            double DEFComplectsFin = 0.0;
            double HPComplectsFin = 0.0;
            int ACCComplectsFin = 0;
            int CritChanceComplectsFin = 0;
            int CritDamageComplectsFin = 0;
            int ResistComplectsFin = 0;
            double ACCComplectsFinDB = 0.0;
            double CritChanceComplectsFinDB = 0.0;
            double CritDamageComplectsFinDB = 0.0;
            double ResistComplectsFinDB = 0.0;
            // второй набор
            double SPDComplectsFin1 = 0.0;
            double ATKComplectsFin1 = 0.0;
            double DEFComplectsFin1 = 0.0;
            double HPComplectsFin1 = 0.0;
            int ACCComplectsFin1 = 0;
            int CritChanceComplectsFin1 = 0;
            int CritDamageComplectsFin1 = 0;
            int ResistComplectsFin1 = 0;
            double ACCComplectsFinDB1 = 0.0;
            double CritChanceComplectsFinDB1 = 0.0;
            double CritDamageComplectsFinDB1 = 0.0;
            double ResistComplectsFinDB1 = 0.0;
            //третий набор
            double SPDComplectsFin2 = 0.0;
            double ATKComplectsFin2 = 0.0;
            double DEFComplectsFin2 = 0.0;
            double HPComplectsFin2 = 0.0;
            int ACCComplectsFin2 = 0;
            int CritChanceComplectsFin2 = 0;
            int CritDamageComplectsFin2 = 0;
            int ResistComplectsFin2 = 0;
            double ACCComplectsFinDB2 = 0.0;
            double CritChanceComplectsFinDB2 = 0.0;
            double CritDamageComplectsFinDB2 = 0.0;
            double ResistComplectsFinDB2 = 0.0;



            // массивы комплектов
            double[] ComplectsV = new double[4];
            int[] ComplectsVINT = new int[4];
            double[] ComplectsV1 = new double[4];
            int[] ComplectsVINT1 = new int[4];
            double[] ComplectsV2 = new double[4];
            int[] ComplectsVINT2 = new int[4];
            double[] Complects15 = new double[8];
            double[] Complects151 = new double[8];
            double[] Complects152 = new double[8];


            //массив арены
            double[] ArenaLeagueMass = new double[3];
            //массивы талантов
            double[] TalentsMass = new double[3];
            int[] TalentsMassINT = new int[4];
            //массивы оружия
            double[] WeaponDB = new double[2];
            int[] WeaponINT = new int[7];
            //массивы шлема
            double[] HelmetDB = new double[3];
            int[] HelmetINT = new int[8];
            //массивы щита
            double[] ShieldDB = new double[2];
            int[] ShieldINT = new int[7];
            //массивы перчаток
            double[] GLSDB = new double[3];
            int[] GLSINT = new int[8];
            //массивы брони
            double[] ArmorDB = new double[3];
            int[] ArmorINT = new int[8];
            //массивы ботинок
            double[] BTSDB = new double[3];
            int[] BTSINT = new int[8];
            //массивы кольца
            double[] RingDB = new double[3];
            int[] RingINT = new int[3];
            //массив амулета
            int[] AmuletINT = new int[6];
            //массивы знамени
            double[] BannerDB = new double[3];
            int[] BannerINT = new int[6];


            // Аренные переменные
            ArenaLeagueFunc(hp, atk, def, ArenaLeagueMass);
            double hpArenaFin = ArenaLeagueMass[0];
            double atkArenaFin = ArenaLeagueMass[1];
            double defArenaFin = ArenaLeagueMass[2];
            //Переменные большого зала
            double hpHallFin = HPBigHallFunc(hp);
            double atkHallFin = ATKBigHallFunc(atk);
            double defHallFin = DEFBigHallFunc(def);
            int critATKHallFin = CritAtKBigHallFunc();
            int resistHallFin = ResistBigHallFunc();
            int accHallFin = ACCBigHallFunc();
            // Переменные по комплектам(1)
            ComplectsFuncDB(hp, atk, def, speed, ComplectsV, ComplectsVINT, Complects15);
            if (cb4_SUPTalent.SelectedIndex == 2 | cb44_SUPTalent.SelectedIndex == 2)
            {
                SPDComplectsFin = Complects15[0];
                ATKComplectsFin = Complects15[1];
                DEFComplectsFin = Complects15[2];
                HPComplectsFin = Complects15[3];
                ACCComplectsFinDB = Complects15[4];
                CritChanceComplectsFinDB = Complects15[5];
                CritDamageComplectsFinDB = Complects15[6];
                ResistComplectsFinDB = Complects15[7];
            }
            else
            {
                SPDComplectsFin = ComplectsV[0];
                ATKComplectsFin = ComplectsV[1];
                DEFComplectsFin = ComplectsV[2];
                HPComplectsFin = ComplectsV[3];
                ACCComplectsFin = ComplectsVINT[0];
                CritChanceComplectsFin = ComplectsVINT[1];
                CritDamageComplectsFin = ComplectsVINT[2];
                ResistComplectsFin = ComplectsVINT[3];
            }

            // Переменные по комплектам(2)
            ComplectsFuncDB1(hp, atk, def, speed, ComplectsV1, ComplectsVINT1, Complects151);
            if (cb4_SUPTalent.SelectedIndex == 2 | cb44_SUPTalent.SelectedIndex == 2)
            {
                SPDComplectsFin1 = Complects151[0];
                ATKComplectsFin1 = Complects151[1];
                DEFComplectsFin1 = Complects151[2];
                HPComplectsFin1 = Complects151[3];
                ACCComplectsFinDB1 = Complects151[4];
                CritChanceComplectsFinDB1 = Complects151[5];
                CritDamageComplectsFinDB1 = Complects151[6];
                ResistComplectsFinDB1 = Complects151[7];
            }
            else
            {
                SPDComplectsFin1 = ComplectsV1[0];
                ATKComplectsFin1 = ComplectsV1[1];
                DEFComplectsFin1 = ComplectsV1[2];
                HPComplectsFin1 = ComplectsV1[3];
                ACCComplectsFin1 = ComplectsVINT1[0];
                CritChanceComplectsFin1 = ComplectsVINT1[1];
                CritDamageComplectsFin1 = ComplectsVINT1[2];
                ResistComplectsFin1 = ComplectsVINT1[3];
            }

            // Переменные по комплектам(3)
            ComplectsFuncDB2(hp, atk, def, speed, ComplectsV2, ComplectsVINT2, Complects152);
            if (cb4_SUPTalent.SelectedIndex == 2 | cb44_SUPTalent.SelectedIndex == 2)
            {
                SPDComplectsFin2 = Complects152[0];
                ATKComplectsFin2 = Complects152[1];
                DEFComplectsFin2 = Complects152[2];
                HPComplectsFin2 = Complects152[3];
                ACCComplectsFinDB2 = Complects152[4];
                CritChanceComplectsFinDB2 = Complects152[5];
                CritDamageComplectsFinDB2 = Complects152[6];
                ResistComplectsFinDB2 = Complects152[7];
            }
            else
            {
                SPDComplectsFin2 = ComplectsV2[0];
                ATKComplectsFin2 = ComplectsV2[1];
                DEFComplectsFin2 = ComplectsV2[2];
                HPComplectsFin2 = ComplectsV2[3];
                ACCComplectsFin2 = ComplectsVINT2[0];
                CritChanceComplectsFin2 = ComplectsVINT2[1];
                CritDamageComplectsFin2 = ComplectsVINT2[2];
                ResistComplectsFin2 = ComplectsVINT2[3];
            }

            //Переменные по значениям талантов
            TalentsFunc(TalentsMass, TalentsMassINT);
            double ATKTalentsFIN = TalentsMass[0];
            double HPTalentsFIN = TalentsMass[1];
            double DEFTalentsFIN = TalentsMass[2];
            int CritChanceTalentsFIN = TalentsMassINT[0];
            int CritDamageTalentsFIN = TalentsMassINT[1];
            int ResistTalentsFIN = TalentsMassINT[2];
            int ACCTalentsFIN = TalentsMassINT[3];

            //Переменные по значениям артефактов
            //оружие
            WeaponFunc(hp, atk, WeaponDB, WeaponINT);
            double wp_atkPER_fin = WeaponDB[0];
            double wp_hpPER_fin = WeaponDB[1];
            int wp_atk_fin = WeaponINT[0];
            int wp_hp_fin = WeaponINT[1];
            int wp_spd_fin = WeaponINT[2];
            int wp_critchance_fin = WeaponINT[3];
            int wp_critATK_fin = WeaponINT[4];
            int wp_resist_fin = WeaponINT[5];
            int wp_ACC_fin = WeaponINT[6];
            //Шлем

            HelmetFunc(hp, def, atk, HelmetDB, HelmetINT);
            double hm_defPER_fin = HelmetDB[0];
            double hm_hpPER_fin = HelmetDB[1];
            double hm_atkPER_fin = HelmetDB[2];
            int hm_def_fin = HelmetINT[0];
            int hm_hp_fin = HelmetINT[1];
            int hm_atk_fin = HelmetINT[2];
            int hm_spd_fin = HelmetINT[3];
            int hm_critchance_fin = HelmetINT[4];
            int hm_critATK_fin = HelmetINT[5];
            int hm_resist_fin = HelmetINT[6];
            int hm_ACC_fin = HelmetINT[7];

            //Щит
            ShieldFunc(hp, def, ShieldDB, ShieldINT);
            double shd_defPER_fin = ShieldDB[0];
            double shd_hpPER_fin = ShieldDB[1];
            int shd_def_fin = ShieldINT[0];
            int shd_hp_fin = ShieldINT[1];
            int shd_spd_fin = ShieldINT[2];
            int shd_critchance_fin = ShieldINT[3];
            int shd_critATK_fin = ShieldINT[4];
            int shd_resist_fin = ShieldINT[5];
            int shd_ACC_fin = ShieldINT[6];
            //Перчатки
            GLSFunc(hp, def, atk, GLSDB, GLSINT);
            double GLS_atkPER_Fin = GLSDB[0];
            double GLS_hpPER_Fin = GLSDB[1];
            double GLS_defPER_Fin = GLSDB[2];

            int GLS_atk_Fin = GLSINT[0];
            int GLS_hp_Fin = GLSINT[1];
            int GLS_def_Fin = GLSINT[2];
            int GLS_spd_Fin = GLSINT[3];
            int GLS_critchance_Fin = GLSINT[4];
            int GLS_critATK_Fin = GLSINT[5];
            int GLS_Resist_Fin = GLSINT[6];
            int GLS_ACC_Fin = GLSINT[7];
            //броня
            ArmorFunc(hp, def, atk, ArmorDB, ArmorINT);
            double AR_atkPER_Fin = ArmorDB[0];
            double AR_hpPER_Fin = ArmorDB[1];
            double AR_defPER_Fin = ArmorDB[2];

            int AR_atk_Fin = ArmorINT[0];
            int AR_hp_Fin = ArmorINT[1];
            int AR_def_Fin = ArmorINT[2];
            int AR_spd_Fin = ArmorINT[3];
            int AR_critchance_Fin = ArmorINT[4];
            int AR_critATK_Fin = ArmorINT[5];
            int AR_Resist_Fin = ArmorINT[6];
            int AR_ACC_Fin = ArmorINT[7];


            //ботинки
            BootsFunc(hp, def, atk, BTSDB, BTSINT);
            double BTS_atkPER_Fin = BTSDB[0];
            double BTS_hpPER_Fin = BTSDB[1];
            double BTS_defPER_Fin = BTSDB[2];

            int BTS_atk_Fin = BTSINT[0];
            int BTS_hp_Fin = BTSINT[1];
            int BTS_def_Fin = BTSINT[2];
            int BTS_spd_Fin = BTSINT[3];
            int BTS_critchance_Fin = BTSINT[4];
            int BTS_critATK_Fin = BTSINT[5];
            int BTS_Resist_Fin = BTSINT[6];
            int BTS_ACC_Fin = BTSINT[7];


            //Кольцо
            RINGFunc(hp, def, atk, RingDB, RingINT);
            double Ring_atkPER_Fin = RingDB[0];
            double Ring_hpPER_Fin = RingDB[1];
            double Ring_defPER_Fin = RingDB[2];

            int Ring_atk_Fin = RingINT[0];
            int Ring_hp_Fin = RingINT[1];
            int Ring_def_Fin = RingINT[2];

            //Амулет
            AmuletFunc(AmuletINT);

            int Amulet_atk_Fin = AmuletINT[0];
            int Amulet_hp_Fin = AmuletINT[1];
            int Amulet_def_Fin = AmuletINT[2];
            int Amulet_CritATK_Fin = AmuletINT[3];
            int Amulet_Resist_Fin = AmuletINT[4];
            int Amulet_ACC_Fin = AmuletINT[5];

            //Знамя
            BannerFunc(hp, def, atk, BannerDB, BannerINT);
            double Banner_atkPER_Fin = BannerDB[0];
            double Banner_hpPER_Fin = BannerDB[1];
            double Banner_defPER_Fin = BannerDB[2];

            int Banner_atk_Fin = BannerINT[0];
            int Banner_hp_Fin = BannerINT[1];
            int Banner_def_Fin = BannerINT[2];
            int Banner_spd_Fin = BannerINT[3];
            int Banner_Resist_Fin = BannerINT[4];
            int Banner_ACC_Fin = BannerINT[5];

            //Ауры
            if (cb_aura.SelectedIndex == 0)
            {
                auraHP = hp / 100 * Aura;
            }
            if (cb_aura.SelectedIndex == 1)
            {
                auraATK = atk / 100 * Aura;
            }
            if (cb_aura.SelectedIndex == 2)
            {
                auraDEF = def / 100 * Aura;
            }
            if (cb_aura.SelectedIndex == 3)
            {
                auraSPD = speed / 100 * Aura;
            }
            if (cb_aura.SelectedIndex == 4)
            {
                auraCritChance = Aura;
            }
            if (cb_aura.SelectedIndex == 5)
            {
                auraResist = Aura;
            }
            if (cb_aura.SelectedIndex == 6)
            {
                auraACC = Aura;
            }



            //Финальные значения
            double hpFIN = hp + hpArenaFin + hpHallFin + HPComplectsFin + HPComplectsFin1 + HPComplectsFin2 + HPTalentsFIN + wp_hpPER_fin + wp_hp_fin + shd_hp_fin + shd_hpPER_fin + hm_hp_fin + hm_hpPER_fin + GLS_hpPER_Fin + GLS_hp_Fin +
                AR_hpPER_Fin + AR_hp_Fin + BTS_hp_Fin + BTS_hpPER_Fin + Ring_hpPER_Fin + Ring_hp_Fin + Amulet_hp_Fin + Banner_hpPER_Fin + Banner_hp_Fin + auraHP;
            double atkFIN = atk + atkArenaFin + atkHallFin + ATKComplectsFin + ATKComplectsFin1 + ATKComplectsFin2 + ATKTalentsFIN + wp_atk_fin + wp_atkPER_fin + hm_atk_fin + hm_atkPER_fin + GLS_atkPER_Fin + GLS_atk_Fin +
                AR_atk_Fin + AR_atkPER_Fin + BTS_atkPER_Fin + BTS_atk_Fin + Ring_atkPER_Fin + Ring_atk_Fin + Amulet_atk_Fin + Banner_atkPER_Fin + Banner_atk_Fin + auraATK;
            double defFIN = def + defArenaFin + defHallFin + DEFComplectsFin + DEFComplectsFin1 + DEFComplectsFin2 + DEFTalentsFIN + shd_def_fin + shd_defPER_fin + hm_defPER_fin + hm_def_fin + GLS_defPER_Fin + GLS_def_Fin +
                AR_defPER_Fin + AR_def_Fin + BTS_defPER_Fin + BTS_def_Fin + Ring_defPER_Fin + Ring_def_Fin + Amulet_def_Fin + Banner_defPER_Fin + Banner_def_Fin + auraDEF;
            double speedFIN = speed + SPDComplectsFin + SPDComplectsFin1 + SPDComplectsFin2 + wp_spd_fin + shd_spd_fin + hm_spd_fin + GLS_spd_Fin + AR_spd_Fin +
                BTS_spd_Fin + Banner_spd_Fin + auraSPD;
            double critchanceFIN = critchance + CritChanceComplectsFin + CritChanceComplectsFin1 + CritChanceComplectsFin2 + CritChanceComplectsFinDB + CritChanceComplectsFinDB1 + CritChanceComplectsFinDB2 + CritChanceTalentsFIN + wp_critchance_fin + shd_critchance_fin + hm_critchance_fin + GLS_critchance_Fin +
                AR_critchance_Fin + BTS_critchance_Fin + auraCritChance;
            double critdamageFIN = critdamage + critATKHallFin + CritDamageComplectsFin + CritDamageComplectsFin1 + CritDamageComplectsFin2 + CritDamageComplectsFinDB + CritDamageComplectsFinDB1 + CritDamageComplectsFinDB2 + CritDamageTalentsFIN + wp_critATK_fin + shd_critATK_fin + hm_critATK_fin + GLS_critATK_Fin +
                AR_critATK_Fin + BTS_critATK_Fin + Amulet_CritATK_Fin;
            double resistFIN = resist + resistHallFin + ResistComplectsFin + ResistComplectsFin1 + ResistComplectsFin2 + ResistComplectsFinDB + ResistComplectsFinDB1 + ResistComplectsFinDB2 + ResistTalentsFIN + wp_resist_fin + shd_resist_fin + hm_resist_fin + GLS_Resist_Fin +
                AR_Resist_Fin + BTS_Resist_Fin + Amulet_Resist_Fin + Banner_Resist_Fin + auraResist;
            double accFIN = acc + accHallFin + ACCComplectsFin + ACCComplectsFin1 + ACCComplectsFin2 + ACCComplectsFinDB + ACCComplectsFinDB1 + ACCComplectsFinDB2 + ACCTalentsFIN + wp_ACC_fin + shd_ACC_fin + hm_ACC_fin + GLS_ACC_Fin +
                AR_ACC_Fin + BTS_ACC_Fin + Amulet_ACC_Fin + Banner_ACC_Fin + auraACC;

            //Бонусы

            if (cb_bonus.SelectedIndex == 0)
            {
                speedFIN += speedFIN / 100 * 15;
            }
            if (cb_bonus.SelectedIndex == 1)
            {
                speedFIN += speedFIN / 100 * 30;
            }
            if (cb_bonus.SelectedIndex == 2)
            {
                defFIN += defFIN / 100 * 30;
            }
            if (cb_bonus.SelectedIndex == 3)
            {
                defFIN += defFIN / 100 * 60;
            }
            if (cb_bonus.SelectedIndex == 4)
            {
                critdamageFIN += 15;
            }
            if (cb_bonus.SelectedIndex == 5)
            {
                critdamageFIN += 30;
            }
            if (cb_bonus.SelectedIndex == 6)
            {
                atkFIN += atkFIN / 100 * 25;
            }
            if (cb_bonus.SelectedIndex == 7)
            {
                atkFIN += atkFIN / 100 * 50;
            }

            //Штрафы
            if (cb_penalt.SelectedIndex == 0)
            {
                speedFIN -= speedFIN / 100 * 15;
            }
            if (cb_penalt.SelectedIndex == 1)
            {
                speedFIN -= speedFIN / 100 * 30;
            }
            if (cb_penalt.SelectedIndex == 2)
            {
                defFIN -= defFIN / 100 * 30;
            }
            if (cb_penalt.SelectedIndex == 3)
            {
                defFIN -= defFIN / 100 * 60;
            }
            if (cb_penalt.SelectedIndex == 4)
            {
                accFIN -= accFIN / 100 * 25;
            }
            if (cb_penalt.SelectedIndex == 5)
            {
                accFIN -= accFIN / 100 * 50;
            }
            if (cb_penalt.SelectedIndex == 6)
            {
                atkFIN -= atkFIN / 100 * 25;
            }
            if (cb_penalt.SelectedIndex == 7)
            {
                atkFIN -= atkFIN / 100 * 50;
            }


            // Вывод финальных значений
            tb_HPFIN.Text = hpFIN.ToString();
            tb_ATKFIN.Text = atkFIN.ToString();
            tb_DEFFIN.Text = defFIN.ToString();
            tb_SPDFIN.Text = speedFIN.ToString();
            tb_CritChanceFIN.Text = critchanceFIN.ToString() + " %";
            tb_CritDamageFIN.Text = critdamageFIN.ToString() + " %";
            tb_ResistFIN.Text = resistFIN.ToString();
            tb_ACCFIN.Text = accFIN.ToString();

            //передача значений в массив сохранения в файл.


        }

        private void btn_Reset_Click(object sender, EventArgs e)
        {
            //Обнуление текстовых боксов артефактов
            tb_WP.Clear();
            tb1_WP.Clear();
            tb2_WP.Clear();
            tb3_WP.Clear();
            tb4_WP.Clear();
            tb_HM.Clear();
            tb1_HM.Clear();
            tb2_HM.Clear();
            tb3_HM.Clear();
            tb4_HM.Clear();
            tb_SHD.Clear();
            tb1_SHD.Clear();
            tb2_SHD.Clear();
            tb3_SHD.Clear();
            tb4_SHD.Clear();
            tb_GLS.Clear();
            tb1_GLS.Clear();
            tb2_GLS.Clear();
            tb3_GLS.Clear();
            tb4_GLS.Clear();
            tb_AR.Clear();
            tb1_AR.Clear();
            tb2_AR.Clear();
            tb3_AR.Clear();
            tb4_AR.Clear();
            tb_BTS.Clear();
            tb1_BTS.Clear();
            tb2_BTS.Clear();
            tb3_BTS.Clear();
            tb4_BTS.Clear();
            tb_RING.Clear();
            tb1_RING.Clear();
            tb2_RING.Clear();
            tb3_RING.Clear();
            tb4_RING.Clear();
            tb_AL.Clear();
            tb1_AL.Clear();
            tb2_AL.Clear();
            tb3_AL.Clear();
            tb4_AL.Clear();
            tb_BR.Clear();
            tb1_BR.Clear();
            tb2_BR.Clear();
            tb3_BR.Clear();
            tb4_BR.Clear();

            //Обнуление глифов
            tb1_wpglif.Clear();
            tb2_wpglif.Clear();
            tb3_wpglif.Clear();
            tb4_wpglif.Clear();

            tb1_hmglif.Clear();
            tb2_hmglif.Clear();
            tb3_hmglif.Clear();
            tb4_hmglif.Clear();

            tb1_shdglif.Clear();
            tb2_shdglif.Clear();
            tb3_shdglif.Clear();
            tb4_shdglif.Clear();

            tb1_glsglif.Clear();
            tb2_glsglif.Clear();
            tb3_glsglif.Clear();
            tb4_glsglif.Clear();

            tb1_arglif.Clear();
            tb2_arglif.Clear();
            tb3_arglif.Clear();
            tb4_arglif.Clear();

            tb1_btsglif.Clear();
            tb2_btsglif.Clear();
            tb3_btsglif.Clear();
            tb4_btsglif.Clear();


            tb1_ringglif.Clear();
            tb2_ringglif.Clear();
            tb3_ringglif.Clear();
            tb4_ringglif.Clear();

            tb1_amuletglif.Clear();
            tb2_amuletglif.Clear();
            tb3_amuletglif.Clear();
            tb4_amuletglif.Clear();

            tb1_bannerglif.Clear();
            tb2_bannerglif.Clear();
            tb3_bannerglif.Clear();
            tb4_bannerglif.Clear();

            //Обнуленине начальных и финальных характеристик
            tb_HP.Clear();
            tb_ATK.Clear();
            tb_DEF.Clear();
            tb_SPD.Clear();
            tb_CritChance.Clear();
            tb_CritDamage.Clear();
            tb_Resist.Clear();
            tb_ACC.Clear();
            tb_HPFIN.Clear();
            tb_ATKFIN.Clear();
            tb_DEFFIN.Clear();
            tb_SPDFIN.Clear();
            tb_CritChanceFIN.Clear();
            tb_CritDamageFIN.Clear();
            tb_ResistFIN.Clear();
            tb_ACCFIN.Clear();


            //Обнуление доп.параметров
            tb_aura.Clear();

            cb_aura.SelectedIndex = -1;
            cb_bonus.SelectedIndex = -1;
            cb_penalt.SelectedIndex = -1;


            //Обнуление параметров героя
            tb_fraction.Clear();
            tb_rarity.Clear();
            tb_HeroClass.Clear();
            tb_elements.Clear();
            cb_HeroName.SelectedIndex = -1;
            //Обнуление картинных боксов
            pb_HeroIco.BackgroundImage = null;
            pb_elements_1.BackgroundImage = null;
            pb_Elements_2.BackgroundImage = null;
            pb_borderHeroRariry.BackColor = Color.WhiteSmoke;
            pb_fraction.BackgroundImage = null;

            //Обнуление комбобоксов по артефактам
            CB1_WP.SelectedIndex = -1;
            CB2_WP.SelectedIndex = -1;
            CB3_WP.SelectedIndex = -1;
            CB4_WP.SelectedIndex = -1;

            cb1_HM.SelectedIndex = -1;
            cb2_HM.SelectedIndex = -1;
            cb3_HM.SelectedIndex = -1;
            cb4_HM.SelectedIndex = -1;

            cb1_SHD.SelectedIndex = -1;
            cb2_SHD.SelectedIndex = -1;
            cb3_SHD.SelectedIndex = -1;
            cb4_SHD.SelectedIndex = -1;

            cb_GLS.SelectedIndex = -1;
            cb1_GLS.SelectedIndex = -1;
            cb2_GLS.SelectedIndex = -1;
            cb3_GLS.SelectedIndex = -1;
            cb4_GLS.SelectedIndex = -1;

            cb_AR.SelectedIndex = -1;
            cb1_AR.SelectedIndex = -1;
            cb2_AR.SelectedIndex = -1;
            cb3_AR.SelectedIndex = -1;
            cb4_AR.SelectedIndex = -1;

            cb_BTS.SelectedIndex = -1;
            cb1_BTS.SelectedIndex = -1;
            cb2_BTS.SelectedIndex = -1;
            cb3_BTS.SelectedIndex = -1;
            cb4_BTS.SelectedIndex = -1;

            cb_RING.SelectedIndex = -1;
            cb1_RING.SelectedIndex = -1;
            cb2_RING.SelectedIndex = -1;
            cb3_RING.SelectedIndex = -1;
            cb4_RING.SelectedIndex = -1;

            cb_AL.SelectedIndex = -1;
            cb1_AL.SelectedIndex = -1;
            cb2_AL.SelectedIndex = -1;
            cb3_AL.SelectedIndex = -1;
            cb4_AL.SelectedIndex = -1;

            cb_BR.SelectedIndex = -1;
            cb1_BR.SelectedIndex = -1;
            cb2_BR.SelectedIndex = -1;
            cb3_BR.SelectedIndex = -1;
            cb4_BR.SelectedIndex = -1;

            //Обнуление Комбобоксов с комплектами
            comboBox_Complects.SelectedIndex = -1;
            comboBox1_Complects.SelectedIndex = -1;
            comboBox2_Complects.SelectedIndex = -1;

            //Обнуление по большому залу и лиге арены
            cb_LeagueArena.SelectedIndex = -1;
            cb_BigHall_HP.SelectedIndex = -1;
            cb_BigHall_ATK.SelectedIndex = -1;
            cb_BigHall_DEF.SelectedIndex = -1;
            cb_BigHall_CritATK.SelectedIndex = -1;
            cb_BigHall_Resist.SelectedIndex = -1;
            cb_BigHall_ACC.SelectedIndex = -1;

            //Обнуление по талантам атаки
            cb1_ATKTalent.SelectedIndex = -1;
            cb2_ATKTalent.SelectedIndex = -1;
            cb22_ATKTalent.SelectedIndex = -1;
            cb3_ATKTalent.SelectedIndex = -1;
            cb33_ATKTalent.SelectedIndex = -1;
            cb44_ATKTalent.SelectedIndex = -1;
            cb4_ATKTalent.SelectedIndex = -1;
            cb5_ATKTalent.SelectedIndex = -1;
            cb55_ATKTalent.SelectedIndex = -1;
            cb6_ATKTalent.SelectedIndex = -1;
            //Обнуление по талантам защиты
            cb1_DEFTalent.SelectedIndex = -1;
            cb2_DEFTalent.SelectedIndex = -1;
            cb22_DEFTalent.SelectedIndex = -1;
            cb33_DEFTalent.SelectedIndex = -1;
            cb3_DEFTalent.SelectedIndex = -1;
            cb4_DEFTalent.SelectedIndex = -1;
            cb44_DEFTalent.SelectedIndex = -1;
            cb5_DEFTalent.SelectedIndex = -1;
            cb55_DEFTalent.SelectedIndex = -1;
            cb6_DEFTalent.SelectedIndex = -1;

            //Обнуление по талантам поддержки
            cb1_SUPTalent.SelectedIndex = -1;
            cb2_SUPTalent.SelectedIndex = -1;
            cb22_SUPTalent.SelectedIndex = -1;
            cb3_SUPTalent.SelectedIndex = -1;
            cb33_SUPTalent.SelectedIndex = -1;
            cb44_SUPTalent.SelectedIndex = -1;
            cb4_SUPTalent.SelectedIndex = -1;
            cb5_SUPTalent.SelectedIndex = -1;
            cb55_SUPTalent.SelectedIndex = -1;
            cb6_SUPTalent.SelectedIndex = -1;
        }

        private void cb_LeagueArena_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cb_BigHall_HP_SelectedIndexChanged(object sender, EventArgs e)
        {

        }



        private void tb_HP_TextChanged(object sender, EventArgs e)
        {

        }

        private void tb_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (Char.IsDigit(e.KeyChar) == true) return;
            if (e.KeyChar == Convert.ToChar(Keys.Back)) return;
            e.Handled = true;

        }

        private void cb_KeyPress(object sender, KeyPressEventArgs em)
        {


            if (Char.IsDigit(em.KeyChar) == true & Char.IsDigit(em.KeyChar) == false) return;
            if (em.KeyChar == Convert.ToChar(Keys.Back)) return;
            em.Handled = true;

        }
        private void cb_KeyPress_hero(object sender, KeyPressEventArgs em)
        {


            if (Char.IsDigit(em.KeyChar) == false) return;
            if (em.KeyChar == Convert.ToChar(Keys.Back)) return;
            em.Handled = true;

        }
        private void tabPage8_Click(object sender, EventArgs e)
        {

        }

        private void groupBox30_Enter(object sender, EventArgs e)
        {

        }

        private void panel3_Paint(object sender, PaintEventArgs e)
        {

        }

        private void CB1_WP_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
        private void CB1_WP_Click(object sender, EventArgs e)
        {

        }

        private void tabPage_Talants_Click(object sender, EventArgs e)
        {

        }

        private void label12_Click(object sender, EventArgs e)
        {

        }

        private void tb_HP_Validated(object sender, EventArgs e)
        {

        }

        private void CalculatorRaid_Load(object sender, EventArgs e)
        {

        }

        private void label87_Click(object sender, EventArgs e)
        {

        }

        private void cb_SPD_ClanBoss_SelectedIndexChanged(object sender, EventArgs e)
        {




        }

        private void bt2_Start_CB_Click(object sender, EventArgs e)
        {
            int b = 0;
            if (tb1_SPDHeroCB.Text == "") { tb1_SPDHeroCB.Text = b.ToString(); }
            if (tb2_SPDHeroCB.Text == "") { tb2_SPDHeroCB.Text = b.ToString(); }
            if (tb3_SPDHeroCB.Text == "") { tb3_SPDHeroCB.Text = b.ToString(); }
            if (tb4_SPDHeroCB.Text == "") { tb4_SPDHeroCB.Text = b.ToString(); }
            if (tb5_SPDHeroCB.Text == "") { tb5_SPDHeroCB.Text = b.ToString(); }
            if (cb_SPD_ClanBoss.Text == "") { cb_SPD_ClanBoss.Text = b.ToString(); }

            if (tb1_SPD_TikHeroCB.Text == "") { tb1_SPD_TikHeroCB.Text = b.ToString(); }
            if (tb2_SPD_TikHeroCB.Text == "") { tb2_SPD_TikHeroCB.Text = b.ToString(); }
            if (tb3_SPD_TikHeroCB.Text == "") { tb3_SPD_TikHeroCB.Text = b.ToString(); }
            if (tb4_SPD_TikHeroCB.Text == "") { tb4_SPD_TikHeroCB.Text = b.ToString(); }
            if (tb5_SPD_TikHeroCB.Text == "") { tb5_SPD_TikHeroCB.Text = b.ToString(); }
            if (tb_SPDTickClanBoss.Text == "") { tb_SPDTickClanBoss.Text = b.ToString(); }

            datagrid_SPD_Calc.Rows.Clear();

            double SPDClanBoss = 0.0;
            double SPDHeroes_1 = Convert.ToDouble(tb1_SPDHeroCB.Text);
            double SPDHeroes_2 = Convert.ToDouble(tb2_SPDHeroCB.Text);
            double SPDHeroes_3 = Convert.ToDouble(tb3_SPDHeroCB.Text);
            double SPDHeroes_4 = Convert.ToDouble(tb4_SPDHeroCB.Text);
            double SPDHeroes_5 = Convert.ToDouble(tb5_SPDHeroCB.Text);
            double SPDClanBoss_Tik = 0.0;
            double SPDHeroes_1_Tik = 0.0;
            double SPDHeroes_2_Tik = 0.0;
            double SPDHeroes_3_Tik = 0.0;
            double SPDHeroes_4_Tik = 0.0;
            double SPDHeroes_5_Tik = 0.0;
            int step = 1;

            if (cb_SPD_ClanBoss.SelectedIndex == 0)
            {
                SPDClanBoss = 130;
            }
            if (cb_SPD_ClanBoss.SelectedIndex == 1)
            {
                SPDClanBoss = 140;
            }
            if (cb_SPD_ClanBoss.SelectedIndex == 2)
            {
                SPDClanBoss = 150;
            }
            if (cb_SPD_ClanBoss.SelectedIndex == 3)
            {
                SPDClanBoss = 160;
            }
            if (cb_SPD_ClanBoss.SelectedIndex == 4)
            {
                SPDClanBoss = 170;
            }
            if (cb_SPD_ClanBoss.SelectedIndex == 5)
            {
                SPDClanBoss = 190;
            }

            SPDClanBoss_Tik = SPDClanBoss * 0.07;
            SPDHeroes_1_Tik = SPDHeroes_1 * 0.07;
            SPDHeroes_2_Tik = SPDHeroes_2 * 0.07;
            SPDHeroes_3_Tik = SPDHeroes_3 * 0.07;
            SPDHeroes_4_Tik = SPDHeroes_4 * 0.07;
            SPDHeroes_5_Tik = SPDHeroes_5 * 0.07;

            tb_SPDTickClanBoss.Text = SPDClanBoss_Tik.ToString();
            tb1_SPD_TikHeroCB.Text = SPDHeroes_1_Tik.ToString();
            tb2_SPD_TikHeroCB.Text = SPDHeroes_2_Tik.ToString();
            tb3_SPD_TikHeroCB.Text = SPDHeroes_3_Tik.ToString();
            tb4_SPD_TikHeroCB.Text = SPDHeroes_4_Tik.ToString();
            tb5_SPD_TikHeroCB.Text = SPDHeroes_5_Tik.ToString();
            datagrid_SPD_Calc.Rows.Add(0, 0, 0, 0, 0, 0, 0);
            datagrid_SPD_Calc.Rows.Add(step, SPDHeroes_1_Tik, SPDHeroes_2_Tik, SPDHeroes_3_Tik, SPDHeroes_4_Tik, SPDHeroes_5_Tik, SPDClanBoss_Tik);

            for (int i = 1; i < 501; i++)
            {



                if ((SPDHeroes_1_Tik > 100) & (SPDHeroes_1_Tik >= SPDHeroes_2_Tik) & (SPDHeroes_1_Tik >= SPDHeroes_3_Tik) & (SPDHeroes_1_Tik >= SPDHeroes_4_Tik) & (SPDHeroes_1_Tik >= SPDHeroes_5_Tik) & (SPDHeroes_1_Tik >= SPDClanBoss_Tik))
                {
                    SPDHeroes_1_Tik = 0;
                    datagrid_SPD_Calc.Rows[i].Cells[1].Style.BackColor = System.Drawing.Color.Green;

                }
                else
                {
                    if ((SPDHeroes_2_Tik > 100) & (SPDHeroes_2_Tik > SPDHeroes_1_Tik) & (SPDHeroes_2_Tik >= SPDHeroes_3_Tik & SPDHeroes_2_Tik >= SPDHeroes_4_Tik & SPDHeroes_2_Tik >= SPDHeroes_5_Tik & SPDHeroes_2_Tik >= SPDClanBoss_Tik))
                    {
                        SPDHeroes_2_Tik = 0;
                        datagrid_SPD_Calc.Rows[i].Cells[2].Style.BackColor = System.Drawing.Color.Green;

                    }
                    else
                    {
                        if (SPDHeroes_3_Tik > 100 & SPDHeroes_3_Tik > SPDHeroes_2_Tik & SPDHeroes_3_Tik > SPDHeroes_1_Tik & SPDHeroes_3_Tik >= SPDHeroes_4_Tik & SPDHeroes_3_Tik >= SPDHeroes_5_Tik & SPDHeroes_3_Tik >= SPDClanBoss_Tik)
                        {
                            SPDHeroes_3_Tik = 0;
                            datagrid_SPD_Calc.Rows[i].Cells[3].Style.BackColor = System.Drawing.Color.Green;

                        }
                        else
                        {
                            if (SPDHeroes_4_Tik > 100 & SPDHeroes_4_Tik > SPDHeroes_2_Tik & SPDHeroes_4_Tik > SPDHeroes_3_Tik & SPDHeroes_4_Tik > SPDHeroes_1_Tik & SPDHeroes_4_Tik >= SPDHeroes_5_Tik & SPDHeroes_4_Tik >= SPDClanBoss_Tik)
                            {
                                SPDHeroes_4_Tik = 0;
                                datagrid_SPD_Calc.Rows[i].Cells[4].Style.BackColor = System.Drawing.Color.Green;

                            }
                            else
                            {

                                if (SPDHeroes_5_Tik > 100 & SPDHeroes_5_Tik > SPDHeroes_2_Tik & SPDHeroes_5_Tik > SPDHeroes_3_Tik & SPDHeroes_5_Tik > SPDHeroes_4_Tik & SPDHeroes_5_Tik > SPDHeroes_1_Tik & SPDHeroes_5_Tik >= SPDClanBoss_Tik)
                                {
                                    SPDHeroes_5_Tik = 0;
                                    datagrid_SPD_Calc.Rows[i].Cells[5].Style.BackColor = System.Drawing.Color.Green;
                                }
                                else
                                {
                                    if (SPDClanBoss_Tik > 100 & SPDClanBoss_Tik > SPDHeroes_1_Tik & SPDClanBoss_Tik > SPDHeroes_2_Tik & SPDClanBoss_Tik > SPDHeroes_3_Tik & SPDClanBoss_Tik > SPDHeroes_4_Tik & SPDClanBoss_Tik > SPDHeroes_5_Tik)
                                    {
                                        SPDClanBoss_Tik = 0;
                                        datagrid_SPD_Calc.Rows[i].Cells[6].Style.BackColor = System.Drawing.Color.Green;
                                        step += 1;
                                    }
                                }
                            }
                        }
                    }
                }

                SPDHeroes_1_Tik += SPDHeroes_1 * 0.07;
                SPDHeroes_2_Tik += SPDHeroes_2 * 0.07;
                SPDHeroes_3_Tik += SPDHeroes_3 * 0.07;
                SPDHeroes_4_Tik += SPDHeroes_4 * 0.07;
                SPDHeroes_5_Tik += SPDHeroes_5 * 0.07;
                SPDClanBoss_Tik += SPDClanBoss * 0.07;

                datagrid_SPD_Calc.Rows.Add(step, SPDHeroes_1_Tik, SPDHeroes_2_Tik, SPDHeroes_3_Tik, SPDHeroes_4_Tik, SPDHeroes_5_Tik, SPDClanBoss_Tik);

            }
        }

        private void bt2_Reset_CB_Click(object sender, EventArgs e)
        {
            tb1_SPDHeroCB.Clear();
            tb2_SPDHeroCB.Clear();
            tb3_SPDHeroCB.Clear();
            tb4_SPDHeroCB.Clear();
            tb5_SPDHeroCB.Clear();
            tb1_SPD_TikHeroCB.Clear();
            tb2_SPD_TikHeroCB.Clear();
            tb3_SPD_TikHeroCB.Clear();
            tb4_SPD_TikHeroCB.Clear();
            tb5_SPD_TikHeroCB.Clear();
            tb_SPDTickClanBoss.Clear();
            cb_SPD_ClanBoss.SelectedIndex = -1;
            datagrid_SPD_Calc.Rows.Clear();

        }

        private void btn3_StartArena_Click(object sender, EventArgs e)
        {
            int c = 0;

            if (tb1_ArenaHeroT1.Text == "") { tb1_ArenaHeroT1.Text = c.ToString(); }
            if (tb2_ArenaHeroT1.Text == "") { tb2_ArenaHeroT1.Text = c.ToString(); }
            if (tb3_ArenaHeroT1.Text == "") { tb3_ArenaHeroT1.Text = c.ToString(); }
            if (tb4_ArenaHeroT1.Text == "") { tb4_ArenaHeroT1.Text = c.ToString(); }
            if (tb1_ArenaHeroT2.Text == "") { tb1_ArenaHeroT2.Text = c.ToString(); }
            if (tb2_ArenaHeroT2.Text == "") { tb2_ArenaHeroT2.Text = c.ToString(); }
            if (tb3_ArenaHeroT2.Text == "") { tb3_ArenaHeroT2.Text = c.ToString(); }
            if (tb4_ArenaHeroT2.Text == "") { tb4_ArenaHeroT2.Text = c.ToString(); }

            if (tb1_AuraSPDArenaT1.Text == "") { tb1_AuraSPDArenaT1.Text = c.ToString(); }
            if (tb1_zalivT1.Text == "") { tb1_zalivT1.Text = c.ToString(); }
            if (tb2_zalivT1.Text == "") { tb2_zalivT1.Text = c.ToString(); }

            if (tb2_AuraSPDArenaT2.Text == "") { tb2_AuraSPDArenaT2.Text = c.ToString(); }
            if (tb1_zalivT2.Text == "") { tb1_zalivT2.Text = c.ToString(); }
            if (tb2_zalivT2.Text == "") { tb2_zalivT2.Text = c.ToString(); }

            dataGridView_Arena.Rows.Clear();

            double ArenaHero1T1 = Convert.ToDouble(tb1_ArenaHeroT1.Text);
            double ArenaHero2T1 = Convert.ToDouble(tb2_ArenaHeroT1.Text);
            double ArenaHero3T1 = Convert.ToDouble(tb3_ArenaHeroT1.Text);
            double ArenaHero4T1 = Convert.ToDouble(tb4_ArenaHeroT1.Text);

            double ArenaHero1T2 = Convert.ToDouble(tb1_ArenaHeroT2.Text);
            double ArenaHero2T2 = Convert.ToDouble(tb2_ArenaHeroT2.Text);
            double ArenaHero3T2 = Convert.ToDouble(tb3_ArenaHeroT2.Text);
            double ArenaHero4T2 = Convert.ToDouble(tb4_ArenaHeroT2.Text);

            double zaliv1T1 = 0.0;
            double zaliv2T1 = 0.0;
            double zaliv1T2 = 0.0;
            double zaliv2T2 = 0.0;

            double AuraSPDT1 = Convert.ToDouble(tb1_AuraSPDArenaT1.Text);
            double AuraSPDT2 = Convert.ToDouble(tb2_AuraSPDArenaT2.Text);
            int stepArena = 1;

            double ArenaHero1T1Aura = ArenaHero1T1 / 100 * AuraSPDT1;
            double ArenaHero2T1Aura = ArenaHero2T1 / 100 * AuraSPDT1;
            double ArenaHero3T1Aura = ArenaHero3T1 / 100 * AuraSPDT1;
            double ArenaHero4T1Aura = ArenaHero4T1 / 100 * AuraSPDT1;

            double ArenaHero1T2Aura = ArenaHero1T1 / 100 * AuraSPDT2;
            double ArenaHero2T2Aura = ArenaHero2T1 / 100 * AuraSPDT2;
            double ArenaHero3T2Aura = ArenaHero3T1 / 100 * AuraSPDT2;
            double ArenaHero4T2Aura = ArenaHero4T1 / 100 * AuraSPDT2;


            if (cb1_ZalivT1.Checked == true)
            {
                zaliv1T1 = Convert.ToDouble(tb1_zalivT1.Text);

            }
            if (cb2_ZalivT1.Checked == true)
            {
                zaliv2T1 = Convert.ToDouble(tb2_zalivT1.Text);

            }
            if (cb1_ZalivT2.Checked == true)
            {

                zaliv1T2 = Convert.ToDouble(tb1_zalivT2.Text);

            }
            if (cb2_ZalivT2.Checked == true)
            {
                zaliv2T2 = Convert.ToDouble(tb2_zalivT2.Text);
            }

            double SPDHeroesArenaT1_1_Tik = (ArenaHero1T1 + ArenaHero1T1Aura) * 0.07;
            double SPDHeroesArenaT1_2_Tik = (ArenaHero2T1 + ArenaHero2T1Aura) * 0.07;
            double SPDHeroesArenaT1_3_Tik = (ArenaHero3T1 + ArenaHero3T1Aura) * 0.07;
            double SPDHeroesArenaT1_4_Tik = (ArenaHero4T1 + ArenaHero4T1Aura) * 0.07;

            double SPDHeroesArenaT2_1_Tik = (ArenaHero1T2 + ArenaHero1T2Aura) * 0.07;
            double SPDHeroesArenaT2_2_Tik = (ArenaHero2T2 + ArenaHero2T2Aura) * 0.07;
            double SPDHeroesArenaT2_3_Tik = (ArenaHero3T2 + ArenaHero3T2Aura) * 0.07;
            double SPDHeroesArenaT2_4_Tik = (ArenaHero4T2 + ArenaHero4T2Aura) * 0.07;


            tb1_ArenaHeroT1_TIK.Text = SPDHeroesArenaT1_1_Tik.ToString();
            tb2_ArenaHeroT1_TIK.Text = SPDHeroesArenaT1_2_Tik.ToString();
            tb3_ArenaHeroT1_TIK.Text = SPDHeroesArenaT1_3_Tik.ToString();
            tb4_ArenaHeroT1_TIK.Text = SPDHeroesArenaT1_4_Tik.ToString();

            tb1_ArenaHeroT2_TIK.Text = SPDHeroesArenaT2_1_Tik.ToString();
            tb2_ArenaHeroT2_TIK.Text = SPDHeroesArenaT2_2_Tik.ToString();
            tb3_ArenaHeroT2_TIK.Text = SPDHeroesArenaT2_3_Tik.ToString();
            tb4_ArenaHeroT2_TIK.Text = SPDHeroesArenaT2_4_Tik.ToString();

            dataGridView_Arena.Rows.Add(0, 0, 0, 0, 0, 0, 0, 0, 0);
            dataGridView_Arena.Rows.Add(stepArena, SPDHeroesArenaT1_1_Tik, SPDHeroesArenaT1_2_Tik, SPDHeroesArenaT1_3_Tik, SPDHeroesArenaT1_4_Tik,
               SPDHeroesArenaT2_1_Tik, SPDHeroesArenaT2_2_Tik, SPDHeroesArenaT2_3_Tik, SPDHeroesArenaT2_4_Tik);


            for (int i = 1; i < 100; i++)
            {

                if ((SPDHeroesArenaT1_1_Tik > 100) & (SPDHeroesArenaT1_1_Tik >= SPDHeroesArenaT1_2_Tik) & (SPDHeroesArenaT1_1_Tik >= SPDHeroesArenaT1_3_Tik)
                    & (SPDHeroesArenaT1_1_Tik >= SPDHeroesArenaT1_4_Tik) & (SPDHeroesArenaT1_1_Tik >= SPDHeroesArenaT2_1_Tik)
                    & (SPDHeroesArenaT1_1_Tik >= SPDHeroesArenaT2_2_Tik) & (SPDHeroesArenaT1_1_Tik >= SPDHeroesArenaT2_3_Tik)
                    & (SPDHeroesArenaT1_1_Tik >= SPDHeroesArenaT1_4_Tik))
                {
                    SPDHeroesArenaT1_1_Tik = 0;
                    dataGridView_Arena.Rows[i].Cells[1].Style.BackColor = System.Drawing.Color.Green;
                    SPDHeroesArenaT1_1_Tik += zaliv1T1;
                    SPDHeroesArenaT1_2_Tik += zaliv1T1;
                    SPDHeroesArenaT1_3_Tik += zaliv1T1;
                    SPDHeroesArenaT1_4_Tik += zaliv1T1;



                }
                else
                {
                    if ((SPDHeroesArenaT1_2_Tik > 100) & (SPDHeroesArenaT1_2_Tik >= SPDHeroesArenaT1_1_Tik) & (SPDHeroesArenaT1_2_Tik >= SPDHeroesArenaT1_3_Tik)
                    & (SPDHeroesArenaT1_2_Tik >= SPDHeroesArenaT1_4_Tik) & (SPDHeroesArenaT1_2_Tik >= SPDHeroesArenaT2_1_Tik)
                    & (SPDHeroesArenaT1_2_Tik >= SPDHeroesArenaT2_2_Tik) & (SPDHeroesArenaT1_2_Tik >= SPDHeroesArenaT2_3_Tik)
                    & (SPDHeroesArenaT1_2_Tik >= SPDHeroesArenaT1_4_Tik))
                    {
                        SPDHeroesArenaT1_2_Tik = 0;
                        dataGridView_Arena.Rows[i].Cells[2].Style.BackColor = System.Drawing.Color.Green;
                        SPDHeroesArenaT1_1_Tik += zaliv2T1;
                        SPDHeroesArenaT1_2_Tik += zaliv2T1;
                        SPDHeroesArenaT1_3_Tik += zaliv2T1;
                        SPDHeroesArenaT1_4_Tik += zaliv2T1;

                    }
                    else
                    {
                        if ((SPDHeroesArenaT1_3_Tik > 100) & (SPDHeroesArenaT1_3_Tik >= SPDHeroesArenaT1_1_Tik) & (SPDHeroesArenaT1_3_Tik >= SPDHeroesArenaT1_2_Tik)
                                                           & (SPDHeroesArenaT1_3_Tik >= SPDHeroesArenaT1_4_Tik) & (SPDHeroesArenaT1_3_Tik >= SPDHeroesArenaT2_1_Tik)
                                                           & (SPDHeroesArenaT1_3_Tik >= SPDHeroesArenaT2_2_Tik) & (SPDHeroesArenaT1_3_Tik >= SPDHeroesArenaT2_3_Tik)
                                                           & (SPDHeroesArenaT1_3_Tik >= SPDHeroesArenaT1_4_Tik))
                        {
                            SPDHeroesArenaT1_3_Tik = 0;
                            dataGridView_Arena.Rows[i].Cells[3].Style.BackColor = System.Drawing.Color.Green;

                        }
                        else
                        {
                            if ((SPDHeroesArenaT1_4_Tik > 100) & (SPDHeroesArenaT1_4_Tik >= SPDHeroesArenaT1_1_Tik) & (SPDHeroesArenaT1_4_Tik >= SPDHeroesArenaT1_2_Tik)
                                                           & (SPDHeroesArenaT1_4_Tik >= SPDHeroesArenaT1_3_Tik) & (SPDHeroesArenaT1_4_Tik >= SPDHeroesArenaT2_1_Tik)
                                                           & (SPDHeroesArenaT1_4_Tik >= SPDHeroesArenaT2_2_Tik) & (SPDHeroesArenaT1_4_Tik >= SPDHeroesArenaT2_3_Tik)
                                                           & (SPDHeroesArenaT1_4_Tik >= SPDHeroesArenaT2_4_Tik))
                            {
                                SPDHeroesArenaT1_4_Tik = 0;
                                dataGridView_Arena.Rows[i].Cells[4].Style.BackColor = System.Drawing.Color.Green;

                            }
                            else
                            {
                                if ((SPDHeroesArenaT2_1_Tik > 100) & (SPDHeroesArenaT2_1_Tik >= SPDHeroesArenaT1_1_Tik) & (SPDHeroesArenaT2_1_Tik >= SPDHeroesArenaT1_2_Tik)
                                                           & (SPDHeroesArenaT2_1_Tik >= SPDHeroesArenaT1_3_Tik) & (SPDHeroesArenaT2_1_Tik >= SPDHeroesArenaT1_4_Tik)
                                                           & (SPDHeroesArenaT2_1_Tik >= SPDHeroesArenaT2_2_Tik) & (SPDHeroesArenaT2_1_Tik >= SPDHeroesArenaT2_3_Tik)
                                                           & (SPDHeroesArenaT2_1_Tik >= SPDHeroesArenaT2_4_Tik))
                                {
                                    SPDHeroesArenaT2_1_Tik = 0;
                                    dataGridView_Arena.Rows[i].Cells[5].Style.BackColor = System.Drawing.Color.Green;
                                    SPDHeroesArenaT2_1_Tik += zaliv1T2;
                                    SPDHeroesArenaT2_2_Tik += zaliv1T2;
                                    SPDHeroesArenaT2_3_Tik += zaliv1T2;
                                    SPDHeroesArenaT2_4_Tik += zaliv1T2;
                                }
                                else
                                {
                                    if ((SPDHeroesArenaT2_2_Tik > 100) & (SPDHeroesArenaT2_2_Tik >= SPDHeroesArenaT1_1_Tik) & (SPDHeroesArenaT2_2_Tik >= SPDHeroesArenaT1_2_Tik)
                                                          & (SPDHeroesArenaT2_2_Tik >= SPDHeroesArenaT1_3_Tik) & (SPDHeroesArenaT2_2_Tik >= SPDHeroesArenaT1_4_Tik)
                                                          & (SPDHeroesArenaT2_2_Tik >= SPDHeroesArenaT2_1_Tik) & (SPDHeroesArenaT2_2_Tik >= SPDHeroesArenaT2_3_Tik)
                                                          & (SPDHeroesArenaT2_2_Tik >= SPDHeroesArenaT2_4_Tik))
                                    {
                                        SPDHeroesArenaT2_2_Tik = 0;
                                        dataGridView_Arena.Rows[i].Cells[6].Style.BackColor = System.Drawing.Color.Green;
                                        SPDHeroesArenaT2_1_Tik += zaliv2T2;
                                        SPDHeroesArenaT2_2_Tik += zaliv2T2;
                                        SPDHeroesArenaT2_3_Tik += zaliv2T2;
                                        SPDHeroesArenaT2_4_Tik += zaliv2T2;

                                    }
                                    else
                                    {
                                        if ((SPDHeroesArenaT2_3_Tik > 100) & (SPDHeroesArenaT2_3_Tik >= SPDHeroesArenaT1_1_Tik) & (SPDHeroesArenaT2_3_Tik >= SPDHeroesArenaT1_2_Tik)
                                                          & (SPDHeroesArenaT2_3_Tik >= SPDHeroesArenaT1_3_Tik) & (SPDHeroesArenaT2_3_Tik >= SPDHeroesArenaT1_4_Tik)
                                                          & (SPDHeroesArenaT2_3_Tik >= SPDHeroesArenaT2_2_Tik) & (SPDHeroesArenaT2_3_Tik >= SPDHeroesArenaT2_1_Tik)
                                                          & (SPDHeroesArenaT2_3_Tik >= SPDHeroesArenaT2_4_Tik))
                                        {
                                            SPDHeroesArenaT2_3_Tik = 0;
                                            dataGridView_Arena.Rows[i].Cells[7].Style.BackColor = System.Drawing.Color.Green;

                                        }
                                        else
                                        {
                                            if ((SPDHeroesArenaT2_4_Tik > 100) & (SPDHeroesArenaT2_4_Tik >= SPDHeroesArenaT1_1_Tik) & (SPDHeroesArenaT2_4_Tik >= SPDHeroesArenaT1_2_Tik)
                                                         & (SPDHeroesArenaT2_4_Tik >= SPDHeroesArenaT1_3_Tik) & (SPDHeroesArenaT2_4_Tik >= SPDHeroesArenaT1_4_Tik)
                                                         & (SPDHeroesArenaT2_4_Tik >= SPDHeroesArenaT2_2_Tik) & (SPDHeroesArenaT2_4_Tik >= SPDHeroesArenaT2_1_Tik)
                                                         & (SPDHeroesArenaT2_4_Tik >= SPDHeroesArenaT2_3_Tik))
                                            {
                                                SPDHeroesArenaT2_4_Tik = 0;
                                                dataGridView_Arena.Rows[i].Cells[8].Style.BackColor = System.Drawing.Color.Green;

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                }



                SPDHeroesArenaT1_1_Tik += (ArenaHero1T1 + ArenaHero1T1Aura) * 0.07;
                SPDHeroesArenaT1_2_Tik += (ArenaHero2T1 + ArenaHero2T1Aura) * 0.07;
                SPDHeroesArenaT1_3_Tik += (ArenaHero3T1 + ArenaHero3T1Aura) * 0.07;
                SPDHeroesArenaT1_4_Tik += (ArenaHero4T1 + ArenaHero4T1Aura) * 0.07;

                SPDHeroesArenaT2_1_Tik += (ArenaHero1T2 + ArenaHero1T2Aura) * 0.07;
                SPDHeroesArenaT2_2_Tik += (ArenaHero2T2 + ArenaHero2T2Aura) * 0.07;
                SPDHeroesArenaT2_3_Tik += (ArenaHero3T2 + ArenaHero3T2Aura) * 0.07;
                SPDHeroesArenaT2_4_Tik += (ArenaHero4T2 + ArenaHero4T2Aura) * 0.07;


                stepArena += 1;

                dataGridView_Arena.Rows.Add(stepArena, SPDHeroesArenaT1_1_Tik, SPDHeroesArenaT1_2_Tik, SPDHeroesArenaT1_3_Tik, SPDHeroesArenaT1_4_Tik,
              SPDHeroesArenaT2_1_Tik, SPDHeroesArenaT2_2_Tik, SPDHeroesArenaT2_3_Tik, SPDHeroesArenaT2_4_Tik);

            }
        }

        private void btn3_ResetArena_Click(object sender, EventArgs e)
        {
            tb1_ArenaHeroT1.Clear();
            tb2_ArenaHeroT1.Clear();
            tb3_ArenaHeroT1.Clear();
            tb4_ArenaHeroT1.Clear();
            tb1_ArenaHeroT2.Clear();
            tb2_ArenaHeroT2.Clear();
            tb3_ArenaHeroT2.Clear();
            tb4_ArenaHeroT2.Clear();
            tb1_AuraSPDArenaT1.Clear();
            tb2_AuraSPDArenaT2.Clear();
            tb1_zalivT1.Clear();
            tb2_zalivT1.Clear();
            tb1_zalivT2.Clear();
            tb2_zalivT2.Clear();

            tb1_ArenaHeroT1_TIK.Clear();
            tb2_ArenaHeroT1_TIK.Clear();
            tb3_ArenaHeroT1_TIK.Clear();
            tb4_ArenaHeroT1_TIK.Clear();

            tb1_ArenaHeroT2_TIK.Clear();
            tb2_ArenaHeroT2_TIK.Clear();
            tb3_ArenaHeroT2_TIK.Clear();
            tb4_ArenaHeroT2_TIK.Clear();
            dataGridView_Arena.Rows.Clear();
        }

        private void richTextBox4_TextChanged(object sender, EventArgs e)
        {

        }
        private void cb1_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb1_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.AdeptKlinka;
                RichTBTalentsATK.Text = "Атака +75";
            }
            if (cb1_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.GlazAlmaz;
                RichTBTalentsATK.Text = "Критический шанс +5%";
            }
        }
        private void cb2_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb2_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.KrovSMolokom;
                RichTBTalentsATK.Text = "Герой с полной шкалой здоровья наносит на 5% больше урона.";
            }
            if (cb2_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.JestkiyUdar;
                RichTBTalentsATK.Text = "Критической урон +10%";
            }

            if (cb2_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.Shchitolom;
                RichTBTalentsATK.Text = "Герой наносит на 25% больше урона целям со [Щитом]. ";

            }
            if (cb2_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.MrachniyIshod;
                RichTBTalentsATK.Text = "Герой наносит на 5% больше урона, если у него 50% или меньше здоровья.";
            }
        }
        private void cb22_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb22_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.KrovSMolokom;
                RichTBTalentsATK.Text = "Герой с полной шкалой здоровья наносит на 5% больше урона.";
            }
            if (cb22_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.JestkiyUdar;
                RichTBTalentsATK.Text = "Критической урон +10%";
            }

            if (cb22_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.Shchitolom;
                RichTBTalentsATK.Text = "Герой наносит на 25% больше урона целям со [Щитом]. ";

            }
            if (cb22_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.MrachniyIshod;
                RichTBTalentsATK.Text = "Герой наносит на 5% больше урона, если у него 50% или меньше здоровья.";
            }
        }
        private void cb3_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb3_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.CentrVnimaniya;
                RichTBTalentsATK.Text = "Герой наносит на 8% больше урона целям, у которых меньше 40% здоровья";
            }
            if (cb3_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.GlotokJizni;
                RichTBTalentsATK.Text = "Герой лечится на 5% от нанесенного урона, когда атакует с 50% здоровья или меньше";
            }

            if (cb3_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.SmertelniyVihr;
                RichTBTalentsATK.Text = "Скорость героя увеличивается на 6 за каждого врага, убитого в этом бою. Максимум: 18 скорости. ";

            }
            if (cb3_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.ZahvatVRasploh;
                RichTBTalentsATK.Text = "Первый удар наносит на 8% больше урона";
            }
        }
        private void cb33_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb33_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.CentrVnimaniya;
                RichTBTalentsATK.Text = "Герой наносит на 8% больше урона целям, у которых меньше 40% здоровья";
            }
            if (cb33_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.GlotokJizni;
                RichTBTalentsATK.Text = "Герой лечится на 5% от нанесенного урона, когда атакует с 50% здоровья или меньше";
            }

            if (cb33_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.SmertelniyVihr;
                RichTBTalentsATK.Text = "Скорость героя увеличивается на 6 за каждого врага, убитого в этом бою. Максимум: 18 скорости. ";

            }
            if (cb33_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.ZahvatVRasploh;
                RichTBTalentsATK.Text = "Первый удар наносит на 8% больше урона";
            }
        }
        private void cb4_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb4_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.VoVseTyajkie;
                RichTBTalentsATK.Text = "Герой наносит на 6% больше урона целям с максимальным здоровьем выше, чем у него.";
            }
            if (cb4_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.MestPavshih;
                RichTBTalentsATK.Text = "Герой наносит на 5% больше урона за каждого павшего союзника. Максимум: 10%.";
            }

            if (cb4_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.KrugovorotYarosti;
                RichTBTalentsATK.Text = "Раз за ход герой получает 30% шанс сократить перезарядку случайного навыка на 1 ход, если урон от одного навыка отнимает больше 30% максимального здоровья цели. ";

            }
            if (cb4_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.NosPoVetru;
                RichTBTalentsATK.Text = "Герой наносит на 12% болльше урона по целям со штрафами [Оглушения], [Сна], [Заморозки]";
            }
        }
        private void cb44_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb44_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.VoVseTyajkie;
                RichTBTalentsATK.Text = "Герой наносит на 6% больше урона целям с максимальным здоровьем выше, чем у него.";
            }
            if (cb44_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.MestPavshih;
                RichTBTalentsATK.Text = "Герой наносит на 5% больше урона за каждого павшего союзника. Максимум: 10%.";
            }

            if (cb44_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.KrugovorotYarosti;
                RichTBTalentsATK.Text = "Раз за ход герой получает 30% шанс сократить перезарядку случайного навыка на 1 ход, если урон от одного навыка отнимает больше 30% максимального здоровья цели. ";

            }
            if (cb44_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.NosPoVetru;
                RichTBTalentsATK.Text = "Герой наносит на 12% болльше урона по целям со штрафами [Оглушения], [Сна], [Заморозки]";
            }
        }
        private void cb5_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb5_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.MetodichnayaAtaka;
                RichTBTalentsATK.Text = "С каждым применением базового навыка урон от него возрастает на 2%. Максимум: 10%";
            }
            if (cb5_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.RokovoyKuraj;
                RichTBTalentsATK.Text = "Герой наносит на 6% больше урона на Арене, на 3% в остальных локациях за каждого убитого им врага. Максимум: 12%";
            }

            if (cb5_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.KrovaviySHchit;
                RichTBTalentsATK.Text = "Герой один раз за ход получает [Щит] на 1 ход, когда убивает врага. Сила Щита равна 15% максимального здоровья героя. ";

            }
            if (cb5_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.SvirepiyOtpor;
                RichTBTalentsATK.Text = "Герой наносит на 4% больше урона за каждый штраф, повешенный на него. Максимум 12%";
            }
        }
        private void cb55_ATKTalent_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            if (cb55_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.MetodichnayaAtaka;
                RichTBTalentsATK.Text = "С каждым применением базового навыка урон от него возрастает на 2%. Максимум: 10%";
            }
            if (cb55_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.RokovoyKuraj;
                RichTBTalentsATK.Text = "Герой наносит на 6% больше урона на Арене, на 3% в остальных локациях за каждого убитого им врага. Максимум: 12%";
            }

            if (cb55_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.KrovaviySHchit;
                RichTBTalentsATK.Text = "Герой один раз за ход получает [Щит] на 1 ход, когда убивает врага. Сила Щита равна 15% максимального здоровья героя. ";

            }
            if (cb55_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.SvirepiyOtpor;
                RichTBTalentsATK.Text = "Герой наносит на 4% больше урона за каждый штраф, повешенный на него. Максимум 12%";
            }
        }
        private void cb6_ATKTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb6_ATKTalent.SelectedIndex == 0)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.VoennyhDelMaster;
                RichTBTalentsATK.Text = "Герой с вероятностью 60% наносит дополнительный урон при атаке. " +
                    "Размер дополнительного урона равен 10% максимального здоровья обычной цели или 4% максимального здоровья босса. " +
                    "Дополнительный урон можно нанести столько один раз для каждого навыка, при этом он не считается отдельным ударом. " +
                    "Урон зависит от [Максимального здоровья врага]";
            }
            if (cb6_ATKTalent.SelectedIndex == 1)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.krushitelcherepov;
                RichTBTalentsATK.Text = "Герой с вероятностью 50% игнорирует 25% защиты цели. Навыки, которые используют защиту, игнорируют на 25% больше защиты цели.";
            }

            if (cb6_ATKTalent.SelectedIndex == 2)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.GrozaVelikanov;
                RichTBTalentsATK.Text = "Герой с вероятностью 30% наносит дополнительный урон при атаке. " +
                    "Размер дополнительного урона равен 7.5% максимального здоровья обычной цели или 3% максимального здоровья босса. " +
                    "Дополнительный урон можно нанести с каждым ударом, при этом он не считается отдельным ударом. " +
                    "Урон зависит от [Максимального здоровья врага]";

            }
            if (cb6_ATKTalent.SelectedIndex == 3)
            {
                TalentsPicturesATK.BackgroundImage = RaidCalculator.Properties.Resources.BezuprechnoeIspolnenie;
                RichTBTalentsATK.Text = "Критический урон +20%";
            }
        }

        private void cb1_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb1_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.KamennayaKoja;
                RichTBTalentsDEF.Text = "Защита +75.";
            }
            if (cb1_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.ShagNaperekor;
                RichTBTalentsDEF.Text = "Сопротивление +10";
            }
        }

        private void cb2_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb2_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Protivlenie;
                RichTBTalentsDEF.Text = "Герой получает на 5% меньше урона от атак по площади.";
            }
            if (cb2_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Omolojenie;
                RichTBTalentsDEF.Text = "Герой получает на 5% больше лечения и защиты от бонуса [Щит]";
            }
            if (cb2_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Zakalka;
                RichTBTalentsDEF.Text = "Герой получает на 10% меньше урона, если на нём штраф [Оглушения],[Сна] или [Заморозки].";
            }
            if (cb2_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.EffecnoeOtrajenie;
                RichTBTalentsDEF.Text = "Герой получает на 8% меньше урона от критического удара";
            }
        }

        private void cb22_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb22_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Protivlenie;
                RichTBTalentsDEF.Text = "Герой получает на 5% меньше урона от атак по площади.";
            }
            if (cb22_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Omolojenie;
                RichTBTalentsDEF.Text = "Герой получает на 5% больше лечения и защиты от бонуса [Щит]";
            }
            if (cb22_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Zakalka;
                RichTBTalentsDEF.Text = "Герой получает на 10% меньше урона, если на нём штраф [Оглушения],[Сна] или [Заморозки].";
            }
            if (cb22_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.EffecnoeOtrajenie;
                RichTBTalentsDEF.Text = "Герой получает на 8% меньше урона от критического удара";
            }
        }

        private void cb3_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb3_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.ZerkalnoeIscelenie;
                RichTBTalentsDEF.Text = "Герой лучится на 6% своего максимального здоровья каждый раз, когда лечится враг. Доступно раз за ход.";
            }
            if (cb3_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Uporstvo;
                RichTBTalentsDEF.Text = "Герой с вероятностью 50% снимает с себя случайный штраф, когда теряет 25% своего максимального здоровья от навыка одного врага";
            }
            if (cb3_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.JajdaSmerty;
                RichTBTalentsDEF.Text = "Герой лечится на 10% своего максимального здоровья, когда убивает врага. Перезарядка -1 ход.";
            }
            if (cb3_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.IsskustvoVoiny;
                RichTBTalentsDEF.Text = "Герой с вероятностью 30% получает бонус [Блок штрафов] на 1 ход, когда на него перестает действовать [Оглушение], [Сон] или [Заморозка]";
            }
        }

        private void cb33_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb33_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.ZerkalnoeIscelenie;
                RichTBTalentsDEF.Text = "Герой лучится на 6% своего максимального здоровья каждый раз, когда лечится враг. Доступно раз за ход.";
            }
            if (cb33_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Uporstvo;
                RichTBTalentsDEF.Text = "Герой с вероятностью 50% снимает с себя случайный штраф, когда теряет 25% своего максимального здоровья от навыка одного врага";
            }
            if (cb33_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.JajdaSmerty;
                RichTBTalentsDEF.Text = "Герой лечится на 10% своего максимального здоровья, когда убивает врага. Перезарядка -1 ход.";
            }
            if (cb33_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.IsskustvoVoiny;
                RichTBTalentsDEF.Text = "Герой с вероятностью 30% получает бонус [Блок штрафов] на 1 ход, когда на него перестает действовать [Оглушение], [Сон] или [Заморозка]";
            }
        }

        private void cb4_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb4_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Edinstvo;
                RichTBTalentsDEF.Text = "Герой увеличивает сопротивление союзника на 5 ха каждый бонус, который этот герой наложил.";
            }
            if (cb4_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.OtsrochkaSmerty;
                RichTBTalentsDEF.Text = "Герой сокращает урон от атак конкретного врага на 0,75% при каждом ударе. Максимум 6%.";
            }
            if (cb4_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.JestokayaJatva;
                RichTBTalentsDEF.Text = "Герой с вероятностью 60% накладывает штраф [Паразит] на 1 ход, наккладывая [Оглушение], [Сон] или [Заморозку].";
            }
            if (cb4_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Upryamstvo;
                RichTBTalentsDEF.Text = "Сопротивление героя увеличивается на 10 за каждый наложенный на него штраф. Максимум: 30";
            }
        }

        private void cb44_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb44_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Edinstvo;
                RichTBTalentsDEF.Text = "Герой увеличивает сопротивление союзника на 5 ха каждый бонус, который этот герой наложил.";
            }
            if (cb44_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.OtsrochkaSmerty;
                RichTBTalentsDEF.Text = "Герой сокращает урон от атак конкретного врага на 0,75% при каждом ударе. Максимум 6%.";
            }
            if (cb44_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.JestokayaJatva;
                RichTBTalentsDEF.Text = "Герой с вероятностью 60% накладывает штраф [Паразит] на 1 ход, наккладывая [Оглушение], [Сон] или [Заморозку].";
            }
            if (cb44_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Upryamstvo;
                RichTBTalentsDEF.Text = "Сопротивление героя увеличивается на 10 за каждый наложенный на него штраф. Максимум: 30";
            }
        }

        private void cb5_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb5_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.GotovnostKJertve;
                RichTBTalentsDEF.Text = "Герой сокращает урон союзника от первой атаки врага на 20%. Он принимает удар на себя вместо союзника.";
            }
            if (cb5_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.HolodnayaMest;
                RichTBTalentsDEF.Text = "Герой с вероятностью 50% пополняет шкалу хода на 15%, когда союзник получает критический урон от одного навыка врага.";
            }
            if (cb5_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Otplata;
                RichTBTalentsDEF.Text = "Герой с вероятностью 50% использует базовый навык для контраатаки, когда теряет 25% максимального здоровья от навыка одного врага.";
            }
            if (cb5_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Strashchanie;
                RichTBTalentsDEF.Text = "Герой с вероятностью 20% использует базовый навык для атаки, когда враг накладывает на союзника [Оглушение],[Сон] или [Заморозку]";
            }
        }

        private void cb55_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb55_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.GotovnostKJertve;
                RichTBTalentsDEF.Text = "Герой сокращает урон союзника от первой атаки врага на 20%. Он принимает удар на себя вместо союзника.";
            }
            if (cb55_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.HolodnayaMest;
                RichTBTalentsDEF.Text = "Герой с вероятностью 50% пополняет шкалу хода на 15%, когда союзник получает критический урон от одного навыка врага.";
            }
            if (cb55_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Otplata;
                RichTBTalentsDEF.Text = "Герой с вероятностью 50% использует базовый навык для контраатаки, когда теряет 25% максимального здоровья от навыка одного врага.";
            }
            if (cb55_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Strashchanie;
                RichTBTalentsDEF.Text = "Герой с вероятностью 20% использует базовый навык для атаки, когда враг накладывает на союзника [Оглушение],[Сон] или [Заморозку]";
            }
        }

        private void cb6_DEFTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb6_DEFTalent.SelectedIndex == 0)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.StalnayaKoja;
                RichTBTalentsDEF.Text = "Защита +200.";
            }
            if (cb6_DEFTalent.SelectedIndex == 1)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.OdinZaVseh;
                RichTBTalentsDEF.Text = "Герой снижает урон, получаемый союзниками, на 5%. Вместо этого он принимает урон на себя.";
            }
            if (cb6_DEFTalent.SelectedIndex == 2)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Gnet;
                RichTBTalentsDEF.Text = "Шансы налложить [Оглушение], [Сон], [Заморозку], [Провокацию] от навыков или артефактов увеличивается на 5%.";
            }
            if (cb6_DEFTalent.SelectedIndex == 3)
            {
                TalentsPicturesDEF.BackgroundImage = RaidCalculator.Properties.Resources.Spokoystvie;
                RichTBTalentsDEF.Text = "Сопротивление +50";
            }
        }

        private void cb1_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb1_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Upornost;
                RichTBTalentsSUP.Text = "Максимальное здоровье +810.";
            }
            if (cb1_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.RokovoyPricel;
                RichTBTalentsSUP.Text = "Меткость +10.";
            }
        }

        private void cb2_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb2_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.IscelyaushchayaDlan;
                RichTBTalentsSUP.Text = "Герой лечит на 5% больше.";
            }
            if (cb2_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Shchitonosec;
                RichTBTalentsSUP.Text = "Сила [Щита], который накладывает герой, увеличивается на 5%.";
            }
            if (cb2_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.VelichieSmerty;
                RichTBTalentsSUP.Text = "Герой лечится на 10% своего максимального здоровья, когда в раунде погибает первый враг.";
            }
            if (cb2_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Fiksaciya;
                RichTBTalentsSUP.Text = "Меткость героя увеличивается на 20, когда ни один его навык не перезаряжается.";
            }
        }

        private void cb22_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb22_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.IscelyaushchayaDlan;
                RichTBTalentsSUP.Text = "Герой лечит на 5% больше.";
            }
            if (cb22_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Shchitonosec;
                RichTBTalentsSUP.Text = "Сила [Щита], который накладывает герой, увеличивается на 5%.";
            }
            if (cb22_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.VelichieSmerty;
                RichTBTalentsSUP.Text = "Герой лечится на 10% своего максимального здоровья, когда в раунде погибает первый враг.";
            }
            if (cb22_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Fiksaciya;
                RichTBTalentsSUP.Text = "Меткость героя увеличивается на 20, когда ни один его навык не перезаряжается.";
            }
        }

        private void cb3_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb3_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Spasitel;
                RichTBTalentsSUP.Text = "Лечение и сила [Щита] увеличивается на 10%, если герой накладывает их на союзника со здоровьем 40% или меньше.";
            }
            if (cb3_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.SkorayaReakciya;
                RichTBTalentsSUP.Text = "Героя с вероятностью 30% пополняет шкалу хода на 10%, когда накладываемый им бонус снимают или его действие заканчивается.";
            }
            if (cb3_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.focus;
                RichTBTalentsSUP.Text = "Меткость героя увеличивается на 4 за каждого живого врага. Максимум: 16.";
            }
            if (cb3_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Provorstvo;
                RichTBTalentsSUP.Text = "Герой с вероятностью 30% пополняет шкалу хода на 10%, когда накладываемый им штраф снимают или его действие заканчивается.";
            }
        }

        private void cb33_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb33_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Spasitel;
                RichTBTalentsSUP.Text = "Лечение и сила [Щита] увеличивается на 10%, если герой накладывает их на союзника со здоровьем 40% или меньше.";
            }
            if (cb33_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.SkorayaReakciya;
                RichTBTalentsSUP.Text = "Героя с вероятностью 30% пополняет шкалу хода на 10%, когда накладываемый им бонус снимают или его действие заканчивается.";
            }
            if (cb33_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.focus;
                RichTBTalentsSUP.Text = "Меткость героя увеличивается на 4 за каждого живого врага. Максимум: 16.";
            }
            if (cb33_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Provorstvo;
                RichTBTalentsSUP.Text = "Герой с вероятностью 30% пополняет шкалу хода на 10%, когда накладываемый им штраф снимают или его действие заканчивается.";
            }
        }

        private void cb4_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb4_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.BlagodatnayaPomoshch;
                RichTBTalentsSUP.Text = "Лечение и сила [Щита] увеличивается на 15%, если герой накладывает их на союзника со штрафом [Оглушение], [Сон] или [Заморозка].";
            }
            if (cb4_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.VolshebniyVihr;
                RichTBTalentsSUP.Text = "Герой с вероятностью 5% сокращает перезарядку случайного навыка на 1 ход в начале каждого хода.";
            }
            if (cb4_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.PodnyatieDuha;
                RichTBTalentsSUP.Text = "Бонусы показателей от базовых наборов артефактов увеличиваются на 15%.";
            }
            if (cb4_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.DurnoyGlaz;
                RichTBTalentsSUP.Text = "Герой опустошает шкалу хода цели, когда первый раз используется для атаки базовый навык. Навыки с одиночной целью опусташают шкалу хода на 20%, а навыки по площади на 5%. Доступно 1 раз для каждой цели.";
            }
        }

        private void cb44_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb44_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.BlagodatnayaPomoshch;
                RichTBTalentsSUP.Text = "Лечение и сила [Щита] увеличивается на 15%, если герой накладывает их на союзника со штрафом [Оглушение], [Сон] или [Заморозка].";
            }
            if (cb44_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.VolshebniyVihr;
                RichTBTalentsSUP.Text = "Герой с вероятностью 5% сокращает перезарядку случайного навыка на 1 ход в начале каждого хода.";
            }
            if (cb44_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.PodnyatieDuha;
                RichTBTalentsSUP.Text = "Бонусы показателей от базовых наборов артефактов увеличиваются на 15%.";
            }
            if (cb44_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.DurnoyGlaz;
                RichTBTalentsSUP.Text = "Герой опустошает шкалу хода цели, когда первый раз используется для атаки базовый навык. Навыки с одиночной целью опусташают шкалу хода на 20%, а навыки по площади на 5%. Доступно 1 раз для каждой цели.";
            }
        }

        private void cb5_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb5_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.PodmogaVprok;
                RichTBTalentsSUP.Text = "Герой с вероятностью 30% продлевает действие любого наложенного им бонуса на 1 ход. Талант не действует на [Блок урона], [Неуязвимость] и [Возрождение].";
            }
            if (cb5_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Boykost;
                RichTBTalentsSUP.Text = "Скорость увеличивается на 8 за каждого погибшего союзника. Максимум 24";
            }
            if (cb5_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.SnaiperSUP;
                RichTBTalentsSUP.Text = "Шансы наложить любой штраф от навыков или артефактов увеличивается на 5%. Талант не действует на [Оглушение], [Сон], [Заморозку] или [Провокацию]";
            }
            if (cb5_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.BoevieChary;
                RichTBTalentsSUP.Text = "Герой с вероятностью 35% продлевает действие любого наложенного им штрафа на 1 ход. Талант не действует на [Оглушение], [Сон], [Заморозку] или [Провокацию].";
            }
        }
        private void cb55_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb55_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.PodmogaVprok;
                RichTBTalentsSUP.Text = "Герой с вероятностью 30% продлевает действие любого наложенного им бонуса на 1 ход. Талант не действует на [Блок урона], [Неуязвимость] и [Возрождение].";
            }
            if (cb55_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Boykost;
                RichTBTalentsSUP.Text = "Скорость увеличивается на 8 за каждого погибшего союзника. Максимум 24";
            }
            if (cb55_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.SnaiperSUP;
                RichTBTalentsSUP.Text = "Шансы наложить любой штраф от навыков или артефактов увеличивается на 5%. Талант не действует на [Оглушение], [Сон], [Заморозку] или [Провокацию]";
            }
            if (cb55_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.BoevieChary;
                RichTBTalentsSUP.Text = "Герой с вероятностью 35% продлевает действие любого наложенного им штрафа на 1 ход. Талант не действует на [Оглушение], [Сон], [Заморозку] или [Провокацию].";
            }
        }

        private void cb6_SUPTalent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb6_SUPTalent.SelectedIndex == 0)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.EliksirJizni;
                RichTBTalentsSUP.Text = "Максимальное здоровье +3000.";
            }
            if (cb6_SUPTalent.SelectedIndex == 1)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.IgranaRuku;
                RichTBTalentsSUP.Text = "Герой пополняет шкалу хода на 20% каждый раз, когда здоровье союзница падает ниже 25%.";
            }
            if (cb6_SUPTalent.SelectedIndex == 2)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.Tiraniya;
                RichTBTalentsSUP.Text = "Герой пополняет шкалу хода на 2,5% за каждый активный штраф, который он накладывает. Максимум: 10%.";
            }
            if (cb6_SUPTalent.SelectedIndex == 3)
            {
                TalentsPicturesSUP.BackgroundImage = RaidCalculator.Properties.Resources.OrliniyGlas;
                RichTBTalentsSUP.Text = "Меткость +50.";
            }
        }
    }
}
